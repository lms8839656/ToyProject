
ToyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a14  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009cac  08009cac  0000acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009cf4  08009cf4  0000acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009cfc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08009d0c  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009d6c  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  240000d0  08009dcc  0000b0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000908  08009dcc  0000b908  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1ff  00000000  00000000  0000b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c0  00000000  00000000  0002a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0002e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb6  00000000  00000000  0002f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b3cb  00000000  00000000  0003080e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021bfb  00000000  00000000  0006bbd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00169f41  00000000  00000000  0008d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f7715  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005488  00000000  00000000  001f7758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001fcbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009c94 	.word	0x08009c94

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009c94 	.word	0x08009c94

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <MX_DMA_Init+0x3c>)
 80005d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <MX_DMA_Init+0x3c>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_DMA_Init+0x3c>)
 80005e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	200b      	movs	r0, #11
 80005f2:	f001 f950 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005f6:	200b      	movs	r0, #11
 80005f8:	f001 f967 	bl	80018ca <HAL_NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	58024400 	.word	0x58024400

08000608 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_ETH_Init+0x80>)
 800060e:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <MX_ETH_Init+0x84>)
 8000610:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_ETH_Init+0x88>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000618:	4b1d      	ldr	r3, [pc, #116]	@ (8000690 <MX_ETH_Init+0x88>)
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_ETH_Init+0x88>)
 8000620:	22e1      	movs	r2, #225	@ 0xe1
 8000622:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000624:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <MX_ETH_Init+0x88>)
 8000626:	2200      	movs	r2, #0
 8000628:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_ETH_Init+0x88>)
 800062c:	2200      	movs	r2, #0
 800062e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000630:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <MX_ETH_Init+0x88>)
 8000632:	2200      	movs	r2, #0
 8000634:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_ETH_Init+0x80>)
 8000638:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <MX_ETH_Init+0x88>)
 800063a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_ETH_Init+0x80>)
 800063e:	2201      	movs	r2, #1
 8000640:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_ETH_Init+0x80>)
 8000644:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <MX_ETH_Init+0x8c>)
 8000646:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_ETH_Init+0x80>)
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <MX_ETH_Init+0x90>)
 800064c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_ETH_Init+0x80>)
 8000650:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000654:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000656:	480c      	ldr	r0, [pc, #48]	@ (8000688 <MX_ETH_Init+0x80>)
 8000658:	f003 f85a 	bl	8003710 <HAL_ETH_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000662:	f000 faf4 	bl	8000c4e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000666:	2238      	movs	r2, #56	@ 0x38
 8000668:	2100      	movs	r1, #0
 800066a:	480c      	ldr	r0, [pc, #48]	@ (800069c <MX_ETH_Init+0x94>)
 800066c:	f009 fae6 	bl	8009c3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <MX_ETH_Init+0x94>)
 8000672:	2221      	movs	r2, #33	@ 0x21
 8000674:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_ETH_Init+0x94>)
 8000678:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800067c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_ETH_Init+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	24000124 	.word	0x24000124
 800068c:	40028000 	.word	0x40028000
 8000690:	240001d4 	.word	0x240001d4
 8000694:	24000070 	.word	0x24000070
 8000698:	24000010 	.word	0x24000010
 800069c:	240000ec 	.word	0x240000ec

080006a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	@ 0x38
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a59      	ldr	r2, [pc, #356]	@ (8000824 <HAL_ETH_MspInit+0x184>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	f040 80ab 	bne.w	800081a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006c4:	4b58      	ldr	r3, [pc, #352]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 80006c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006ca:	4a57      	ldr	r2, [pc, #348]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 80006cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006d4:	4b54      	ldr	r3, [pc, #336]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 80006d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006e2:	4b51      	ldr	r3, [pc, #324]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 80006e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006e8:	4a4f      	ldr	r2, [pc, #316]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 80006ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80006f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 80006f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80006f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006fc:	61fb      	str	r3, [r7, #28]
 80006fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000700:	4b49      	ldr	r3, [pc, #292]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000702:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000706:	4a48      	ldr	r2, [pc, #288]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000710:	4b45      	ldr	r3, [pc, #276]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	4b42      	ldr	r3, [pc, #264]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000724:	4a40      	ldr	r2, [pc, #256]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072e:	4b3e      	ldr	r3, [pc, #248]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b3a      	ldr	r3, [pc, #232]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 800073e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000742:	4a39      	ldr	r2, [pc, #228]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074c:	4b36      	ldr	r3, [pc, #216]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 800074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b33      	ldr	r3, [pc, #204]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000760:	4a31      	ldr	r2, [pc, #196]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800076a:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077e:	4a2a      	ldr	r2, [pc, #168]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000788:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <HAL_ETH_MspInit+0x188>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000796:	2332      	movs	r3, #50	@ 0x32
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	481e      	ldr	r0, [pc, #120]	@ (800082c <HAL_ETH_MspInit+0x18c>)
 80007b2:	f003 fbe1 	bl	8003f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80007b6:	2386      	movs	r3, #134	@ 0x86
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c6:	230b      	movs	r3, #11
 80007c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4817      	ldr	r0, [pc, #92]	@ (8000830 <HAL_ETH_MspInit+0x190>)
 80007d2:	f003 fbd1 	bl	8003f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e8:	230b      	movs	r3, #11
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	4810      	ldr	r0, [pc, #64]	@ (8000834 <HAL_ETH_MspInit+0x194>)
 80007f4:	f003 fbc0 	bl	8003f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007f8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080a:	230b      	movs	r3, #11
 800080c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000812:	4619      	mov	r1, r3
 8000814:	4808      	ldr	r0, [pc, #32]	@ (8000838 <HAL_ETH_MspInit+0x198>)
 8000816:	f003 fbaf 	bl	8003f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800081a:	bf00      	nop
 800081c:	3738      	adds	r7, #56	@ 0x38
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40028000 	.word	0x40028000
 8000828:	58024400 	.word	0x58024400
 800082c:	58020800 	.word	0x58020800
 8000830:	58020000 	.word	0x58020000
 8000834:	58020400 	.word	0x58020400
 8000838:	58021800 	.word	0x58021800

0800083c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08e      	sub	sp, #56	@ 0x38
 8000840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000852:	4b74      	ldr	r3, [pc, #464]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000858:	4a72      	ldr	r2, [pc, #456]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000862:	4b70      	ldr	r3, [pc, #448]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	623b      	str	r3, [r7, #32]
 800086e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000870:	4b6c      	ldr	r3, [pc, #432]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000876:	4a6b      	ldr	r2, [pc, #428]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000880:	4b68      	ldr	r3, [pc, #416]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	4b65      	ldr	r3, [pc, #404]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000894:	4a63      	ldr	r2, [pc, #396]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800089e:	4b61      	ldr	r3, [pc, #388]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ac:	4b5d      	ldr	r3, [pc, #372]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b2:	4a5c      	ldr	r2, [pc, #368]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008bc:	4b59      	ldr	r3, [pc, #356]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b56      	ldr	r3, [pc, #344]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d0:	4a54      	ldr	r2, [pc, #336]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008da:	4b52      	ldr	r3, [pc, #328]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ee:	4a4d      	ldr	r2, [pc, #308]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	4b47      	ldr	r3, [pc, #284]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a45      	ldr	r2, [pc, #276]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b43      	ldr	r3, [pc, #268]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 0308 	and.w	r3, r3, #8
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000924:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 800092c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000934:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <MX_GPIO_Init+0x1e8>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000948:	4837      	ldr	r0, [pc, #220]	@ (8000a28 <MX_GPIO_Init+0x1ec>)
 800094a:	f003 fcc5 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000954:	4835      	ldr	r0, [pc, #212]	@ (8000a2c <MX_GPIO_Init+0x1f0>)
 8000956:	f003 fcbf 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000960:	4833      	ldr	r0, [pc, #204]	@ (8000a30 <MX_GPIO_Init+0x1f4>)
 8000962:	f003 fcb9 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2102      	movs	r1, #2
 800096a:	4832      	ldr	r0, [pc, #200]	@ (8000a34 <MX_GPIO_Init+0x1f8>)
 800096c:	f003 fcb4 	bl	80042d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	482c      	ldr	r0, [pc, #176]	@ (8000a38 <MX_GPIO_Init+0x1fc>)
 8000986:	f003 faf7 	bl	8003f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_STB_Pin;
 800098a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_STB_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	4821      	ldr	r0, [pc, #132]	@ (8000a28 <MX_GPIO_Init+0x1ec>)
 80009a4:	f003 fae8 	bl	8003f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009a8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009be:	4619      	mov	r1, r3
 80009c0:	481a      	ldr	r0, [pc, #104]	@ (8000a2c <MX_GPIO_Init+0x1f0>)
 80009c2:	f003 fad9 	bl	8003f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <MX_GPIO_Init+0x1f4>)
 80009e0:	f003 faca 	bl	8003f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009e4:	2380      	movs	r3, #128	@ 0x80
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <MX_GPIO_Init+0x200>)
 80009fa:	f003 fabd 	bl	8003f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fe:	2302      	movs	r3, #2
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <MX_GPIO_Init+0x1f8>)
 8000a16:	f003 faaf 	bl	8003f78 <HAL_GPIO_Init>

}
 8000a1a:	bf00      	nop
 8000a1c:	3738      	adds	r7, #56	@ 0x38
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	58024400 	.word	0x58024400
 8000a28:	58021400 	.word	0x58021400
 8000a2c:	58020400 	.word	0x58020400
 8000a30:	58020c00 	.word	0x58020c00
 8000a34:	58021000 	.word	0x58021000
 8000a38:	58020800 	.word	0x58020800
 8000a3c:	58021800 	.word	0x58021800

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fd76 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f818 	bl	8000a7c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a4c:	f000 f8d0 	bl	8000bf0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f7ff fef4 	bl	800083c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a54:	f7ff fdb8 	bl	80005c8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a58:	f000 fbde 	bl	8001218 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a5c:	f000 fc92 	bl	8001384 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8000a60:	f000 f8fc 	bl	8000c5c <MX_RTC_Init>
  MX_ETH_Init();
 8000a64:	f7ff fdd0 	bl	8000608 <MX_ETH_Init>
  MX_SPI4_Init();
 8000a68:	f000 f986 	bl	8000d78 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000a6c:	f000 f9da 	bl	8000e24 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  extern void User_SystemInit();
  User_SystemInit();
 8000a70:	f009 f835 	bl	8009ade <User_SystemInit>
  extern void User_RunSystem();
  User_RunSystem();
 8000a74:	f009 f83a 	bl	8009aec <User_RunSystem>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <main+0x38>

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	@ 0x78
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a86:	224c      	movs	r2, #76	@ 0x4c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f009 f8d6 	bl	8009c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2220      	movs	r2, #32
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f009 f8cf 	bl	8009c3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f003 fd74 	bl	800458c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b4e      	ldr	r3, [pc, #312]	@ (8000be4 <SystemClock_Config+0x168>)
 8000aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aac:	4a4d      	ldr	r2, [pc, #308]	@ (8000be4 <SystemClock_Config+0x168>)
 8000aae:	f023 0301 	bic.w	r3, r3, #1
 8000ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8000be4 <SystemClock_Config+0x168>)
 8000ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b4a      	ldr	r3, [pc, #296]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a49      	ldr	r2, [pc, #292]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000ac4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b47      	ldr	r3, [pc, #284]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad6:	bf00      	nop
 8000ad8:	4b43      	ldr	r3, [pc, #268]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ae4:	d1f8      	bne.n	8000ad8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b41      	ldr	r3, [pc, #260]	@ (8000bec <SystemClock_Config+0x170>)
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aec:	4a3f      	ldr	r2, [pc, #252]	@ (8000bec <SystemClock_Config+0x170>)
 8000aee:	f043 0302 	orr.w	r3, r3, #2
 8000af2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000af6:	4b3d      	ldr	r3, [pc, #244]	@ (8000bec <SystemClock_Config+0x170>)
 8000af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a36      	ldr	r2, [pc, #216]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000b0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b31      	ldr	r3, [pc, #196]	@ (8000be4 <SystemClock_Config+0x168>)
 8000b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b22:	4a30      	ldr	r2, [pc, #192]	@ (8000be4 <SystemClock_Config+0x168>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000be4 <SystemClock_Config+0x168>)
 8000b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b36:	bf00      	nop
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <SystemClock_Config+0x16c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b44:	d1f8      	bne.n	8000b38 <SystemClock_Config+0xbc>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b46:	f003 fd11 	bl	800456c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b4a:	f000 fda9 	bl	80016a0 <HAL_GetREVID>
 8000b4e:	4b27      	ldr	r3, [pc, #156]	@ (8000bec <SystemClock_Config+0x170>)
 8000b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000b52:	4a26      	ldr	r2, [pc, #152]	@ (8000bec <SystemClock_Config+0x170>)
 8000b54:	f023 0318 	bic.w	r3, r3, #24
 8000b58:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b64:	2301      	movs	r3, #1
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b74:	2378      	movs	r3, #120	@ 0x78
 8000b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000b7c:	2314      	movs	r3, #20
 8000b7e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b84:	230c      	movs	r3, #12
 8000b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 fd43 	bl	8004620 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000ba0:	f000 f855 	bl	8000c4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	233f      	movs	r3, #63	@ 0x3f
 8000ba6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bb4:	2340      	movs	r3, #64	@ 0x40
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bb8:	2340      	movs	r3, #64	@ 0x40
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bc2:	2340      	movs	r3, #64	@ 0x40
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 f981 	bl	8004ed4 <HAL_RCC_ClockConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x160>
  {
    Error_Handler();
 8000bd8:	f000 f839 	bl	8000c4e <Error_Handler>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3778      	adds	r7, #120	@ 0x78
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58000400 	.word	0x58000400
 8000be8:	58024800 	.word	0x58024800
 8000bec:	58024400 	.word	0x58024400

08000bf0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0b0      	sub	sp, #192	@ 0xc0
 8000bf4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	22c0      	movs	r2, #192	@ 0xc0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f009 f81d 	bl	8009c3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI5;
 8000c02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 120;
 8000c12:	2378      	movs	r3, #120	@ 0x78
 8000c14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c22:	23c0      	movs	r3, #192	@ 0xc0
 8000c24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000c2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c32:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fcd8 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c42:	f000 f804 	bl	8000c4e <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	37c0      	adds	r7, #192	@ 0xc0
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c52:	b672      	cpsid	i
}
 8000c54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c56:	bf00      	nop
 8000c58:	e7fd      	b.n	8000c56 <Error_Handler+0x8>
	...

08000c5c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c70:	2300      	movs	r3, #0
 8000c72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c74:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c76:	4a26      	ldr	r2, [pc, #152]	@ (8000d10 <MX_RTC_Init+0xb4>)
 8000c78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c7a:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c82:	227f      	movs	r2, #127	@ 0x7f
 8000c84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c88:	22ff      	movs	r2, #255	@ 0xff
 8000c8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca4:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000ca6:	f006 facd 	bl	8007244 <HAL_RTC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000cb0:	f7ff ffcd 	bl	8000c4e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000cd0:	f006 fb3a 	bl	8007348 <HAL_RTC_SetTime>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000cda:	f7ff ffb8 	bl	8000c4e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_RTC_Init+0xb0>)
 8000cf6:	f006 fbc5 	bl	8007484 <HAL_RTC_SetDate>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d00:	f7ff ffa5 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	240001dc 	.word	0x240001dc
 8000d10:	58004000 	.word	0x58004000

08000d14 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0b2      	sub	sp, #200	@ 0xc8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0308 	add.w	r3, r7, #8
 8000d20:	22c0      	movs	r2, #192	@ 0xc0
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f008 ff89 	bl	8009c3c <memset>
  if(rtcHandle->Instance==RTC)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <HAL_RTC_MspInit+0x5c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d119      	bne.n	8000d68 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 fc4d 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000d58:	f7ff ff79 	bl	8000c4e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d5c:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <HAL_RTC_MspInit+0x60>)
 8000d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_RTC_MspInit+0x60>)
 8000d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d66:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d68:	bf00      	nop
 8000d6a:	37c8      	adds	r7, #200	@ 0xc8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58004000 	.word	0x58004000
 8000d74:	58024400 	.word	0x58024400

08000d78 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000d7e:	4a28      	ldr	r2, [pc, #160]	@ (8000e20 <MX_SPI4_Init+0xa8>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000d84:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d88:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8a:	4b24      	ldr	r3, [pc, #144]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000d92:	2207      	movs	r2, #7
 8000d94:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000da4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000da8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dac:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000db0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db8:	4b18      	ldr	r3, [pc, #96]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dcc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_SPI4_Init+0xa4>)
 8000e0a:	f006 fc79 	bl	8007700 <HAL_SPI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000e14:	f7ff ff1b 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24000200 	.word	0x24000200
 8000e20:	40013400 	.word	0x40013400

08000e24 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000e28:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e2a:	4a29      	ldr	r2, [pc, #164]	@ (8000ed0 <MX_SPI5_Init+0xac>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000e2e:	4b27      	ldr	r3, [pc, #156]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e30:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e34:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000e36:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e38:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000e3c:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e44:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e56:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e5a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e62:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e66:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e80:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <MX_SPI5_Init+0xa8>)
 8000eba:	f006 fc21 	bl	8007700 <HAL_SPI_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_SPI5_Init+0xa4>
  {
    Error_Handler();
 8000ec4:	f7ff fec3 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24000288 	.word	0x24000288
 8000ed0:	40015000 	.word	0x40015000

08000ed4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8001030 <HAL_SPI_MspInit+0x15c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d163      	bne.n	8000fbe <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000efc:	4a4d      	ldr	r2, [pc, #308]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000efe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f06:	4b4b      	ldr	r3, [pc, #300]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f14:	4b47      	ldr	r3, [pc, #284]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1a:	4a46      	ldr	r2, [pc, #280]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000f1c:	f043 0310 	orr.w	r3, r3, #16
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f24:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f32:	2374      	movs	r3, #116	@ 0x74
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000f42:	2305      	movs	r3, #5
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	483a      	ldr	r0, [pc, #232]	@ (8001038 <HAL_SPI_MspInit+0x164>)
 8000f4e:	f003 f813 	bl	8003f78 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f54:	4a3a      	ldr	r2, [pc, #232]	@ (8001040 <HAL_SPI_MspInit+0x16c>)
 8000f56:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8000f58:	4b38      	ldr	r3, [pc, #224]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f5a:	2254      	movs	r2, #84	@ 0x54
 8000f5c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5e:	4b37      	ldr	r3, [pc, #220]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f60:	2240      	movs	r2, #64	@ 0x40
 8000f62:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b35      	ldr	r3, [pc, #212]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b34      	ldr	r3, [pc, #208]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f70:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f72:	4b32      	ldr	r3, [pc, #200]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f78:	4b30      	ldr	r3, [pc, #192]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8000f90:	482a      	ldr	r0, [pc, #168]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000f92:	f000 fcb5 	bl	8001900 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000f9c:	f7ff fe57 	bl	8000c4e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a26      	ldr	r2, [pc, #152]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000fa4:	679a      	str	r2, [r3, #120]	@ 0x78
 8000fa6:	4a25      	ldr	r2, [pc, #148]	@ (800103c <HAL_SPI_MspInit+0x168>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2054      	movs	r0, #84	@ 0x54
 8000fb2:	f000 fc70 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000fb6:	2054      	movs	r0, #84	@ 0x54
 8000fb8:	f000 fc87 	bl	80018ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000fbc:	e033      	b.n	8001026 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI5)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a20      	ldr	r2, [pc, #128]	@ (8001044 <HAL_SPI_MspInit+0x170>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d12e      	bne.n	8001026 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fce:	4a19      	ldr	r2, [pc, #100]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000fd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_SPI_MspInit+0x160>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001004:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001016:	2305      	movs	r3, #5
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4809      	ldr	r0, [pc, #36]	@ (8001048 <HAL_SPI_MspInit+0x174>)
 8001022:	f002 ffa9 	bl	8003f78 <HAL_GPIO_Init>
}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	@ 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40013400 	.word	0x40013400
 8001034:	58024400 	.word	0x58024400
 8001038:	58021000 	.word	0x58021000
 800103c:	24000310 	.word	0x24000310
 8001040:	40020010 	.word	0x40020010
 8001044:	40015000 	.word	0x40015000
 8001048:	58021400 	.word	0x58021400

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001058:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_MspInit+0x30>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_MspInit+0x30>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	58024400 	.word	0x58024400

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 fa9f 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <DMA1_Stream0_IRQHandler+0x10>)
 80010e6:	f001 f9ad 	bl	8002444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	24000310 	.word	0x24000310

080010f4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <SPI4_IRQHandler+0x10>)
 80010fa:	f006 fe13 	bl	8007d24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000200 	.word	0x24000200

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800110c:	4b37      	ldr	r3, [pc, #220]	@ (80011ec <SystemInit+0xe4>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a36      	ldr	r2, [pc, #216]	@ (80011ec <SystemInit+0xe4>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800111c:	4b34      	ldr	r3, [pc, #208]	@ (80011f0 <SystemInit+0xe8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	2b06      	cmp	r3, #6
 8001126:	d807      	bhi.n	8001138 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001128:	4b31      	ldr	r3, [pc, #196]	@ (80011f0 <SystemInit+0xe8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 030f 	bic.w	r3, r3, #15
 8001130:	4a2f      	ldr	r2, [pc, #188]	@ (80011f0 <SystemInit+0xe8>)
 8001132:	f043 0307 	orr.w	r3, r3, #7
 8001136:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001138:	4b2e      	ldr	r3, [pc, #184]	@ (80011f4 <SystemInit+0xec>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2d      	ldr	r2, [pc, #180]	@ (80011f4 <SystemInit+0xec>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001144:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <SystemInit+0xec>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800114a:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <SystemInit+0xec>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4929      	ldr	r1, [pc, #164]	@ (80011f4 <SystemInit+0xec>)
 8001150:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <SystemInit+0xf0>)
 8001152:	4013      	ands	r3, r2
 8001154:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <SystemInit+0xe8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <SystemInit+0xe8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 030f 	bic.w	r3, r3, #15
 800116a:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <SystemInit+0xe8>)
 800116c:	f043 0307 	orr.w	r3, r3, #7
 8001170:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <SystemInit+0xec>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001178:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <SystemInit+0xec>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800117e:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <SystemInit+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <SystemInit+0xec>)
 8001186:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <SystemInit+0xf4>)
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800118a:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <SystemInit+0xec>)
 800118c:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <SystemInit+0xf8>)
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <SystemInit+0xec>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <SystemInit+0xfc>)
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001196:	4b17      	ldr	r3, [pc, #92]	@ (80011f4 <SystemInit+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <SystemInit+0xec>)
 800119e:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <SystemInit+0xfc>)
 80011a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011a2:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <SystemInit+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <SystemInit+0xec>)
 80011aa:	4a16      	ldr	r2, [pc, #88]	@ (8001204 <SystemInit+0xfc>)
 80011ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <SystemInit+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <SystemInit+0xec>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <SystemInit+0xec>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <SystemInit+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <SystemInit+0x100>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <SystemInit+0x104>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011d2:	d202      	bcs.n	80011da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <SystemInit+0x108>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <SystemInit+0x10c>)
 80011dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00
 80011f0:	52002000 	.word	0x52002000
 80011f4:	58024400 	.word	0x58024400
 80011f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011fc:	02020200 	.word	0x02020200
 8001200:	01ff0000 	.word	0x01ff0000
 8001204:	01010280 	.word	0x01010280
 8001208:	5c001000 	.word	0x5c001000
 800120c:	ffff0000 	.word	0xffff0000
 8001210:	51008108 	.word	0x51008108
 8001214:	52004000 	.word	0x52004000

08001218 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800121c:	4b22      	ldr	r3, [pc, #136]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 800121e:	4a23      	ldr	r2, [pc, #140]	@ (80012ac <MX_USART3_UART_Init+0x94>)
 8001220:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001262:	f007 f858 	bl	8008316 <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800126c:	f7ff fcef 	bl	8000c4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001270:	2100      	movs	r1, #0
 8001272:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001274:	f008 f861 	bl	800933a <HAL_UARTEx_SetTxFifoThreshold>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800127e:	f7ff fce6 	bl	8000c4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4808      	ldr	r0, [pc, #32]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001286:	f008 f896 	bl	80093b6 <HAL_UARTEx_SetRxFifoThreshold>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001290:	f7ff fcdd 	bl	8000c4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_USART3_UART_Init+0x90>)
 8001296:	f008 f817 	bl	80092c8 <HAL_UARTEx_DisableFifoMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f7ff fcd5 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	24000388 	.word	0x24000388
 80012ac:	40004800 	.word	0x40004800

080012b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0ba      	sub	sp, #232	@ 0xe8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	22c0      	movs	r2, #192	@ 0xc0
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 fcb3 	bl	8009c3c <memset>
  if(uartHandle->Instance==USART3)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <HAL_UART_MspInit+0xc8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d146      	bne.n	800136e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e0:	f04f 0202 	mov.w	r2, #2
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 f978 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001302:	f7ff fca4 	bl	8000c4e <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001306:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <HAL_UART_MspInit+0xcc>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800130c:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <HAL_UART_MspInit+0xcc>)
 800130e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001312:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_UART_MspInit+0xcc>)
 8001318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800131c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_UART_MspInit+0xcc>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	4a14      	ldr	r2, [pc, #80]	@ (800137c <HAL_UART_MspInit+0xcc>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <HAL_UART_MspInit+0xcc>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001342:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <HAL_UART_MspInit+0xd0>)
 800136a:	f002 fe05 	bl	8003f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800136e:	bf00      	nop
 8001370:	37e8      	adds	r7, #232	@ 0xe8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004800 	.word	0x40004800
 800137c:	58024400 	.word	0x58024400
 8001380:	58020c00 	.word	0x58020c00

08001384 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138a:	4a16      	ldr	r2, [pc, #88]	@ (80013e4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800138c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800138e:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001390:	2209      	movs	r2, #9
 8001392:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001396:	2202      	movs	r2, #2
 8001398:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800139c:	2200      	movs	r2, #0
 800139e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a2:	2202      	movs	r2, #2
 80013a4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013cc:	f002 ff9d 	bl	800430a <HAL_PCD_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013d6:	f7ff fc3a 	bl	8000c4e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2400041c 	.word	0x2400041c
 80013e4:	40080000 	.word	0x40080000

080013e8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ba      	sub	sp, #232	@ 0xe8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	22c0      	movs	r2, #192	@ 0xc0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f008 fc17 	bl	8009c3c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a30      	ldr	r2, [pc, #192]	@ (80014d4 <HAL_PCD_MspInit+0xec>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d159      	bne.n	80014cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001418:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001424:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4618      	mov	r0, r3
 8001432:	f004 f8db 	bl	80055ec <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800143c:	f7ff fc07 	bl	8000c4e <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001440:	f003 f8de 	bl	8004600 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144a:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <HAL_PCD_MspInit+0xf0>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001462:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800147c:	230a      	movs	r3, #10
 800147e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001486:	4619      	mov	r1, r3
 8001488:	4814      	ldr	r0, [pc, #80]	@ (80014dc <HAL_PCD_MspInit+0xf4>)
 800148a:	f002 fd75 	bl	8003f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800148e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <HAL_PCD_MspInit+0xf4>)
 80014aa:	f002 fd65 	bl	8003f78 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_PCD_MspInit+0xf0>)
 80014b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014b4:	4a08      	ldr	r2, [pc, #32]	@ (80014d8 <HAL_PCD_MspInit+0xf0>)
 80014b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_PCD_MspInit+0xf0>)
 80014c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	37e8      	adds	r7, #232	@ 0xe8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40080000 	.word	0x40080000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020000 	.word	0x58020000

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001518 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014e4:	f7ff fe10 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	@ (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	@ (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150e:	f008 fb9d 	bl	8009c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff fa95 	bl	8000a40 <main>
  bx  lr
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800151c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001520:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001524:	08009cfc 	.word	0x08009cfc
  ldr r2, =_sbss
 8001528:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800152c:	24000908 	.word	0x24000908

08001530 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC3_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153a:	2003      	movs	r0, #3
 800153c:	f000 f9a0 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001540:	f003 fe7e 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_Init+0x68>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4913      	ldr	r1, [pc, #76]	@ (80015a0 <HAL_Init+0x6c>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_Init+0x68>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_Init+0x6c>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_Init+0x70>)
 8001576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001578:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <HAL_Init+0x74>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f814 	bl	80015ac <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e002      	b.n	8001594 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fd5d 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	58024400 	.word	0x58024400
 80015a0:	08009cac 	.word	0x08009cac
 80015a4:	24000004 	.word	0x24000004
 80015a8:	24000000 	.word	0x24000000

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_InitTick+0x60>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e021      	b.n	8001604 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_InitTick+0x64>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_InitTick+0x60>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f985 	bl	80018e6 <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f94f 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <HAL_InitTick+0x68>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2400000c 	.word	0x2400000c
 8001610:	24000000 	.word	0x24000000
 8001614:	24000008 	.word	0x24000008

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2400000c 	.word	0x2400000c
 800163c:	24000900 	.word	0x24000900

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	24000900 	.word	0x24000900

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2400000c 	.word	0x2400000c

080016a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetREVID+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0c1b      	lsrs	r3, r3, #16
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	5c001000 	.word	0x5c001000

080016b8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80016c8:	4904      	ldr	r1, [pc, #16]	@ (80016dc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58000400 	.word	0x58000400

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	4313      	orrs	r3, r2
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x40>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	05fa0000 	.word	0x05fa0000

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	@ (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	@ 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff40 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff90 	bl	80017d4 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5f 	bl	8001780 <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff33 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa4 	bl	800183c <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff fe9a 	bl	8001640 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e316      	b.n	8001f46 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a66      	ldr	r2, [pc, #408]	@ (8001ab8 <HAL_DMA_Init+0x1b8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d04a      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a65      	ldr	r2, [pc, #404]	@ (8001abc <HAL_DMA_Init+0x1bc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d045      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a63      	ldr	r2, [pc, #396]	@ (8001ac0 <HAL_DMA_Init+0x1c0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d040      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a62      	ldr	r2, [pc, #392]	@ (8001ac4 <HAL_DMA_Init+0x1c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d03b      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a60      	ldr	r2, [pc, #384]	@ (8001ac8 <HAL_DMA_Init+0x1c8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d036      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5f      	ldr	r2, [pc, #380]	@ (8001acc <HAL_DMA_Init+0x1cc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d031      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5d      	ldr	r2, [pc, #372]	@ (8001ad0 <HAL_DMA_Init+0x1d0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d02c      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad4 <HAL_DMA_Init+0x1d4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d027      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ad8 <HAL_DMA_Init+0x1d8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d022      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a59      	ldr	r2, [pc, #356]	@ (8001adc <HAL_DMA_Init+0x1dc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d01d      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a57      	ldr	r2, [pc, #348]	@ (8001ae0 <HAL_DMA_Init+0x1e0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d018      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a56      	ldr	r2, [pc, #344]	@ (8001ae4 <HAL_DMA_Init+0x1e4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a54      	ldr	r2, [pc, #336]	@ (8001ae8 <HAL_DMA_Init+0x1e8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00e      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a53      	ldr	r2, [pc, #332]	@ (8001aec <HAL_DMA_Init+0x1ec>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a51      	ldr	r2, [pc, #324]	@ (8001af0 <HAL_DMA_Init+0x1f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d004      	beq.n	80019b8 <HAL_DMA_Init+0xb8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a50      	ldr	r2, [pc, #320]	@ (8001af4 <HAL_DMA_Init+0x1f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_DMA_Init+0xbc>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_DMA_Init+0xbe>
 80019bc:	2300      	movs	r3, #0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 813b 	beq.w	8001c3a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a37      	ldr	r2, [pc, #220]	@ (8001ab8 <HAL_DMA_Init+0x1b8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d04a      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a36      	ldr	r2, [pc, #216]	@ (8001abc <HAL_DMA_Init+0x1bc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d045      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a34      	ldr	r2, [pc, #208]	@ (8001ac0 <HAL_DMA_Init+0x1c0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d040      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a33      	ldr	r2, [pc, #204]	@ (8001ac4 <HAL_DMA_Init+0x1c4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d03b      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a31      	ldr	r2, [pc, #196]	@ (8001ac8 <HAL_DMA_Init+0x1c8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d036      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a30      	ldr	r2, [pc, #192]	@ (8001acc <HAL_DMA_Init+0x1cc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d031      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad0 <HAL_DMA_Init+0x1d0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d02c      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad4 <HAL_DMA_Init+0x1d4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d027      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad8 <HAL_DMA_Init+0x1d8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d022      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2a      	ldr	r2, [pc, #168]	@ (8001adc <HAL_DMA_Init+0x1dc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d01d      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a28      	ldr	r2, [pc, #160]	@ (8001ae0 <HAL_DMA_Init+0x1e0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d018      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a27      	ldr	r2, [pc, #156]	@ (8001ae4 <HAL_DMA_Init+0x1e4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a25      	ldr	r2, [pc, #148]	@ (8001ae8 <HAL_DMA_Init+0x1e8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00e      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <HAL_DMA_Init+0x1ec>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d009      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a22      	ldr	r2, [pc, #136]	@ (8001af0 <HAL_DMA_Init+0x1f0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d004      	beq.n	8001a74 <HAL_DMA_Init+0x174>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a21      	ldr	r2, [pc, #132]	@ (8001af4 <HAL_DMA_Init+0x1f4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d108      	bne.n	8001a86 <HAL_DMA_Init+0x186>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e007      	b.n	8001a96 <HAL_DMA_Init+0x196>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0201 	bic.w	r2, r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a96:	e02f      	b.n	8001af8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a98:	f7ff fdd2 	bl	8001640 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d928      	bls.n	8001af8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e246      	b.n	8001f46 <HAL_DMA_Init+0x646>
 8001ab8:	40020010 	.word	0x40020010
 8001abc:	40020028 	.word	0x40020028
 8001ac0:	40020040 	.word	0x40020040
 8001ac4:	40020058 	.word	0x40020058
 8001ac8:	40020070 	.word	0x40020070
 8001acc:	40020088 	.word	0x40020088
 8001ad0:	400200a0 	.word	0x400200a0
 8001ad4:	400200b8 	.word	0x400200b8
 8001ad8:	40020410 	.word	0x40020410
 8001adc:	40020428 	.word	0x40020428
 8001ae0:	40020440 	.word	0x40020440
 8001ae4:	40020458 	.word	0x40020458
 8001ae8:	40020470 	.word	0x40020470
 8001aec:	40020488 	.word	0x40020488
 8001af0:	400204a0 	.word	0x400204a0
 8001af4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1c8      	bne.n	8001a98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4b83      	ldr	r3, [pc, #524]	@ (8001d20 <HAL_DMA_Init+0x420>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001b1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001b5c:	4b71      	ldr	r3, [pc, #452]	@ (8001d24 <HAL_DMA_Init+0x424>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b71      	ldr	r3, [pc, #452]	@ (8001d28 <HAL_DMA_Init+0x428>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b68:	d328      	bcc.n	8001bbc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b28      	cmp	r3, #40	@ 0x28
 8001b70:	d903      	bls.n	8001b7a <HAL_DMA_Init+0x27a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b78:	d917      	bls.n	8001baa <HAL_DMA_Init+0x2aa>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001b80:	d903      	bls.n	8001b8a <HAL_DMA_Init+0x28a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b42      	cmp	r3, #66	@ 0x42
 8001b88:	d90f      	bls.n	8001baa <HAL_DMA_Init+0x2aa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b46      	cmp	r3, #70	@ 0x46
 8001b90:	d903      	bls.n	8001b9a <HAL_DMA_Init+0x29a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b48      	cmp	r3, #72	@ 0x48
 8001b98:	d907      	bls.n	8001baa <HAL_DMA_Init+0x2aa>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b4e      	cmp	r3, #78	@ 0x4e
 8001ba0:	d905      	bls.n	8001bae <HAL_DMA_Init+0x2ae>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b52      	cmp	r3, #82	@ 0x52
 8001ba8:	d801      	bhi.n	8001bae <HAL_DMA_Init+0x2ae>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_DMA_Init+0x2b0>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d117      	bne.n	8001c16 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f001 fbff 	bl	80033fc <DMA_CheckFifoParam>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2240      	movs	r2, #64	@ 0x40
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e197      	b.n	8001f46 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f001 fb3a 	bl	8003298 <DMA_CalcBaseAndBitshift>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	223f      	movs	r2, #63	@ 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	e0cd      	b.n	8001dd6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <HAL_DMA_Init+0x42c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d022      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a39      	ldr	r2, [pc, #228]	@ (8001d30 <HAL_DMA_Init+0x430>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01d      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a38      	ldr	r2, [pc, #224]	@ (8001d34 <HAL_DMA_Init+0x434>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d018      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a36      	ldr	r2, [pc, #216]	@ (8001d38 <HAL_DMA_Init+0x438>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a35      	ldr	r2, [pc, #212]	@ (8001d3c <HAL_DMA_Init+0x43c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00e      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a33      	ldr	r2, [pc, #204]	@ (8001d40 <HAL_DMA_Init+0x440>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a32      	ldr	r2, [pc, #200]	@ (8001d44 <HAL_DMA_Init+0x444>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d004      	beq.n	8001c8a <HAL_DMA_Init+0x38a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a30      	ldr	r2, [pc, #192]	@ (8001d48 <HAL_DMA_Init+0x448>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_Init+0x38e>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_Init+0x390>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8097 	beq.w	8001dc4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a24      	ldr	r2, [pc, #144]	@ (8001d2c <HAL_DMA_Init+0x42c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d021      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	@ (8001d30 <HAL_DMA_Init+0x430>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01c      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a21      	ldr	r2, [pc, #132]	@ (8001d34 <HAL_DMA_Init+0x434>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d017      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d38 <HAL_DMA_Init+0x438>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d012      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d3c <HAL_DMA_Init+0x43c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d40 <HAL_DMA_Init+0x440>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d008      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d44 <HAL_DMA_Init+0x444>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <HAL_DMA_Init+0x3e4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_DMA_Init+0x448>)
 8001ce2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_DMA_Init+0x44c>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b40      	cmp	r3, #64	@ 0x40
 8001d0a:	d021      	beq.n	8001d50 <HAL_DMA_Init+0x450>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b80      	cmp	r3, #128	@ 0x80
 8001d12:	d102      	bne.n	8001d1a <HAL_DMA_Init+0x41a>
 8001d14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d18:	e01b      	b.n	8001d52 <HAL_DMA_Init+0x452>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e019      	b.n	8001d52 <HAL_DMA_Init+0x452>
 8001d1e:	bf00      	nop
 8001d20:	fe10803f 	.word	0xfe10803f
 8001d24:	5c001000 	.word	0x5c001000
 8001d28:	ffff0000 	.word	0xffff0000
 8001d2c:	58025408 	.word	0x58025408
 8001d30:	5802541c 	.word	0x5802541c
 8001d34:	58025430 	.word	0x58025430
 8001d38:	58025444 	.word	0x58025444
 8001d3c:	58025458 	.word	0x58025458
 8001d40:	5802546c 	.word	0x5802546c
 8001d44:	58025480 	.word	0x58025480
 8001d48:	58025494 	.word	0x58025494
 8001d4c:	fffe000f 	.word	0xfffe000f
 8001d50:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68d2      	ldr	r2, [r2, #12]
 8001d56:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d80:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b6e      	ldr	r3, [pc, #440]	@ (8001f50 <HAL_DMA_Init+0x650>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f54 <HAL_DMA_Init+0x654>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	009a      	lsls	r2, r3, #2
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f001 fa75 	bl	8003298 <DMA_CalcBaseAndBitshift>
 8001dae:	4603      	mov	r3, r0
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	e008      	b.n	8001dd6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	@ 0x40
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0b7      	b.n	8001f46 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a5f      	ldr	r2, [pc, #380]	@ (8001f58 <HAL_DMA_Init+0x658>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d072      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f5c <HAL_DMA_Init+0x65c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d06d      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a5c      	ldr	r2, [pc, #368]	@ (8001f60 <HAL_DMA_Init+0x660>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d068      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a5a      	ldr	r2, [pc, #360]	@ (8001f64 <HAL_DMA_Init+0x664>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d063      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a59      	ldr	r2, [pc, #356]	@ (8001f68 <HAL_DMA_Init+0x668>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05e      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a57      	ldr	r2, [pc, #348]	@ (8001f6c <HAL_DMA_Init+0x66c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d059      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a56      	ldr	r2, [pc, #344]	@ (8001f70 <HAL_DMA_Init+0x670>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d054      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a54      	ldr	r2, [pc, #336]	@ (8001f74 <HAL_DMA_Init+0x674>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04f      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a53      	ldr	r2, [pc, #332]	@ (8001f78 <HAL_DMA_Init+0x678>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a51      	ldr	r2, [pc, #324]	@ (8001f7c <HAL_DMA_Init+0x67c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a50      	ldr	r2, [pc, #320]	@ (8001f80 <HAL_DMA_Init+0x680>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a4e      	ldr	r2, [pc, #312]	@ (8001f84 <HAL_DMA_Init+0x684>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a4d      	ldr	r2, [pc, #308]	@ (8001f88 <HAL_DMA_Init+0x688>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f8c <HAL_DMA_Init+0x68c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a4a      	ldr	r2, [pc, #296]	@ (8001f90 <HAL_DMA_Init+0x690>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a48      	ldr	r2, [pc, #288]	@ (8001f94 <HAL_DMA_Init+0x694>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a47      	ldr	r2, [pc, #284]	@ (8001f98 <HAL_DMA_Init+0x698>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a45      	ldr	r2, [pc, #276]	@ (8001f9c <HAL_DMA_Init+0x69c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a44      	ldr	r2, [pc, #272]	@ (8001fa0 <HAL_DMA_Init+0x6a0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a42      	ldr	r2, [pc, #264]	@ (8001fa4 <HAL_DMA_Init+0x6a4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a41      	ldr	r2, [pc, #260]	@ (8001fa8 <HAL_DMA_Init+0x6a8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3f      	ldr	r2, [pc, #252]	@ (8001fac <HAL_DMA_Init+0x6ac>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb0 <HAL_DMA_Init+0x6b0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Init+0x5c6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb4 <HAL_DMA_Init+0x6b4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Init+0x5ca>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_Init+0x5cc>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d032      	beq.n	8001f36 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f001 fb0f 	bl	80034f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b80      	cmp	r3, #128	@ 0x80
 8001edc:	d102      	bne.n	8001ee4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ef8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_DMA_Init+0x624>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d80c      	bhi.n	8001f24 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f001 fb8c 	bl	8003628 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e008      	b.n	8001f36 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	a7fdabf8 	.word	0xa7fdabf8
 8001f54:	cccccccd 	.word	0xcccccccd
 8001f58:	40020010 	.word	0x40020010
 8001f5c:	40020028 	.word	0x40020028
 8001f60:	40020040 	.word	0x40020040
 8001f64:	40020058 	.word	0x40020058
 8001f68:	40020070 	.word	0x40020070
 8001f6c:	40020088 	.word	0x40020088
 8001f70:	400200a0 	.word	0x400200a0
 8001f74:	400200b8 	.word	0x400200b8
 8001f78:	40020410 	.word	0x40020410
 8001f7c:	40020428 	.word	0x40020428
 8001f80:	40020440 	.word	0x40020440
 8001f84:	40020458 	.word	0x40020458
 8001f88:	40020470 	.word	0x40020470
 8001f8c:	40020488 	.word	0x40020488
 8001f90:	400204a0 	.word	0x400204a0
 8001f94:	400204b8 	.word	0x400204b8
 8001f98:	58025408 	.word	0x58025408
 8001f9c:	5802541c 	.word	0x5802541c
 8001fa0:	58025430 	.word	0x58025430
 8001fa4:	58025444 	.word	0x58025444
 8001fa8:	58025458 	.word	0x58025458
 8001fac:	5802546c 	.word	0x5802546c
 8001fb0:	58025480 	.word	0x58025480
 8001fb4:	58025494 	.word	0x58025494

08001fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e237      	b.n	800243a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e22c      	b.n	800243a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a5c      	ldr	r2, [pc, #368]	@ (8002158 <HAL_DMA_Abort_IT+0x1a0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d04a      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a5b      	ldr	r2, [pc, #364]	@ (800215c <HAL_DMA_Abort_IT+0x1a4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d045      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a59      	ldr	r2, [pc, #356]	@ (8002160 <HAL_DMA_Abort_IT+0x1a8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d040      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <HAL_DMA_Abort_IT+0x1ac>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d03b      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a56      	ldr	r2, [pc, #344]	@ (8002168 <HAL_DMA_Abort_IT+0x1b0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d036      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a55      	ldr	r2, [pc, #340]	@ (800216c <HAL_DMA_Abort_IT+0x1b4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d031      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a53      	ldr	r2, [pc, #332]	@ (8002170 <HAL_DMA_Abort_IT+0x1b8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02c      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a52      	ldr	r2, [pc, #328]	@ (8002174 <HAL_DMA_Abort_IT+0x1bc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d027      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a50      	ldr	r2, [pc, #320]	@ (8002178 <HAL_DMA_Abort_IT+0x1c0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d022      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a4f      	ldr	r2, [pc, #316]	@ (800217c <HAL_DMA_Abort_IT+0x1c4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d01d      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a4d      	ldr	r2, [pc, #308]	@ (8002180 <HAL_DMA_Abort_IT+0x1c8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d018      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4c      	ldr	r2, [pc, #304]	@ (8002184 <HAL_DMA_Abort_IT+0x1cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a4a      	ldr	r2, [pc, #296]	@ (8002188 <HAL_DMA_Abort_IT+0x1d0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00e      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a49      	ldr	r2, [pc, #292]	@ (800218c <HAL_DMA_Abort_IT+0x1d4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a47      	ldr	r2, [pc, #284]	@ (8002190 <HAL_DMA_Abort_IT+0x1d8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a46      	ldr	r2, [pc, #280]	@ (8002194 <HAL_DMA_Abort_IT+0x1dc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_DMA_Abort_IT+0xcc>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_DMA_Abort_IT+0xce>
 8002084:	2300      	movs	r3, #0
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8086 	beq.w	8002198 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2204      	movs	r2, #4
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2f      	ldr	r2, [pc, #188]	@ (8002158 <HAL_DMA_Abort_IT+0x1a0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04a      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2e      	ldr	r2, [pc, #184]	@ (800215c <HAL_DMA_Abort_IT+0x1a4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d045      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002160 <HAL_DMA_Abort_IT+0x1a8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d040      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002164 <HAL_DMA_Abort_IT+0x1ac>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d03b      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a29      	ldr	r2, [pc, #164]	@ (8002168 <HAL_DMA_Abort_IT+0x1b0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d036      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a28      	ldr	r2, [pc, #160]	@ (800216c <HAL_DMA_Abort_IT+0x1b4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d031      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <HAL_DMA_Abort_IT+0x1b8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02c      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a25      	ldr	r2, [pc, #148]	@ (8002174 <HAL_DMA_Abort_IT+0x1bc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d027      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a23      	ldr	r2, [pc, #140]	@ (8002178 <HAL_DMA_Abort_IT+0x1c0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d022      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a22      	ldr	r2, [pc, #136]	@ (800217c <HAL_DMA_Abort_IT+0x1c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d01d      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a20      	ldr	r2, [pc, #128]	@ (8002180 <HAL_DMA_Abort_IT+0x1c8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d018      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1f      	ldr	r2, [pc, #124]	@ (8002184 <HAL_DMA_Abort_IT+0x1cc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1d      	ldr	r2, [pc, #116]	@ (8002188 <HAL_DMA_Abort_IT+0x1d0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00e      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1c      	ldr	r2, [pc, #112]	@ (800218c <HAL_DMA_Abort_IT+0x1d4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <HAL_DMA_Abort_IT+0x1d8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Abort_IT+0x17c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <HAL_DMA_Abort_IT+0x1dc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <HAL_DMA_Abort_IT+0x18e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e178      	b.n	8002438 <HAL_DMA_Abort_IT+0x480>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e16f      	b.n	8002438 <HAL_DMA_Abort_IT+0x480>
 8002158:	40020010 	.word	0x40020010
 800215c:	40020028 	.word	0x40020028
 8002160:	40020040 	.word	0x40020040
 8002164:	40020058 	.word	0x40020058
 8002168:	40020070 	.word	0x40020070
 800216c:	40020088 	.word	0x40020088
 8002170:	400200a0 	.word	0x400200a0
 8002174:	400200b8 	.word	0x400200b8
 8002178:	40020410 	.word	0x40020410
 800217c:	40020428 	.word	0x40020428
 8002180:	40020440 	.word	0x40020440
 8002184:	40020458 	.word	0x40020458
 8002188:	40020470 	.word	0x40020470
 800218c:	40020488 	.word	0x40020488
 8002190:	400204a0 	.word	0x400204a0
 8002194:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 020e 	bic.w	r2, r2, #14
 80021a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6c      	ldr	r2, [pc, #432]	@ (8002360 <HAL_DMA_Abort_IT+0x3a8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d04a      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002364 <HAL_DMA_Abort_IT+0x3ac>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d045      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a69      	ldr	r2, [pc, #420]	@ (8002368 <HAL_DMA_Abort_IT+0x3b0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d040      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a68      	ldr	r2, [pc, #416]	@ (800236c <HAL_DMA_Abort_IT+0x3b4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d03b      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a66      	ldr	r2, [pc, #408]	@ (8002370 <HAL_DMA_Abort_IT+0x3b8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d036      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a65      	ldr	r2, [pc, #404]	@ (8002374 <HAL_DMA_Abort_IT+0x3bc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d031      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a63      	ldr	r2, [pc, #396]	@ (8002378 <HAL_DMA_Abort_IT+0x3c0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d02c      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a62      	ldr	r2, [pc, #392]	@ (800237c <HAL_DMA_Abort_IT+0x3c4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d027      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a60      	ldr	r2, [pc, #384]	@ (8002380 <HAL_DMA_Abort_IT+0x3c8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d022      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5f      	ldr	r2, [pc, #380]	@ (8002384 <HAL_DMA_Abort_IT+0x3cc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d01d      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a5d      	ldr	r2, [pc, #372]	@ (8002388 <HAL_DMA_Abort_IT+0x3d0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d018      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5c      	ldr	r2, [pc, #368]	@ (800238c <HAL_DMA_Abort_IT+0x3d4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a5a      	ldr	r2, [pc, #360]	@ (8002390 <HAL_DMA_Abort_IT+0x3d8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00e      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a59      	ldr	r2, [pc, #356]	@ (8002394 <HAL_DMA_Abort_IT+0x3dc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a57      	ldr	r2, [pc, #348]	@ (8002398 <HAL_DMA_Abort_IT+0x3e0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_DMA_Abort_IT+0x290>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a56      	ldr	r2, [pc, #344]	@ (800239c <HAL_DMA_Abort_IT+0x3e4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <HAL_DMA_Abort_IT+0x2a2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e007      	b.n	800226a <HAL_DMA_Abort_IT+0x2b2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a3c      	ldr	r2, [pc, #240]	@ (8002360 <HAL_DMA_Abort_IT+0x3a8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d072      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3a      	ldr	r2, [pc, #232]	@ (8002364 <HAL_DMA_Abort_IT+0x3ac>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d06d      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a39      	ldr	r2, [pc, #228]	@ (8002368 <HAL_DMA_Abort_IT+0x3b0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d068      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a37      	ldr	r2, [pc, #220]	@ (800236c <HAL_DMA_Abort_IT+0x3b4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d063      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a36      	ldr	r2, [pc, #216]	@ (8002370 <HAL_DMA_Abort_IT+0x3b8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d05e      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a34      	ldr	r2, [pc, #208]	@ (8002374 <HAL_DMA_Abort_IT+0x3bc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d059      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a33      	ldr	r2, [pc, #204]	@ (8002378 <HAL_DMA_Abort_IT+0x3c0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d054      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a31      	ldr	r2, [pc, #196]	@ (800237c <HAL_DMA_Abort_IT+0x3c4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d04f      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a30      	ldr	r2, [pc, #192]	@ (8002380 <HAL_DMA_Abort_IT+0x3c8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d04a      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002384 <HAL_DMA_Abort_IT+0x3cc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d045      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002388 <HAL_DMA_Abort_IT+0x3d0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d040      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	@ (800238c <HAL_DMA_Abort_IT+0x3d4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d03b      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002390 <HAL_DMA_Abort_IT+0x3d8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d036      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a28      	ldr	r2, [pc, #160]	@ (8002394 <HAL_DMA_Abort_IT+0x3dc>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d031      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a27      	ldr	r2, [pc, #156]	@ (8002398 <HAL_DMA_Abort_IT+0x3e0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d02c      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a25      	ldr	r2, [pc, #148]	@ (800239c <HAL_DMA_Abort_IT+0x3e4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d027      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a24      	ldr	r2, [pc, #144]	@ (80023a0 <HAL_DMA_Abort_IT+0x3e8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a22      	ldr	r2, [pc, #136]	@ (80023a4 <HAL_DMA_Abort_IT+0x3ec>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01d      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <HAL_DMA_Abort_IT+0x3f0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d018      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_DMA_Abort_IT+0x3f4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <HAL_DMA_Abort_IT+0x3f8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00e      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_DMA_Abort_IT+0x3fc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d009      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <HAL_DMA_Abort_IT+0x400>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_DMA_Abort_IT+0x3a2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_DMA_Abort_IT+0x404>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d132      	bne.n	80023c0 <HAL_DMA_Abort_IT+0x408>
 800235a:	2301      	movs	r3, #1
 800235c:	e031      	b.n	80023c2 <HAL_DMA_Abort_IT+0x40a>
 800235e:	bf00      	nop
 8002360:	40020010 	.word	0x40020010
 8002364:	40020028 	.word	0x40020028
 8002368:	40020040 	.word	0x40020040
 800236c:	40020058 	.word	0x40020058
 8002370:	40020070 	.word	0x40020070
 8002374:	40020088 	.word	0x40020088
 8002378:	400200a0 	.word	0x400200a0
 800237c:	400200b8 	.word	0x400200b8
 8002380:	40020410 	.word	0x40020410
 8002384:	40020428 	.word	0x40020428
 8002388:	40020440 	.word	0x40020440
 800238c:	40020458 	.word	0x40020458
 8002390:	40020470 	.word	0x40020470
 8002394:	40020488 	.word	0x40020488
 8002398:	400204a0 	.word	0x400204a0
 800239c:	400204b8 	.word	0x400204b8
 80023a0:	58025408 	.word	0x58025408
 80023a4:	5802541c 	.word	0x5802541c
 80023a8:	58025430 	.word	0x58025430
 80023ac:	58025444 	.word	0x58025444
 80023b0:	58025458 	.word	0x58025458
 80023b4:	5802546c 	.word	0x5802546c
 80023b8:	58025480 	.word	0x58025480
 80023bc:	58025494 	.word	0x58025494
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2201      	movs	r2, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800240c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002416:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop

08002444 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002450:	4b67      	ldr	r3, [pc, #412]	@ (80025f0 <HAL_DMA_IRQHandler+0x1ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a67      	ldr	r2, [pc, #412]	@ (80025f4 <HAL_DMA_IRQHandler+0x1b0>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	0a9b      	lsrs	r3, r3, #10
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5f      	ldr	r2, [pc, #380]	@ (80025f8 <HAL_DMA_IRQHandler+0x1b4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d04a      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a5d      	ldr	r2, [pc, #372]	@ (80025fc <HAL_DMA_IRQHandler+0x1b8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d045      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5c      	ldr	r2, [pc, #368]	@ (8002600 <HAL_DMA_IRQHandler+0x1bc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d040      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5a      	ldr	r2, [pc, #360]	@ (8002604 <HAL_DMA_IRQHandler+0x1c0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d03b      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a59      	ldr	r2, [pc, #356]	@ (8002608 <HAL_DMA_IRQHandler+0x1c4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d036      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a57      	ldr	r2, [pc, #348]	@ (800260c <HAL_DMA_IRQHandler+0x1c8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d031      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a56      	ldr	r2, [pc, #344]	@ (8002610 <HAL_DMA_IRQHandler+0x1cc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d02c      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a54      	ldr	r2, [pc, #336]	@ (8002614 <HAL_DMA_IRQHandler+0x1d0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d027      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a53      	ldr	r2, [pc, #332]	@ (8002618 <HAL_DMA_IRQHandler+0x1d4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d022      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a51      	ldr	r2, [pc, #324]	@ (800261c <HAL_DMA_IRQHandler+0x1d8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01d      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a50      	ldr	r2, [pc, #320]	@ (8002620 <HAL_DMA_IRQHandler+0x1dc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d018      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002624 <HAL_DMA_IRQHandler+0x1e0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4d      	ldr	r2, [pc, #308]	@ (8002628 <HAL_DMA_IRQHandler+0x1e4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00e      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4b      	ldr	r2, [pc, #300]	@ (800262c <HAL_DMA_IRQHandler+0x1e8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a4a      	ldr	r2, [pc, #296]	@ (8002630 <HAL_DMA_IRQHandler+0x1ec>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_DMA_IRQHandler+0xd2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a48      	ldr	r2, [pc, #288]	@ (8002634 <HAL_DMA_IRQHandler+0x1f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_DMA_IRQHandler+0xd6>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_DMA_IRQHandler+0xd8>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 842b 	beq.w	8002d78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2208      	movs	r2, #8
 800252c:	409a      	lsls	r2, r3
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80a2 	beq.w	800267c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a2e      	ldr	r2, [pc, #184]	@ (80025f8 <HAL_DMA_IRQHandler+0x1b4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d04a      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2d      	ldr	r2, [pc, #180]	@ (80025fc <HAL_DMA_IRQHandler+0x1b8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d045      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2b      	ldr	r2, [pc, #172]	@ (8002600 <HAL_DMA_IRQHandler+0x1bc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d040      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2a      	ldr	r2, [pc, #168]	@ (8002604 <HAL_DMA_IRQHandler+0x1c0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d03b      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a28      	ldr	r2, [pc, #160]	@ (8002608 <HAL_DMA_IRQHandler+0x1c4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d036      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a27      	ldr	r2, [pc, #156]	@ (800260c <HAL_DMA_IRQHandler+0x1c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d031      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a25      	ldr	r2, [pc, #148]	@ (8002610 <HAL_DMA_IRQHandler+0x1cc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d02c      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a24      	ldr	r2, [pc, #144]	@ (8002614 <HAL_DMA_IRQHandler+0x1d0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d027      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <HAL_DMA_IRQHandler+0x1d4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d022      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a21      	ldr	r2, [pc, #132]	@ (800261c <HAL_DMA_IRQHandler+0x1d8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d01d      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <HAL_DMA_IRQHandler+0x1dc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d018      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <HAL_DMA_IRQHandler+0x1e0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002628 <HAL_DMA_IRQHandler+0x1e4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00e      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1b      	ldr	r2, [pc, #108]	@ (800262c <HAL_DMA_IRQHandler+0x1e8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d009      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a19      	ldr	r2, [pc, #100]	@ (8002630 <HAL_DMA_IRQHandler+0x1ec>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x194>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <HAL_DMA_IRQHandler+0x1f0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d12f      	bne.n	8002638 <HAL_DMA_IRQHandler+0x1f4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	e02e      	b.n	800264c <HAL_DMA_IRQHandler+0x208>
 80025ee:	bf00      	nop
 80025f0:	24000000 	.word	0x24000000
 80025f4:	1b4e81b5 	.word	0x1b4e81b5
 80025f8:	40020010 	.word	0x40020010
 80025fc:	40020028 	.word	0x40020028
 8002600:	40020040 	.word	0x40020040
 8002604:	40020058 	.word	0x40020058
 8002608:	40020070 	.word	0x40020070
 800260c:	40020088 	.word	0x40020088
 8002610:	400200a0 	.word	0x400200a0
 8002614:	400200b8 	.word	0x400200b8
 8002618:	40020410 	.word	0x40020410
 800261c:	40020428 	.word	0x40020428
 8002620:	40020440 	.word	0x40020440
 8002624:	40020458 	.word	0x40020458
 8002628:	40020470 	.word	0x40020470
 800262c:	40020488 	.word	0x40020488
 8002630:	400204a0 	.word	0x400204a0
 8002634:	400204b8 	.word	0x400204b8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2208      	movs	r2, #8
 800266a:	409a      	lsls	r2, r3
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06e      	beq.n	8002770 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a69      	ldr	r2, [pc, #420]	@ (800283c <HAL_DMA_IRQHandler+0x3f8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d04a      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a67      	ldr	r2, [pc, #412]	@ (8002840 <HAL_DMA_IRQHandler+0x3fc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d045      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a66      	ldr	r2, [pc, #408]	@ (8002844 <HAL_DMA_IRQHandler+0x400>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d040      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a64      	ldr	r2, [pc, #400]	@ (8002848 <HAL_DMA_IRQHandler+0x404>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d03b      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a63      	ldr	r2, [pc, #396]	@ (800284c <HAL_DMA_IRQHandler+0x408>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d036      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a61      	ldr	r2, [pc, #388]	@ (8002850 <HAL_DMA_IRQHandler+0x40c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a60      	ldr	r2, [pc, #384]	@ (8002854 <HAL_DMA_IRQHandler+0x410>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d02c      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002858 <HAL_DMA_IRQHandler+0x414>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d027      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a5d      	ldr	r2, [pc, #372]	@ (800285c <HAL_DMA_IRQHandler+0x418>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <HAL_DMA_IRQHandler+0x41c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002864 <HAL_DMA_IRQHandler+0x420>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a58      	ldr	r2, [pc, #352]	@ (8002868 <HAL_DMA_IRQHandler+0x424>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a57      	ldr	r2, [pc, #348]	@ (800286c <HAL_DMA_IRQHandler+0x428>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a55      	ldr	r2, [pc, #340]	@ (8002870 <HAL_DMA_IRQHandler+0x42c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a54      	ldr	r2, [pc, #336]	@ (8002874 <HAL_DMA_IRQHandler+0x430>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_DMA_IRQHandler+0x2ee>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_DMA_IRQHandler+0x434>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d10a      	bne.n	8002748 <HAL_DMA_IRQHandler+0x304>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e003      	b.n	8002750 <HAL_DMA_IRQHandler+0x30c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2204      	movs	r2, #4
 800277a:	409a      	lsls	r2, r3
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 808f 	beq.w	80028a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2c      	ldr	r2, [pc, #176]	@ (800283c <HAL_DMA_IRQHandler+0x3f8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2a      	ldr	r2, [pc, #168]	@ (8002840 <HAL_DMA_IRQHandler+0x3fc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a29      	ldr	r2, [pc, #164]	@ (8002844 <HAL_DMA_IRQHandler+0x400>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a27      	ldr	r2, [pc, #156]	@ (8002848 <HAL_DMA_IRQHandler+0x404>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a26      	ldr	r2, [pc, #152]	@ (800284c <HAL_DMA_IRQHandler+0x408>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a24      	ldr	r2, [pc, #144]	@ (8002850 <HAL_DMA_IRQHandler+0x40c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <HAL_DMA_IRQHandler+0x410>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <HAL_DMA_IRQHandler+0x414>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a20      	ldr	r2, [pc, #128]	@ (800285c <HAL_DMA_IRQHandler+0x418>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002860 <HAL_DMA_IRQHandler+0x41c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <HAL_DMA_IRQHandler+0x420>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002868 <HAL_DMA_IRQHandler+0x424>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1a      	ldr	r2, [pc, #104]	@ (800286c <HAL_DMA_IRQHandler+0x428>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a18      	ldr	r2, [pc, #96]	@ (8002870 <HAL_DMA_IRQHandler+0x42c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_DMA_IRQHandler+0x430>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_IRQHandler+0x3e2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a15      	ldr	r2, [pc, #84]	@ (8002878 <HAL_DMA_IRQHandler+0x434>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d12a      	bne.n	800287c <HAL_DMA_IRQHandler+0x438>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e023      	b.n	8002884 <HAL_DMA_IRQHandler+0x440>
 800283c:	40020010 	.word	0x40020010
 8002840:	40020028 	.word	0x40020028
 8002844:	40020040 	.word	0x40020040
 8002848:	40020058 	.word	0x40020058
 800284c:	40020070 	.word	0x40020070
 8002850:	40020088 	.word	0x40020088
 8002854:	400200a0 	.word	0x400200a0
 8002858:	400200b8 	.word	0x400200b8
 800285c:	40020410 	.word	0x40020410
 8002860:	40020428 	.word	0x40020428
 8002864:	40020440 	.word	0x40020440
 8002868:	40020458 	.word	0x40020458
 800286c:	40020470 	.word	0x40020470
 8002870:	40020488 	.word	0x40020488
 8002874:	400204a0 	.word	0x400204a0
 8002878:	400204b8 	.word	0x400204b8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2204      	movs	r2, #4
 8002892:	409a      	lsls	r2, r3
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	f043 0204 	orr.w	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2210      	movs	r2, #16
 80028ae:	409a      	lsls	r2, r3
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a6 	beq.w	8002a06 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a85      	ldr	r2, [pc, #532]	@ (8002ad4 <HAL_DMA_IRQHandler+0x690>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d04a      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a83      	ldr	r2, [pc, #524]	@ (8002ad8 <HAL_DMA_IRQHandler+0x694>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d045      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a82      	ldr	r2, [pc, #520]	@ (8002adc <HAL_DMA_IRQHandler+0x698>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d040      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a80      	ldr	r2, [pc, #512]	@ (8002ae0 <HAL_DMA_IRQHandler+0x69c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d03b      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7f      	ldr	r2, [pc, #508]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6a0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d036      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7c      	ldr	r2, [pc, #496]	@ (8002aec <HAL_DMA_IRQHandler+0x6a8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d02c      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a7a      	ldr	r2, [pc, #488]	@ (8002af0 <HAL_DMA_IRQHandler+0x6ac>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d027      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a79      	ldr	r2, [pc, #484]	@ (8002af4 <HAL_DMA_IRQHandler+0x6b0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d022      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a77      	ldr	r2, [pc, #476]	@ (8002af8 <HAL_DMA_IRQHandler+0x6b4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01d      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a76      	ldr	r2, [pc, #472]	@ (8002afc <HAL_DMA_IRQHandler+0x6b8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a74      	ldr	r2, [pc, #464]	@ (8002b00 <HAL_DMA_IRQHandler+0x6bc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a73      	ldr	r2, [pc, #460]	@ (8002b04 <HAL_DMA_IRQHandler+0x6c0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a71      	ldr	r2, [pc, #452]	@ (8002b08 <HAL_DMA_IRQHandler+0x6c4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a70      	ldr	r2, [pc, #448]	@ (8002b0c <HAL_DMA_IRQHandler+0x6c8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_DMA_IRQHandler+0x516>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6e      	ldr	r2, [pc, #440]	@ (8002b10 <HAL_DMA_IRQHandler+0x6cc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10a      	bne.n	8002970 <HAL_DMA_IRQHandler+0x52c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	e009      	b.n	8002984 <HAL_DMA_IRQHandler+0x540>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	bf14      	ite	ne
 800297e:	2301      	movne	r3, #1
 8002980:	2300      	moveq	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d03e      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2210      	movs	r2, #16
 8002992:	409a      	lsls	r2, r3
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d018      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d024      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4798      	blx	r3
 80029c4:	e01f      	b.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01b      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e016      	b.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2220      	movs	r2, #32
 8002a10:	409a      	lsls	r2, r3
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8110 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad4 <HAL_DMA_IRQHandler+0x690>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04a      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad8 <HAL_DMA_IRQHandler+0x694>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d045      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a29      	ldr	r2, [pc, #164]	@ (8002adc <HAL_DMA_IRQHandler+0x698>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d040      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a28      	ldr	r2, [pc, #160]	@ (8002ae0 <HAL_DMA_IRQHandler+0x69c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d03b      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a26      	ldr	r2, [pc, #152]	@ (8002ae4 <HAL_DMA_IRQHandler+0x6a0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d036      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a25      	ldr	r2, [pc, #148]	@ (8002ae8 <HAL_DMA_IRQHandler+0x6a4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d031      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_DMA_IRQHandler+0x6a8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02c      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a22      	ldr	r2, [pc, #136]	@ (8002af0 <HAL_DMA_IRQHandler+0x6ac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d027      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a20      	ldr	r2, [pc, #128]	@ (8002af4 <HAL_DMA_IRQHandler+0x6b0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d022      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002af8 <HAL_DMA_IRQHandler+0x6b4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d01d      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <HAL_DMA_IRQHandler+0x6b8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d018      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002b00 <HAL_DMA_IRQHandler+0x6bc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1a      	ldr	r2, [pc, #104]	@ (8002b04 <HAL_DMA_IRQHandler+0x6c0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a19      	ldr	r2, [pc, #100]	@ (8002b08 <HAL_DMA_IRQHandler+0x6c4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a17      	ldr	r2, [pc, #92]	@ (8002b0c <HAL_DMA_IRQHandler+0x6c8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_DMA_IRQHandler+0x678>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	@ (8002b10 <HAL_DMA_IRQHandler+0x6cc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d12b      	bne.n	8002b14 <HAL_DMA_IRQHandler+0x6d0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e02a      	b.n	8002b28 <HAL_DMA_IRQHandler+0x6e4>
 8002ad2:	bf00      	nop
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	40020028 	.word	0x40020028
 8002adc:	40020040 	.word	0x40020040
 8002ae0:	40020058 	.word	0x40020058
 8002ae4:	40020070 	.word	0x40020070
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	400200a0 	.word	0x400200a0
 8002af0:	400200b8 	.word	0x400200b8
 8002af4:	40020410 	.word	0x40020410
 8002af8:	40020428 	.word	0x40020428
 8002afc:	40020440 	.word	0x40020440
 8002b00:	40020458 	.word	0x40020458
 8002b04:	40020470 	.word	0x40020470
 8002b08:	40020488 	.word	0x40020488
 8002b0c:	400204a0 	.word	0x400204a0
 8002b10:	400204b8 	.word	0x400204b8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8087 	beq.w	8002c3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2220      	movs	r2, #32
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d139      	bne.n	8002bbe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x736>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	223f      	movs	r2, #63	@ 0x3f
 8002b94:	409a      	lsls	r2, r3
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 834a 	beq.w	8003248 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
          }
          return;
 8002bbc:	e344      	b.n	8003248 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d018      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d108      	bne.n	8002bec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d02c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e027      	b.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
 8002bfc:	e01e      	b.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0210 	bic.w	r2, r2, #16
 8002c1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8306 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8088 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2204      	movs	r2, #4
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7a      	ldr	r2, [pc, #488]	@ (8002e4c <HAL_DMA_IRQHandler+0xa08>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d04a      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a79      	ldr	r2, [pc, #484]	@ (8002e50 <HAL_DMA_IRQHandler+0xa0c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d045      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a77      	ldr	r2, [pc, #476]	@ (8002e54 <HAL_DMA_IRQHandler+0xa10>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d040      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a76      	ldr	r2, [pc, #472]	@ (8002e58 <HAL_DMA_IRQHandler+0xa14>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d03b      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a74      	ldr	r2, [pc, #464]	@ (8002e5c <HAL_DMA_IRQHandler+0xa18>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d036      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a73      	ldr	r2, [pc, #460]	@ (8002e60 <HAL_DMA_IRQHandler+0xa1c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d031      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a71      	ldr	r2, [pc, #452]	@ (8002e64 <HAL_DMA_IRQHandler+0xa20>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02c      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a70      	ldr	r2, [pc, #448]	@ (8002e68 <HAL_DMA_IRQHandler+0xa24>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d027      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e6c <HAL_DMA_IRQHandler+0xa28>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d022      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6d      	ldr	r2, [pc, #436]	@ (8002e70 <HAL_DMA_IRQHandler+0xa2c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d01d      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e74 <HAL_DMA_IRQHandler+0xa30>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d018      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6a      	ldr	r2, [pc, #424]	@ (8002e78 <HAL_DMA_IRQHandler+0xa34>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a68      	ldr	r2, [pc, #416]	@ (8002e7c <HAL_DMA_IRQHandler+0xa38>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a67      	ldr	r2, [pc, #412]	@ (8002e80 <HAL_DMA_IRQHandler+0xa3c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a65      	ldr	r2, [pc, #404]	@ (8002e84 <HAL_DMA_IRQHandler+0xa40>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x8b8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a64      	ldr	r2, [pc, #400]	@ (8002e88 <HAL_DMA_IRQHandler+0xa44>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <HAL_DMA_IRQHandler+0x8ca>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <HAL_DMA_IRQHandler+0x8da>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d307      	bcc.n	8002d3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x8da>
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002d3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8002d52:	e003      	b.n	8002d5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8272 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e26c      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a43      	ldr	r2, [pc, #268]	@ (8002e8c <HAL_DMA_IRQHandler+0xa48>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a42      	ldr	r2, [pc, #264]	@ (8002e90 <HAL_DMA_IRQHandler+0xa4c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a40      	ldr	r2, [pc, #256]	@ (8002e94 <HAL_DMA_IRQHandler+0xa50>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e98 <HAL_DMA_IRQHandler+0xa54>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3d      	ldr	r2, [pc, #244]	@ (8002e9c <HAL_DMA_IRQHandler+0xa58>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea0 <HAL_DMA_IRQHandler+0xa5c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea4 <HAL_DMA_IRQHandler+0xa60>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x984>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a39      	ldr	r2, [pc, #228]	@ (8002ea8 <HAL_DMA_IRQHandler+0xa64>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x988>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_DMA_IRQHandler+0x98a>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 823f 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2204      	movs	r2, #4
 8002de6:	409a      	lsls	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80cd 	beq.w	8002f8c <HAL_DMA_IRQHandler+0xb48>
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80c7 	beq.w	8002f8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2204      	movs	r2, #4
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d049      	beq.n	8002eac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8210 	beq.w	800324c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e34:	e20a      	b.n	800324c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8206 	beq.w	800324c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e48:	e200      	b.n	800324c <HAL_DMA_IRQHandler+0xe08>
 8002e4a:	bf00      	nop
 8002e4c:	40020010 	.word	0x40020010
 8002e50:	40020028 	.word	0x40020028
 8002e54:	40020040 	.word	0x40020040
 8002e58:	40020058 	.word	0x40020058
 8002e5c:	40020070 	.word	0x40020070
 8002e60:	40020088 	.word	0x40020088
 8002e64:	400200a0 	.word	0x400200a0
 8002e68:	400200b8 	.word	0x400200b8
 8002e6c:	40020410 	.word	0x40020410
 8002e70:	40020428 	.word	0x40020428
 8002e74:	40020440 	.word	0x40020440
 8002e78:	40020458 	.word	0x40020458
 8002e7c:	40020470 	.word	0x40020470
 8002e80:	40020488 	.word	0x40020488
 8002e84:	400204a0 	.word	0x400204a0
 8002e88:	400204b8 	.word	0x400204b8
 8002e8c:	58025408 	.word	0x58025408
 8002e90:	5802541c 	.word	0x5802541c
 8002e94:	58025430 	.word	0x58025430
 8002e98:	58025444 	.word	0x58025444
 8002e9c:	58025458 	.word	0x58025458
 8002ea0:	5802546c 	.word	0x5802546c
 8002ea4:	58025480 	.word	0x58025480
 8002ea8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d160      	bne.n	8002f78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7f      	ldr	r2, [pc, #508]	@ (80030b8 <HAL_DMA_IRQHandler+0xc74>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7d      	ldr	r2, [pc, #500]	@ (80030bc <HAL_DMA_IRQHandler+0xc78>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7c      	ldr	r2, [pc, #496]	@ (80030c0 <HAL_DMA_IRQHandler+0xc7c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7a      	ldr	r2, [pc, #488]	@ (80030c4 <HAL_DMA_IRQHandler+0xc80>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a79      	ldr	r2, [pc, #484]	@ (80030c8 <HAL_DMA_IRQHandler+0xc84>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a77      	ldr	r2, [pc, #476]	@ (80030cc <HAL_DMA_IRQHandler+0xc88>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a76      	ldr	r2, [pc, #472]	@ (80030d0 <HAL_DMA_IRQHandler+0xc8c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a74      	ldr	r2, [pc, #464]	@ (80030d4 <HAL_DMA_IRQHandler+0xc90>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a73      	ldr	r2, [pc, #460]	@ (80030d8 <HAL_DMA_IRQHandler+0xc94>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a71      	ldr	r2, [pc, #452]	@ (80030dc <HAL_DMA_IRQHandler+0xc98>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a70      	ldr	r2, [pc, #448]	@ (80030e0 <HAL_DMA_IRQHandler+0xc9c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	@ (80030e4 <HAL_DMA_IRQHandler+0xca0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6d      	ldr	r2, [pc, #436]	@ (80030e8 <HAL_DMA_IRQHandler+0xca4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6b      	ldr	r2, [pc, #428]	@ (80030ec <HAL_DMA_IRQHandler+0xca8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6a      	ldr	r2, [pc, #424]	@ (80030f0 <HAL_DMA_IRQHandler+0xcac>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xb12>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a68      	ldr	r2, [pc, #416]	@ (80030f4 <HAL_DMA_IRQHandler+0xcb0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <HAL_DMA_IRQHandler+0xb24>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0208 	bic.w	r2, r2, #8
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e007      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb34>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8165 	beq.w	800324c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f8a:	e15f      	b.n	800324c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2202      	movs	r2, #2
 8002f96:	409a      	lsls	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80c5 	beq.w	800312c <HAL_DMA_IRQHandler+0xce8>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80bf 	beq.w	800312c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 813a 	beq.w	8003250 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fe4:	e134      	b.n	8003250 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8130 	beq.w	8003250 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ff8:	e12a      	b.n	8003250 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 8089 	bne.w	8003118 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <HAL_DMA_IRQHandler+0xc74>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04a      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a29      	ldr	r2, [pc, #164]	@ (80030bc <HAL_DMA_IRQHandler+0xc78>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d045      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a28      	ldr	r2, [pc, #160]	@ (80030c0 <HAL_DMA_IRQHandler+0xc7c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a26      	ldr	r2, [pc, #152]	@ (80030c4 <HAL_DMA_IRQHandler+0xc80>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d03b      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a25      	ldr	r2, [pc, #148]	@ (80030c8 <HAL_DMA_IRQHandler+0xc84>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d036      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a23      	ldr	r2, [pc, #140]	@ (80030cc <HAL_DMA_IRQHandler+0xc88>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a22      	ldr	r2, [pc, #136]	@ (80030d0 <HAL_DMA_IRQHandler+0xc8c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d02c      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a20      	ldr	r2, [pc, #128]	@ (80030d4 <HAL_DMA_IRQHandler+0xc90>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1f      	ldr	r2, [pc, #124]	@ (80030d8 <HAL_DMA_IRQHandler+0xc94>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_DMA_IRQHandler+0xc98>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <HAL_DMA_IRQHandler+0xc9c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	@ (80030e4 <HAL_DMA_IRQHandler+0xca0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a19      	ldr	r2, [pc, #100]	@ (80030e8 <HAL_DMA_IRQHandler+0xca4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a17      	ldr	r2, [pc, #92]	@ (80030ec <HAL_DMA_IRQHandler+0xca8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a16      	ldr	r2, [pc, #88]	@ (80030f0 <HAL_DMA_IRQHandler+0xcac>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xc62>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <HAL_DMA_IRQHandler+0xcb0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d128      	bne.n	80030f8 <HAL_DMA_IRQHandler+0xcb4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0214 	bic.w	r2, r2, #20
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e027      	b.n	8003108 <HAL_DMA_IRQHandler+0xcc4>
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 020a 	bic.w	r2, r2, #10
 8003106:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8097 	beq.w	8003250 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800312a:	e091      	b.n	8003250 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2208      	movs	r2, #8
 8003136:	409a      	lsls	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8088 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8082 	beq.w	8003252 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a41      	ldr	r2, [pc, #260]	@ (8003258 <HAL_DMA_IRQHandler+0xe14>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3f      	ldr	r2, [pc, #252]	@ (800325c <HAL_DMA_IRQHandler+0xe18>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3e      	ldr	r2, [pc, #248]	@ (8003260 <HAL_DMA_IRQHandler+0xe1c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3c      	ldr	r2, [pc, #240]	@ (8003264 <HAL_DMA_IRQHandler+0xe20>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a3b      	ldr	r2, [pc, #236]	@ (8003268 <HAL_DMA_IRQHandler+0xe24>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a39      	ldr	r2, [pc, #228]	@ (800326c <HAL_DMA_IRQHandler+0xe28>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a38      	ldr	r2, [pc, #224]	@ (8003270 <HAL_DMA_IRQHandler+0xe2c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a36      	ldr	r2, [pc, #216]	@ (8003274 <HAL_DMA_IRQHandler+0xe30>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a35      	ldr	r2, [pc, #212]	@ (8003278 <HAL_DMA_IRQHandler+0xe34>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a33      	ldr	r2, [pc, #204]	@ (800327c <HAL_DMA_IRQHandler+0xe38>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <HAL_DMA_IRQHandler+0xe3c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a30      	ldr	r2, [pc, #192]	@ (8003284 <HAL_DMA_IRQHandler+0xe40>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003288 <HAL_DMA_IRQHandler+0xe44>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2d      	ldr	r2, [pc, #180]	@ (800328c <HAL_DMA_IRQHandler+0xe48>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <HAL_DMA_IRQHandler+0xe4c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0xdaa>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003294 <HAL_DMA_IRQHandler+0xe50>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <HAL_DMA_IRQHandler+0xdbc>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 021c 	bic.w	r2, r2, #28
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e007      	b.n	8003210 <HAL_DMA_IRQHandler+0xdcc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 020e 	bic.w	r2, r2, #14
 800320e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2201      	movs	r2, #1
 800321a:	409a      	lsls	r2, r3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
 8003246:	e004      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003250:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003252:	3728      	adds	r7, #40	@ 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40020010 	.word	0x40020010
 800325c:	40020028 	.word	0x40020028
 8003260:	40020040 	.word	0x40020040
 8003264:	40020058 	.word	0x40020058
 8003268:	40020070 	.word	0x40020070
 800326c:	40020088 	.word	0x40020088
 8003270:	400200a0 	.word	0x400200a0
 8003274:	400200b8 	.word	0x400200b8
 8003278:	40020410 	.word	0x40020410
 800327c:	40020428 	.word	0x40020428
 8003280:	40020440 	.word	0x40020440
 8003284:	40020458 	.word	0x40020458
 8003288:	40020470 	.word	0x40020470
 800328c:	40020488 	.word	0x40020488
 8003290:	400204a0 	.word	0x400204a0
 8003294:	400204b8 	.word	0x400204b8

08003298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a42      	ldr	r2, [pc, #264]	@ (80033b0 <DMA_CalcBaseAndBitshift+0x118>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d04a      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a41      	ldr	r2, [pc, #260]	@ (80033b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d045      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a3f      	ldr	r2, [pc, #252]	@ (80033b8 <DMA_CalcBaseAndBitshift+0x120>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d040      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3e      	ldr	r2, [pc, #248]	@ (80033bc <DMA_CalcBaseAndBitshift+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d03b      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3c      	ldr	r2, [pc, #240]	@ (80033c0 <DMA_CalcBaseAndBitshift+0x128>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d036      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3b      	ldr	r2, [pc, #236]	@ (80033c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d031      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a39      	ldr	r2, [pc, #228]	@ (80033c8 <DMA_CalcBaseAndBitshift+0x130>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d02c      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a38      	ldr	r2, [pc, #224]	@ (80033cc <DMA_CalcBaseAndBitshift+0x134>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d027      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a36      	ldr	r2, [pc, #216]	@ (80033d0 <DMA_CalcBaseAndBitshift+0x138>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a35      	ldr	r2, [pc, #212]	@ (80033d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01d      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a33      	ldr	r2, [pc, #204]	@ (80033d8 <DMA_CalcBaseAndBitshift+0x140>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d018      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a32      	ldr	r2, [pc, #200]	@ (80033dc <DMA_CalcBaseAndBitshift+0x144>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a30      	ldr	r2, [pc, #192]	@ (80033e0 <DMA_CalcBaseAndBitshift+0x148>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2f      	ldr	r2, [pc, #188]	@ (80033e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d009      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2d      	ldr	r2, [pc, #180]	@ (80033e8 <DMA_CalcBaseAndBitshift+0x150>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <DMA_CalcBaseAndBitshift+0xa8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2c      	ldr	r2, [pc, #176]	@ (80033ec <DMA_CalcBaseAndBitshift+0x154>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <DMA_CalcBaseAndBitshift+0xac>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <DMA_CalcBaseAndBitshift+0xae>
 8003344:	2300      	movs	r3, #0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d024      	beq.n	8003394 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3b10      	subs	r3, #16
 8003352:	4a27      	ldr	r2, [pc, #156]	@ (80033f0 <DMA_CalcBaseAndBitshift+0x158>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	4a24      	ldr	r2, [pc, #144]	@ (80033f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	461a      	mov	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d908      	bls.n	8003384 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4b1f      	ldr	r3, [pc, #124]	@ (80033f8 <DMA_CalcBaseAndBitshift+0x160>)
 800337a:	4013      	ands	r3, r2
 800337c:	1d1a      	adds	r2, r3, #4
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	@ 0x58
 8003382:	e00d      	b.n	80033a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <DMA_CalcBaseAndBitshift+0x160>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6593      	str	r3, [r2, #88]	@ 0x58
 8003392:	e005      	b.n	80033a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	aaaaaaab 	.word	0xaaaaaaab
 80033f4:	08009cbc 	.word	0x08009cbc
 80033f8:	fffffc00 	.word	0xfffffc00

080033fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d120      	bne.n	8003452 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	2b03      	cmp	r3, #3
 8003416:	d858      	bhi.n	80034ca <DMA_CheckFifoParam+0xce>
 8003418:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <DMA_CheckFifoParam+0x24>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003431 	.word	0x08003431
 8003424:	08003443 	.word	0x08003443
 8003428:	08003431 	.word	0x08003431
 800342c:	080034cb 	.word	0x080034cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d048      	beq.n	80034ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003440:	e045      	b.n	80034ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003446:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800344a:	d142      	bne.n	80034d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003450:	e03f      	b.n	80034d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800345a:	d123      	bne.n	80034a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	2b03      	cmp	r3, #3
 8003462:	d838      	bhi.n	80034d6 <DMA_CheckFifoParam+0xda>
 8003464:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <DMA_CheckFifoParam+0x70>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	0800347d 	.word	0x0800347d
 8003470:	08003483 	.word	0x08003483
 8003474:	0800347d 	.word	0x0800347d
 8003478:	08003495 	.word	0x08003495
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
        break;
 8003480:	e030      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d025      	beq.n	80034da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003492:	e022      	b.n	80034da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800349c:	d11f      	bne.n	80034de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034a2:	e01c      	b.n	80034de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d902      	bls.n	80034b2 <DMA_CheckFifoParam+0xb6>
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d003      	beq.n	80034b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80034b0:	e018      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
        break;
 80034b6:	e015      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
    break;
 80034c8:	e00b      	b.n	80034e2 <DMA_CheckFifoParam+0xe6>
        break;
 80034ca:	bf00      	nop
 80034cc:	e00a      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034ce:	bf00      	nop
 80034d0:	e008      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034d2:	bf00      	nop
 80034d4:	e006      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034d6:	bf00      	nop
 80034d8:	e004      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <DMA_CheckFifoParam+0xe8>
    break;
 80034e2:	bf00      	nop
    }
  }

  return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop

080034f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a38      	ldr	r2, [pc, #224]	@ (80035e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a36      	ldr	r2, [pc, #216]	@ (80035ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01d      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a35      	ldr	r2, [pc, #212]	@ (80035f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d018      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a33      	ldr	r2, [pc, #204]	@ (80035f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a32      	ldr	r2, [pc, #200]	@ (80035f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00e      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a30      	ldr	r2, [pc, #192]	@ (80035fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2f      	ldr	r2, [pc, #188]	@ (8003600 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d004      	beq.n	8003552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2d      	ldr	r2, [pc, #180]	@ (8003604 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003556:	2300      	movs	r3, #0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01a      	beq.n	8003592 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3b08      	subs	r3, #8
 8003564:	4a28      	ldr	r2, [pc, #160]	@ (8003608 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4b26      	ldr	r3, [pc, #152]	@ (800360c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a24      	ldr	r2, [pc, #144]	@ (8003610 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003580:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003590:	e024      	b.n	80035dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3b10      	subs	r3, #16
 800359a:	4a1e      	ldr	r2, [pc, #120]	@ (8003614 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003618 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d806      	bhi.n	80035ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	@ (800361c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d902      	bls.n	80035ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3308      	adds	r3, #8
 80035b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a16      	ldr	r2, [pc, #88]	@ (8003624 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80035cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2201      	movs	r2, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	58025408 	.word	0x58025408
 80035ec:	5802541c 	.word	0x5802541c
 80035f0:	58025430 	.word	0x58025430
 80035f4:	58025444 	.word	0x58025444
 80035f8:	58025458 	.word	0x58025458
 80035fc:	5802546c 	.word	0x5802546c
 8003600:	58025480 	.word	0x58025480
 8003604:	58025494 	.word	0x58025494
 8003608:	cccccccd 	.word	0xcccccccd
 800360c:	16009600 	.word	0x16009600
 8003610:	58025880 	.word	0x58025880
 8003614:	aaaaaaab 	.word	0xaaaaaaab
 8003618:	400204b8 	.word	0x400204b8
 800361c:	4002040f 	.word	0x4002040f
 8003620:	10008200 	.word	0x10008200
 8003624:	40020880 	.word	0x40020880

08003628 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04a      	beq.n	80036d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d847      	bhi.n	80036d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a21      	ldr	r2, [pc, #132]	@ (80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	@ (80036f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1b      	ldr	r2, [pc, #108]	@ (80036fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003698:	2300      	movs	r3, #0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a15      	ldr	r2, [pc, #84]	@ (8003704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80036b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80036b2:	e009      	b.n	80036c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4b14      	ldr	r3, [pc, #80]	@ (8003708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a11      	ldr	r2, [pc, #68]	@ (800370c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80036c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	58025408 	.word	0x58025408
 80036e4:	5802541c 	.word	0x5802541c
 80036e8:	58025430 	.word	0x58025430
 80036ec:	58025444 	.word	0x58025444
 80036f0:	58025458 	.word	0x58025458
 80036f4:	5802546c 	.word	0x5802546c
 80036f8:	58025480 	.word	0x58025480
 80036fc:	58025494 	.word	0x58025494
 8003700:	1600963f 	.word	0x1600963f
 8003704:	58025940 	.word	0x58025940
 8003708:	1000823f 	.word	0x1000823f
 800370c:	40020940 	.word	0x40020940

08003710 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0e3      	b.n	80038ea <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2223      	movs	r2, #35	@ 0x23
 8003730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fc ffb3 	bl	80006a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373a:	4b6e      	ldr	r3, [pc, #440]	@ (80038f4 <HAL_ETH_Init+0x1e4>)
 800373c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003740:	4a6c      	ldr	r2, [pc, #432]	@ (80038f4 <HAL_ETH_Init+0x1e4>)
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800374a:	4b6a      	ldr	r3, [pc, #424]	@ (80038f4 <HAL_ETH_Init+0x1e4>)
 800374c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7a1b      	ldrb	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd ffa9 	bl	80016b8 <HAL_SYSCFG_ETHInterfaceSelect>
 8003766:	e003      	b.n	8003770 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003768:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800376c:	f7fd ffa4 	bl	80016b8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003770:	4b61      	ldr	r3, [pc, #388]	@ (80038f8 <HAL_ETH_Init+0x1e8>)
 8003772:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	f043 0301 	orr.w	r3, r3, #1
 8003786:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800378a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800378c:	f7fd ff58 	bl	8001640 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003792:	e011      	b.n	80037b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003794:	f7fd ff54 	bl	8001640 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037a2:	d909      	bls.n	80037b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2204      	movs	r2, #4
 80037a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	22e0      	movs	r2, #224	@ 0xe0
 80037b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e098      	b.n	80038ea <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e4      	bne.n	8003794 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f89e 	bl	800390c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80037d0:	f001 feb0 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4a49      	ldr	r2, [pc, #292]	@ (80038fc <HAL_ETH_Init+0x1ec>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	0c9a      	lsrs	r2, r3, #18
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3a01      	subs	r2, #1
 80037e4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fa81 	bl	8003cf0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80037fa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003806:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800380a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	22e0      	movs	r2, #224	@ 0xe0
 8003826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e05d      	b.n	80038ea <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003836:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800383a:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_ETH_Init+0x1f0>)
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6952      	ldr	r2, [r2, #20]
 8003842:	0051      	lsls	r1, r2, #1
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800384e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fae9 	bl	8003e2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fb2f 	bl	8003ebc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	3305      	adds	r3, #5
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	4619      	mov	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	3303      	adds	r3, #3
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	061a      	lsls	r2, r3, #24
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	3302      	adds	r3, #2
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	3301      	adds	r3, #1
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800389c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80038aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80038ac:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_ETH_Init+0x1f4>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <HAL_ETH_Init+0x1f8>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2210      	movs	r2, #16
 80038e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	58024400 	.word	0x58024400
 80038f8:	58000400 	.word	0x58000400
 80038fc:	431bde83 	.word	0x431bde83
 8003900:	ffff8001 	.word	0xffff8001
 8003904:	0c020060 	.word	0x0c020060
 8003908:	0c20c000 	.word	0x0c20c000

0800390c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800391c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003924:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003926:	f001 fe05 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 800392a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4a1a      	ldr	r2, [pc, #104]	@ (8003998 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d804      	bhi.n	800393e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e022      	b.n	8003984 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a16      	ldr	r2, [pc, #88]	@ (800399c <HAL_ETH_SetMDIOClockRange+0x90>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d204      	bcs.n	8003950 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e019      	b.n	8003984 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4a13      	ldr	r2, [pc, #76]	@ (80039a0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d915      	bls.n	8003984 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4a12      	ldr	r2, [pc, #72]	@ (80039a4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d804      	bhi.n	800396a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e00c      	b.n	8003984 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a0e      	ldr	r2, [pc, #56]	@ (80039a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d804      	bhi.n	800397c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e003      	b.n	8003984 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003982:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	02160ebf 	.word	0x02160ebf
 800399c:	03938700 	.word	0x03938700
 80039a0:	05f5e0ff 	.word	0x05f5e0ff
 80039a4:	08f0d17f 	.word	0x08f0d17f
 80039a8:	0ee6b27f 	.word	0x0ee6b27f

080039ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80039be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	791b      	ldrb	r3, [r3, #4]
 80039c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80039c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	7b1b      	ldrb	r3, [r3, #12]
 80039cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	7b5b      	ldrb	r3, [r3, #13]
 80039d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	7b9b      	ldrb	r3, [r3, #14]
 80039dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	7bdb      	ldrb	r3, [r3, #15]
 80039e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	7c12      	ldrb	r2, [r2, #16]
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d102      	bne.n	80039f6 <ETH_SetMACConfig+0x4a>
 80039f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80039f4:	e000      	b.n	80039f8 <ETH_SetMACConfig+0x4c>
 80039f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	7c52      	ldrb	r2, [r2, #17]
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	d102      	bne.n	8003a08 <ETH_SetMACConfig+0x5c>
 8003a02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a06:	e000      	b.n	8003a0a <ETH_SetMACConfig+0x5e>
 8003a08:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	7c9b      	ldrb	r3, [r3, #18]
 8003a10:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a12:	431a      	orrs	r2, r3
               macconf->Speed |
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003a18:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	7f1b      	ldrb	r3, [r3, #28]
 8003a24:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7f5b      	ldrb	r3, [r3, #29]
 8003a2c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	7f92      	ldrb	r2, [r2, #30]
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	d102      	bne.n	8003a3e <ETH_SetMACConfig+0x92>
 8003a38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a3c:	e000      	b.n	8003a40 <ETH_SetMACConfig+0x94>
 8003a3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	7fdb      	ldrb	r3, [r3, #31]
 8003a46:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	d102      	bne.n	8003a5a <ETH_SetMACConfig+0xae>
 8003a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a58:	e000      	b.n	8003a5c <ETH_SetMACConfig+0xb0>
 8003a5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a5c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a6a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003a6c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b56      	ldr	r3, [pc, #344]	@ (8003bd8 <ETH_SetMACConfig+0x22c>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	68f9      	ldr	r1, [r7, #12]
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a96:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003aa0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003aa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003aaa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003aac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d102      	bne.n	8003abe <ETH_SetMACConfig+0x112>
 8003ab8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003abc:	e000      	b.n	8003ac0 <ETH_SetMACConfig+0x114>
 8003abe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003ac0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4b42      	ldr	r3, [pc, #264]	@ (8003bdc <ETH_SetMACConfig+0x230>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	68f9      	ldr	r1, [r7, #12]
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <ETH_SetMACConfig+0x234>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	430b      	orrs	r3, r1
 8003b00:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b08:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003b16:	2a00      	cmp	r2, #0
 8003b18:	d101      	bne.n	8003b1e <ETH_SetMACConfig+0x172>
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	e000      	b.n	8003b20 <ETH_SetMACConfig+0x174>
 8003b1e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003b20:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b32:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003b48:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003b50:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	f023 0103 	bic.w	r1, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003b76:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	d101      	bne.n	8003b9a <ETH_SetMACConfig+0x1ee>
 8003b96:	2240      	movs	r2, #64	@ 0x40
 8003b98:	e000      	b.n	8003b9c <ETH_SetMACConfig+0x1f0>
 8003b9a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003b9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003ba4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ba6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003bae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003bbc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	00048083 	.word	0x00048083
 8003bdc:	c0f88000 	.word	0xc0f88000
 8003be0:	fffffef0 	.word	0xfffffef0

08003be4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b38      	ldr	r3, [pc, #224]	@ (8003cdc <ETH_SetDMAConfig+0xf8>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	6811      	ldr	r1, [r2, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c0a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	791b      	ldrb	r3, [r3, #4]
 8003c10:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	7b1b      	ldrb	r3, [r3, #12]
 8003c1c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce0 <ETH_SetDMAConfig+0xfc>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c3c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	7b5b      	ldrb	r3, [r3, #13]
 8003c42:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c54:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003c58:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <ETH_SetDMAConfig+0x100>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c68:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	7d1b      	ldrb	r3, [r3, #20]
 8003c74:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	7f5b      	ldrb	r3, [r3, #29]
 8003c7c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <ETH_SetDMAConfig+0x104>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c9e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	7f1b      	ldrb	r3, [r3, #28]
 8003ca6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <ETH_SetDMAConfig+0x108>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ccc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	ffff87fd 	.word	0xffff87fd
 8003ce0:	ffff2ffe 	.word	0xffff2ffe
 8003ce4:	fffec000 	.word	0xfffec000
 8003ce8:	ffc0efef 	.word	0xffc0efef
 8003cec:	7fc0ffff 	.word	0x7fc0ffff

08003cf0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0a4      	sub	sp, #144	@ 0x90
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d30:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003d48:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003d4c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003d72:	2300      	movs	r3, #0
 8003d74:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003d9a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003da0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003da4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003dac:	2302      	movs	r3, #2
 8003dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fde6 	bl	80039ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003de4:	2301      	movs	r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003dfa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dfe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003e10:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fee1 	bl	8003be4 <ETH_SetDMAConfig>
}
 8003e22:	bf00      	nop
 8003e24:	3790      	adds	r7, #144	@ 0x90
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e01d      	b.n	8003e74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68d9      	ldr	r1, [r3, #12]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	3206      	adds	r2, #6
 8003e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d9de      	bls.n	8003e38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eac:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e023      	b.n	8003f12 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	3212      	adds	r2, #18
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d9d8      	bls.n	8003eca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2303      	movs	r3, #3
 8003f42:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f52:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f66:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	@ 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f86:	4b89      	ldr	r3, [pc, #548]	@ (80041ac <HAL_GPIO_Init+0x234>)
 8003f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f8a:	e194      	b.n	80042b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8186 	beq.w	80042b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d005      	beq.n	8003fbc <HAL_GPIO_Init+0x44>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d130      	bne.n	800401e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0201 	and.w	r2, r3, #1
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b03      	cmp	r3, #3
 8004028:	d017      	beq.n	800405a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	2203      	movs	r2, #3
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d123      	bne.n	80040ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	08da      	lsrs	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3208      	adds	r2, #8
 800406e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	220f      	movs	r2, #15
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	08da      	lsrs	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3208      	adds	r2, #8
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	2203      	movs	r2, #3
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 0203 	and.w	r2, r3, #3
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80e0 	beq.w	80042b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f0:	4b2f      	ldr	r3, [pc, #188]	@ (80041b0 <HAL_GPIO_Init+0x238>)
 80040f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040f6:	4a2e      	ldr	r2, [pc, #184]	@ (80041b0 <HAL_GPIO_Init+0x238>)
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004100:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <HAL_GPIO_Init+0x238>)
 8004102:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800410e:	4a29      	ldr	r2, [pc, #164]	@ (80041b4 <HAL_GPIO_Init+0x23c>)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	089b      	lsrs	r3, r3, #2
 8004114:	3302      	adds	r3, #2
 8004116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	220f      	movs	r2, #15
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a20      	ldr	r2, [pc, #128]	@ (80041b8 <HAL_GPIO_Init+0x240>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d052      	beq.n	80041e0 <HAL_GPIO_Init+0x268>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1f      	ldr	r2, [pc, #124]	@ (80041bc <HAL_GPIO_Init+0x244>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d031      	beq.n	80041a6 <HAL_GPIO_Init+0x22e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1e      	ldr	r2, [pc, #120]	@ (80041c0 <HAL_GPIO_Init+0x248>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02b      	beq.n	80041a2 <HAL_GPIO_Init+0x22a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <HAL_GPIO_Init+0x24c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d025      	beq.n	800419e <HAL_GPIO_Init+0x226>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <HAL_GPIO_Init+0x250>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01f      	beq.n	800419a <HAL_GPIO_Init+0x222>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <HAL_GPIO_Init+0x254>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d019      	beq.n	8004196 <HAL_GPIO_Init+0x21e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <HAL_GPIO_Init+0x258>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <HAL_GPIO_Init+0x21a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a19      	ldr	r2, [pc, #100]	@ (80041d4 <HAL_GPIO_Init+0x25c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00d      	beq.n	800418e <HAL_GPIO_Init+0x216>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a18      	ldr	r2, [pc, #96]	@ (80041d8 <HAL_GPIO_Init+0x260>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <HAL_GPIO_Init+0x212>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a17      	ldr	r2, [pc, #92]	@ (80041dc <HAL_GPIO_Init+0x264>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_GPIO_Init+0x20e>
 8004182:	2309      	movs	r3, #9
 8004184:	e02d      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 8004186:	230a      	movs	r3, #10
 8004188:	e02b      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 800418a:	2308      	movs	r3, #8
 800418c:	e029      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 800418e:	2307      	movs	r3, #7
 8004190:	e027      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 8004192:	2306      	movs	r3, #6
 8004194:	e025      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 8004196:	2305      	movs	r3, #5
 8004198:	e023      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 800419a:	2304      	movs	r3, #4
 800419c:	e021      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 800419e:	2303      	movs	r3, #3
 80041a0:	e01f      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e01d      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e01b      	b.n	80041e2 <HAL_GPIO_Init+0x26a>
 80041aa:	bf00      	nop
 80041ac:	58000080 	.word	0x58000080
 80041b0:	58024400 	.word	0x58024400
 80041b4:	58000400 	.word	0x58000400
 80041b8:	58020000 	.word	0x58020000
 80041bc:	58020400 	.word	0x58020400
 80041c0:	58020800 	.word	0x58020800
 80041c4:	58020c00 	.word	0x58020c00
 80041c8:	58021000 	.word	0x58021000
 80041cc:	58021400 	.word	0x58021400
 80041d0:	58021800 	.word	0x58021800
 80041d4:	58021c00 	.word	0x58021c00
 80041d8:	58022000 	.word	0x58022000
 80041dc:	58022400 	.word	0x58022400
 80041e0:	2300      	movs	r3, #0
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	f002 0203 	and.w	r2, r2, #3
 80041e8:	0092      	lsls	r2, r2, #2
 80041ea:	4093      	lsls	r3, r2
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f2:	4938      	ldr	r1, [pc, #224]	@ (80042d4 <HAL_GPIO_Init+0x35c>)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	3302      	adds	r3, #2
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004226:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	3301      	adds	r3, #1
 80042b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f ae63 	bne.w	8003f8c <HAL_GPIO_Init+0x14>
  }
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	3724      	adds	r7, #36	@ 0x24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	58000400 	.word	0x58000400

080042d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
 80042e4:	4613      	mov	r3, r2
 80042e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042e8:	787b      	ldrb	r3, [r7, #1]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042f4:	e003      	b.n	80042fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042f6:	887b      	ldrh	r3, [r7, #2]
 80042f8:	041a      	lsls	r2, r3, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	619a      	str	r2, [r3, #24]
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af02      	add	r7, sp, #8
 8004310:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0fe      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fd f859 	bl	80013e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2203      	movs	r2, #3
 800433a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f005 f936 	bl	80095b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7c1a      	ldrb	r2, [r3, #16]
 8004350:	f88d 2000 	strb.w	r2, [sp]
 8004354:	3304      	adds	r3, #4
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	f005 f8ba 	bl	80094d0 <USB_CoreInit>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0d5      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2100      	movs	r1, #0
 8004374:	4618      	mov	r0, r3
 8004376:	f005 f92e 	bl	80095d6 <USB_SetCurrentMode>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0c6      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
 8004390:	e04a      	b.n	8004428 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3315      	adds	r3, #21
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3314      	adds	r3, #20
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	b298      	uxth	r0, r3
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	332e      	adds	r3, #46	@ 0x2e
 80043ce:	4602      	mov	r2, r0
 80043d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043d2:	7bfa      	ldrb	r2, [r7, #15]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3318      	adds	r3, #24
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	331c      	adds	r3, #28
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043fa:	7bfa      	ldrb	r2, [r7, #15]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3320      	adds	r3, #32
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3324      	adds	r3, #36	@ 0x24
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	3301      	adds	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	791b      	ldrb	r3, [r3, #4]
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	429a      	cmp	r2, r3
 8004430:	d3af      	bcc.n	8004392 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e044      	b.n	80044c2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800444e:	7bfa      	ldrb	r2, [r7, #15]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004460:	7bfa      	ldrb	r2, [r7, #15]
 8004462:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800447a:	7bfa      	ldrb	r2, [r7, #15]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	3301      	adds	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	791b      	ldrb	r3, [r3, #4]
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d3b5      	bcc.n	8004438 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7c1a      	ldrb	r2, [r3, #16]
 80044d4:	f88d 2000 	strb.w	r2, [sp]
 80044d8:	3304      	adds	r3, #4
 80044da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044dc:	f005 f8c8 	bl	8009670 <USB_DevInit>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e013      	b.n	800451a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7b1b      	ldrb	r3, [r3, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d102      	bne.n	800450e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f80b 	bl	8004524 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f005 fa83 	bl	8009a1e <USB_DevDisconnect>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_PCDEx_ActivateLPM+0x44>)
 8004554:	4313      	orrs	r3, r2
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	10000003 	.word	0x10000003

0800456c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8004570:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a04      	ldr	r2, [pc, #16]	@ (8004588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	58024800 	.word	0x58024800

0800458c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004594:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <HAL_PWREx_ConfigSupply+0x70>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d00a      	beq.n	80045b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045a0:	4b16      	ldr	r3, [pc, #88]	@ (80045fc <HAL_PWREx_ConfigSupply+0x70>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d001      	beq.n	80045b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e01f      	b.n	80045f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e01d      	b.n	80045f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045b6:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <HAL_PWREx_ConfigSupply+0x70>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f023 0207 	bic.w	r2, r3, #7
 80045be:	490f      	ldr	r1, [pc, #60]	@ (80045fc <HAL_PWREx_ConfigSupply+0x70>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045c6:	f7fd f83b 	bl	8001640 <HAL_GetTick>
 80045ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045cc:	e009      	b.n	80045e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045ce:	f7fd f837 	bl	8001640 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045dc:	d901      	bls.n	80045e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e007      	b.n	80045f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <HAL_PWREx_ConfigSupply+0x70>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ee:	d1ee      	bne.n	80045ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	58024800 	.word	0x58024800

08004600 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a04      	ldr	r2, [pc, #16]	@ (800461c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800460a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800460e:	60d3      	str	r3, [r2, #12]
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	58024800 	.word	0x58024800

08004620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	@ 0x30
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f000 bc48 	b.w	8004ec4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8088 	beq.w	8004752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004642:	4b99      	ldr	r3, [pc, #612]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800464a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800464c:	4b96      	ldr	r3, [pc, #600]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004654:	2b10      	cmp	r3, #16
 8004656:	d007      	beq.n	8004668 <HAL_RCC_OscConfig+0x48>
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465a:	2b18      	cmp	r3, #24
 800465c:	d111      	bne.n	8004682 <HAL_RCC_OscConfig+0x62>
 800465e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d10c      	bne.n	8004682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004668:	4b8f      	ldr	r3, [pc, #572]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d06d      	beq.n	8004750 <HAL_RCC_OscConfig+0x130>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d169      	bne.n	8004750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f000 bc21 	b.w	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800468a:	d106      	bne.n	800469a <HAL_RCC_OscConfig+0x7a>
 800468c:	4b86      	ldr	r3, [pc, #536]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a85      	ldr	r2, [pc, #532]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	e02e      	b.n	80046f8 <HAL_RCC_OscConfig+0xd8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0x9c>
 80046a2:	4b81      	ldr	r3, [pc, #516]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a80      	ldr	r2, [pc, #512]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b7e      	ldr	r3, [pc, #504]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a7d      	ldr	r2, [pc, #500]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e01d      	b.n	80046f8 <HAL_RCC_OscConfig+0xd8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0xc0>
 80046c6:	4b78      	ldr	r3, [pc, #480]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a77      	ldr	r2, [pc, #476]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b75      	ldr	r3, [pc, #468]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a74      	ldr	r2, [pc, #464]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0xd8>
 80046e0:	4b71      	ldr	r3, [pc, #452]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a70      	ldr	r2, [pc, #448]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b6e      	ldr	r3, [pc, #440]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6d      	ldr	r2, [pc, #436]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fc ff9e 	bl	8001640 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004708:	f7fc ff9a 	bl	8001640 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	@ 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e3d4      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800471a:	4b63      	ldr	r3, [pc, #396]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0xe8>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fc ff8a 	bl	8001640 <HAL_GetTick>
 800472c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004730:	f7fc ff86 	bl	8001640 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	@ 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e3c0      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004742:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x110>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80ca 	beq.w	80048f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004760:	4b51      	ldr	r3, [pc, #324]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004768:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800476a:	4b4f      	ldr	r3, [pc, #316]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_RCC_OscConfig+0x166>
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	2b18      	cmp	r3, #24
 800477a:	d156      	bne.n	800482a <HAL_RCC_OscConfig+0x20a>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d151      	bne.n	800482a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004786:	4b48      	ldr	r3, [pc, #288]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x17e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e392      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800479e:	4b42      	ldr	r3, [pc, #264]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 0219 	bic.w	r2, r3, #25
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	493f      	ldr	r1, [pc, #252]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fc ff46 	bl	8001640 <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fc ff42 	bl	8001640 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e37c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ca:	4b37      	ldr	r3, [pc, #220]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d6:	f7fc ff63 	bl	80016a0 <HAL_GetREVID>
 80047da:	4603      	mov	r3, r0
 80047dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d817      	bhi.n	8004814 <HAL_RCC_OscConfig+0x1f4>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d108      	bne.n	80047fe <HAL_RCC_OscConfig+0x1de>
 80047ec:	4b2e      	ldr	r3, [pc, #184]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047f4:	4a2c      	ldr	r2, [pc, #176]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80047f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047fc:	e07a      	b.n	80048f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	4b2a      	ldr	r3, [pc, #168]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	031b      	lsls	r3, r3, #12
 800480c:	4926      	ldr	r1, [pc, #152]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004812:	e06f      	b.n	80048f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b24      	ldr	r3, [pc, #144]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	061b      	lsls	r3, r3, #24
 8004822:	4921      	ldr	r1, [pc, #132]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004828:	e064      	b.n	80048f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d047      	beq.n	80048c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004832:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 0219 	bic.w	r2, r3, #25
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	491a      	ldr	r1, [pc, #104]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fc fefc 	bl	8001640 <HAL_GetTick>
 8004848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800484c:	f7fc fef8 	bl	8001640 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e332      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800485e:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	f7fc ff19 	bl	80016a0 <HAL_GetREVID>
 800486e:	4603      	mov	r3, r0
 8004870:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004874:	4293      	cmp	r3, r2
 8004876:	d819      	bhi.n	80048ac <HAL_RCC_OscConfig+0x28c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d108      	bne.n	8004892 <HAL_RCC_OscConfig+0x272>
 8004880:	4b09      	ldr	r3, [pc, #36]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004888:	4a07      	ldr	r2, [pc, #28]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 800488a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800488e:	6053      	str	r3, [r2, #4]
 8004890:	e030      	b.n	80048f4 <HAL_RCC_OscConfig+0x2d4>
 8004892:	4b05      	ldr	r3, [pc, #20]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	031b      	lsls	r3, r3, #12
 80048a0:	4901      	ldr	r1, [pc, #4]	@ (80048a8 <HAL_RCC_OscConfig+0x288>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
 80048a6:	e025      	b.n	80048f4 <HAL_RCC_OscConfig+0x2d4>
 80048a8:	58024400 	.word	0x58024400
 80048ac:	4b9a      	ldr	r3, [pc, #616]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	4997      	ldr	r1, [pc, #604]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	604b      	str	r3, [r1, #4]
 80048c0:	e018      	b.n	80048f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c2:	4b95      	ldr	r3, [pc, #596]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a94      	ldr	r2, [pc, #592]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fc feb7 	bl	8001640 <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d6:	f7fc feb3 	bl	8001640 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e2ed      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048e8:	4b8b      	ldr	r3, [pc, #556]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a9 	beq.w	8004a54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004902:	4b85      	ldr	r3, [pc, #532]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800490a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800490c:	4b82      	ldr	r3, [pc, #520]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d007      	beq.n	8004928 <HAL_RCC_OscConfig+0x308>
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b18      	cmp	r3, #24
 800491c:	d13a      	bne.n	8004994 <HAL_RCC_OscConfig+0x374>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d135      	bne.n	8004994 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004928:	4b7b      	ldr	r3, [pc, #492]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_RCC_OscConfig+0x320>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	2b80      	cmp	r3, #128	@ 0x80
 800493a:	d001      	beq.n	8004940 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e2c1      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004940:	f7fc feae 	bl	80016a0 <HAL_GetREVID>
 8004944:	4603      	mov	r3, r0
 8004946:	f241 0203 	movw	r2, #4099	@ 0x1003
 800494a:	4293      	cmp	r3, r2
 800494c:	d817      	bhi.n	800497e <HAL_RCC_OscConfig+0x35e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	2b20      	cmp	r3, #32
 8004954:	d108      	bne.n	8004968 <HAL_RCC_OscConfig+0x348>
 8004956:	4b70      	ldr	r3, [pc, #448]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800495e:	4a6e      	ldr	r2, [pc, #440]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004960:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004964:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004966:	e075      	b.n	8004a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004968:	4b6b      	ldr	r3, [pc, #428]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	069b      	lsls	r3, r3, #26
 8004976:	4968      	ldr	r1, [pc, #416]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800497c:	e06a      	b.n	8004a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800497e:	4b66      	ldr	r3, [pc, #408]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	4962      	ldr	r1, [pc, #392]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 800498e:	4313      	orrs	r3, r2
 8004990:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004992:	e05f      	b.n	8004a54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d042      	beq.n	8004a22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800499c:	4b5e      	ldr	r3, [pc, #376]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80049a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fc fe4a 	bl	8001640 <HAL_GetTick>
 80049ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049b0:	f7fc fe46 	bl	8001640 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e280      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049c2:	4b55      	ldr	r3, [pc, #340]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049ce:	f7fc fe67 	bl	80016a0 <HAL_GetREVID>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049d8:	4293      	cmp	r3, r2
 80049da:	d817      	bhi.n	8004a0c <HAL_RCC_OscConfig+0x3ec>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d108      	bne.n	80049f6 <HAL_RCC_OscConfig+0x3d6>
 80049e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80049ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049f2:	6053      	str	r3, [r2, #4]
 80049f4:	e02e      	b.n	8004a54 <HAL_RCC_OscConfig+0x434>
 80049f6:	4b48      	ldr	r3, [pc, #288]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	069b      	lsls	r3, r3, #26
 8004a04:	4944      	ldr	r1, [pc, #272]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	604b      	str	r3, [r1, #4]
 8004a0a:	e023      	b.n	8004a54 <HAL_RCC_OscConfig+0x434>
 8004a0c:	4b42      	ldr	r3, [pc, #264]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	061b      	lsls	r3, r3, #24
 8004a1a:	493f      	ldr	r1, [pc, #252]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
 8004a20:	e018      	b.n	8004a54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a22:	4b3d      	ldr	r3, [pc, #244]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3c      	ldr	r2, [pc, #240]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2e:	f7fc fe07 	bl	8001640 <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a36:	f7fc fe03 	bl	8001640 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e23d      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a48:	4b33      	ldr	r3, [pc, #204]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f0      	bne.n	8004a36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d036      	beq.n	8004ace <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d019      	beq.n	8004a9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a68:	4b2b      	ldr	r3, [pc, #172]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a6e:	f043 0301 	orr.w	r3, r3, #1
 8004a72:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fc fde4 	bl	8001640 <HAL_GetTick>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7fc fde0 	bl	8001640 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e21a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a8e:	4b22      	ldr	r3, [pc, #136]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x45c>
 8004a9a:	e018      	b.n	8004ace <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fc fdca 	bl	8001640 <HAL_GetTick>
 8004aac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fc fdc6 	bl	8001640 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e200      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ac2:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d039      	beq.n	8004b4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aee:	f7fc fda7 	bl	8001640 <HAL_GetTick>
 8004af2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af6:	f7fc fda3 	bl	8001640 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e1dd      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b08:	4b03      	ldr	r3, [pc, #12]	@ (8004b18 <HAL_RCC_OscConfig+0x4f8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x4d6>
 8004b14:	e01b      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b1c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a9a      	ldr	r2, [pc, #616]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b28:	f7fc fd8a 	bl	8001640 <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b30:	f7fc fd86 	bl	8001640 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e1c0      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b42:	4b92      	ldr	r3, [pc, #584]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8081 	beq.w	8004c5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d90 <HAL_RCC_OscConfig+0x770>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a8b      	ldr	r2, [pc, #556]	@ (8004d90 <HAL_RCC_OscConfig+0x770>)
 8004b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b68:	f7fc fd6a 	bl	8001640 <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b70:	f7fc fd66 	bl	8001640 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e1a0      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b82:	4b83      	ldr	r3, [pc, #524]	@ (8004d90 <HAL_RCC_OscConfig+0x770>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d106      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x584>
 8004b96:	4b7d      	ldr	r3, [pc, #500]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba2:	e02d      	b.n	8004c00 <HAL_RCC_OscConfig+0x5e0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10c      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x5a6>
 8004bac:	4b77      	ldr	r3, [pc, #476]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb0:	4a76      	ldr	r2, [pc, #472]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb8:	4b74      	ldr	r3, [pc, #464]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	4a73      	ldr	r2, [pc, #460]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bbe:	f023 0304 	bic.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc4:	e01c      	b.n	8004c00 <HAL_RCC_OscConfig+0x5e0>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b05      	cmp	r3, #5
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x5c8>
 8004bce:	4b6f      	ldr	r3, [pc, #444]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bda:	4b6c      	ldr	r3, [pc, #432]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	4a6b      	ldr	r2, [pc, #428]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0x5e0>
 8004be8:	4b68      	ldr	r3, [pc, #416]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bec:	4a67      	ldr	r2, [pc, #412]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf4:	4b65      	ldr	r3, [pc, #404]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf8:	4a64      	ldr	r2, [pc, #400]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004bfa:	f023 0304 	bic.w	r3, r3, #4
 8004bfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fc fd1a 	bl	8001640 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fc fd16 	bl	8001640 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e14e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c26:	4b59      	ldr	r3, [pc, #356]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ee      	beq.n	8004c10 <HAL_RCC_OscConfig+0x5f0>
 8004c32:	e014      	b.n	8004c5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fc fd04 	bl	8001640 <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fc fd00 	bl	8001640 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e138      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c52:	4b4e      	ldr	r3, [pc, #312]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1ee      	bne.n	8004c3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 812d 	beq.w	8004ec2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c68:	4b48      	ldr	r3, [pc, #288]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c70:	2b18      	cmp	r3, #24
 8004c72:	f000 80bd 	beq.w	8004df0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	f040 809e 	bne.w	8004dbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c80:	4b42      	ldr	r3, [pc, #264]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a41      	ldr	r2, [pc, #260]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fc fcd8 	bl	8001640 <HAL_GetTick>
 8004c90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c94:	f7fc fcd4 	bl	8001640 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e10e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ca6:	4b39      	ldr	r3, [pc, #228]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cb2:	4b36      	ldr	r3, [pc, #216]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cb6:	4b37      	ldr	r3, [pc, #220]	@ (8004d94 <HAL_RCC_OscConfig+0x774>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cc2:	0112      	lsls	r2, r2, #4
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	4931      	ldr	r1, [pc, #196]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	025b      	lsls	r3, r3, #9
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cfc:	4923      	ldr	r1, [pc, #140]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d02:	4b22      	ldr	r3, [pc, #136]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d12:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <HAL_RCC_OscConfig+0x778>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d1a:	00d2      	lsls	r2, r2, #3
 8004d1c:	491b      	ldr	r1, [pc, #108]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d22:	4b1a      	ldr	r3, [pc, #104]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	f023 020c 	bic.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	4917      	ldr	r1, [pc, #92]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d34:	4b15      	ldr	r3, [pc, #84]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	f023 0202 	bic.w	r2, r3, #2
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d40:	4912      	ldr	r1, [pc, #72]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d46:	4b11      	ldr	r3, [pc, #68]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	4a10      	ldr	r2, [pc, #64]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d52:	4b0e      	ldr	r3, [pc, #56]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	4a0d      	ldr	r2, [pc, #52]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	4a0a      	ldr	r2, [pc, #40]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d6a:	4b08      	ldr	r3, [pc, #32]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a07      	ldr	r2, [pc, #28]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d76:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a04      	ldr	r2, [pc, #16]	@ (8004d8c <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fc fc5d 	bl	8001640 <HAL_GetTick>
 8004d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d88:	e011      	b.n	8004dae <HAL_RCC_OscConfig+0x78e>
 8004d8a:	bf00      	nop
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	58024800 	.word	0x58024800
 8004d94:	fffffc0c 	.word	0xfffffc0c
 8004d98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fc fc50 	bl	8001640 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e08a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x77c>
 8004dba:	e082      	b.n	8004ec2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbc:	4b43      	ldr	r3, [pc, #268]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a42      	ldr	r2, [pc, #264]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fc fc3a 	bl	8001640 <HAL_GetTick>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fc fc36 	bl	8001640 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e070      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004de2:	4b3a      	ldr	r3, [pc, #232]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x7b0>
 8004dee:	e068      	b.n	8004ec2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004df0:	4b36      	ldr	r3, [pc, #216]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004df6:	4b35      	ldr	r3, [pc, #212]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d031      	beq.n	8004e68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f003 0203 	and.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d12a      	bne.n	8004e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d122      	bne.n	8004e68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d11a      	bne.n	8004e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	0a5b      	lsrs	r3, r3, #9
 8004e36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d111      	bne.n	8004e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	0c1b      	lsrs	r3, r3, #16
 8004e48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d108      	bne.n	8004e68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	0e1b      	lsrs	r3, r3, #24
 8004e5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d001      	beq.n	8004e6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e02b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e6c:	4b17      	ldr	r3, [pc, #92]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e70:	08db      	lsrs	r3, r3, #3
 8004e72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d01f      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e82:	4b12      	ldr	r3, [pc, #72]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	4a11      	ldr	r2, [pc, #68]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e8e:	f7fc fbd7 	bl	8001640 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e94:	bf00      	nop
 8004e96:	f7fc fbd3 	bl	8001640 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d0f9      	beq.n	8004e96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed0 <HAL_RCC_OscConfig+0x8b0>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004eae:	00d2      	lsls	r2, r2, #3
 8004eb0:	4906      	ldr	r1, [pc, #24]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004eb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	4a04      	ldr	r2, [pc, #16]	@ (8004ecc <HAL_RCC_OscConfig+0x8ac>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3730      	adds	r7, #48	@ 0x30
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	ffff0007 	.word	0xffff0007

08004ed4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e19c      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b8a      	ldr	r3, [pc, #552]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d910      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b87      	ldr	r3, [pc, #540]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 020f 	bic.w	r2, r3, #15
 8004efe:	4985      	ldr	r1, [pc, #532]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b83      	ldr	r3, [pc, #524]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e184      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	4b7b      	ldr	r3, [pc, #492]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d908      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f34:	4b78      	ldr	r3, [pc, #480]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	4975      	ldr	r1, [pc, #468]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	4b70      	ldr	r3, [pc, #448]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d908      	bls.n	8004f74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f62:	4b6d      	ldr	r3, [pc, #436]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	496a      	ldr	r1, [pc, #424]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d010      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699a      	ldr	r2, [r3, #24]
 8004f84:	4b64      	ldr	r3, [pc, #400]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d908      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f90:	4b61      	ldr	r3, [pc, #388]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	495e      	ldr	r1, [pc, #376]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69da      	ldr	r2, [r3, #28]
 8004fb2:	4b59      	ldr	r3, [pc, #356]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d908      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fbe:	4b56      	ldr	r3, [pc, #344]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4953      	ldr	r1, [pc, #332]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d908      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fec:	4b4a      	ldr	r3, [pc, #296]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f023 020f 	bic.w	r2, r3, #15
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4947      	ldr	r1, [pc, #284]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d055      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800500a:	4b43      	ldr	r3, [pc, #268]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4940      	ldr	r1, [pc, #256]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8005018:	4313      	orrs	r3, r2
 800501a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d107      	bne.n	8005034 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005024:	4b3c      	ldr	r3, [pc, #240]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d121      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0f6      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d107      	bne.n	800504c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800503c:	4b36      	ldr	r3, [pc, #216]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d115      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0ea      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005054:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0de      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005064:	4b2c      	ldr	r3, [pc, #176]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0d6      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005074:	4b28      	ldr	r3, [pc, #160]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f023 0207 	bic.w	r2, r3, #7
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4925      	ldr	r1, [pc, #148]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005086:	f7fc fadb 	bl	8001640 <HAL_GetTick>
 800508a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508c:	e00a      	b.n	80050a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508e:	f7fc fad7 	bl	8001640 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e0be      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d1eb      	bne.n	800508e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d010      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	4b14      	ldr	r3, [pc, #80]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d208      	bcs.n	80050e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d2:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f023 020f 	bic.w	r2, r3, #15
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	490e      	ldr	r1, [pc, #56]	@ (8005118 <HAL_RCC_ClockConfig+0x244>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d214      	bcs.n	800511c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 020f 	bic.w	r2, r3, #15
 80050fa:	4906      	ldr	r1, [pc, #24]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b04      	ldr	r3, [pc, #16]	@ (8005114 <HAL_RCC_ClockConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e086      	b.n	8005222 <HAL_RCC_ClockConfig+0x34e>
 8005114:	52002000 	.word	0x52002000
 8005118:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	4b3f      	ldr	r3, [pc, #252]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005134:	429a      	cmp	r2, r3
 8005136:	d208      	bcs.n	800514a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005138:	4b3c      	ldr	r3, [pc, #240]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	4939      	ldr	r1, [pc, #228]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 8005146:	4313      	orrs	r3, r2
 8005148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	4b34      	ldr	r3, [pc, #208]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005162:	429a      	cmp	r2, r3
 8005164:	d208      	bcs.n	8005178 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005166:	4b31      	ldr	r3, [pc, #196]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	492e      	ldr	r1, [pc, #184]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 8005174:	4313      	orrs	r3, r2
 8005176:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	4b28      	ldr	r3, [pc, #160]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005190:	429a      	cmp	r2, r3
 8005192:	d208      	bcs.n	80051a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005194:	4b25      	ldr	r3, [pc, #148]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4922      	ldr	r1, [pc, #136]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d010      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	4b1d      	ldr	r3, [pc, #116]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051be:	429a      	cmp	r2, r3
 80051c0:	d208      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051c2:	4b1a      	ldr	r3, [pc, #104]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	4917      	ldr	r1, [pc, #92]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051d4:	f000 f834 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b14      	ldr	r3, [pc, #80]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	4912      	ldr	r1, [pc, #72]	@ (8005230 <HAL_RCC_ClockConfig+0x35c>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051f2:	4b0e      	ldr	r3, [pc, #56]	@ (800522c <HAL_RCC_ClockConfig+0x358>)
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005230 <HAL_RCC_ClockConfig+0x35c>)
 80051fc:	5cd3      	ldrb	r3, [r2, r3]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
 8005208:	4a0a      	ldr	r2, [pc, #40]	@ (8005234 <HAL_RCC_ClockConfig+0x360>)
 800520a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800520c:	4a0a      	ldr	r2, [pc, #40]	@ (8005238 <HAL_RCC_ClockConfig+0x364>)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005212:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <HAL_RCC_ClockConfig+0x368>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f7fc f9c8 	bl	80015ac <HAL_InitTick>
 800521c:	4603      	mov	r3, r0
 800521e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	58024400 	.word	0x58024400
 8005230:	08009cac 	.word	0x08009cac
 8005234:	24000004 	.word	0x24000004
 8005238:	24000000 	.word	0x24000000
 800523c:	24000008 	.word	0x24000008

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	b480      	push	{r7}
 8005242:	b089      	sub	sp, #36	@ 0x24
 8005244:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005246:	4bb3      	ldr	r3, [pc, #716]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800524e:	2b18      	cmp	r3, #24
 8005250:	f200 8155 	bhi.w	80054fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005254:	a201      	add	r2, pc, #4	@ (adr r2, 800525c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	080052c1 	.word	0x080052c1
 8005260:	080054ff 	.word	0x080054ff
 8005264:	080054ff 	.word	0x080054ff
 8005268:	080054ff 	.word	0x080054ff
 800526c:	080054ff 	.word	0x080054ff
 8005270:	080054ff 	.word	0x080054ff
 8005274:	080054ff 	.word	0x080054ff
 8005278:	080054ff 	.word	0x080054ff
 800527c:	080052e7 	.word	0x080052e7
 8005280:	080054ff 	.word	0x080054ff
 8005284:	080054ff 	.word	0x080054ff
 8005288:	080054ff 	.word	0x080054ff
 800528c:	080054ff 	.word	0x080054ff
 8005290:	080054ff 	.word	0x080054ff
 8005294:	080054ff 	.word	0x080054ff
 8005298:	080054ff 	.word	0x080054ff
 800529c:	080052ed 	.word	0x080052ed
 80052a0:	080054ff 	.word	0x080054ff
 80052a4:	080054ff 	.word	0x080054ff
 80052a8:	080054ff 	.word	0x080054ff
 80052ac:	080054ff 	.word	0x080054ff
 80052b0:	080054ff 	.word	0x080054ff
 80052b4:	080054ff 	.word	0x080054ff
 80052b8:	080054ff 	.word	0x080054ff
 80052bc:	080052f3 	.word	0x080052f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c0:	4b94      	ldr	r3, [pc, #592]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052cc:	4b91      	ldr	r3, [pc, #580]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	4a90      	ldr	r2, [pc, #576]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052de:	e111      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052e2:	61bb      	str	r3, [r7, #24]
      break;
 80052e4:	e10e      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052e6:	4b8d      	ldr	r3, [pc, #564]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052e8:	61bb      	str	r3, [r7, #24]
      break;
 80052ea:	e10b      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052ee:	61bb      	str	r3, [r7, #24]
      break;
 80052f0:	e108      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052f2:	4b88      	ldr	r3, [pc, #544]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052fc:	4b85      	ldr	r3, [pc, #532]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005306:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005308:	4b82      	ldr	r3, [pc, #520]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005312:	4b80      	ldr	r3, [pc, #512]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005316:	08db      	lsrs	r3, r3, #3
 8005318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80e1 	beq.w	80054f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b02      	cmp	r3, #2
 800533a:	f000 8083 	beq.w	8005444 <HAL_RCC_GetSysClockFreq+0x204>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b02      	cmp	r3, #2
 8005342:	f200 80a1 	bhi.w	8005488 <HAL_RCC_GetSysClockFreq+0x248>
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x114>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d056      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005352:	e099      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005354:	4b6f      	ldr	r3, [pc, #444]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02d      	beq.n	80053bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005360:	4b6c      	ldr	r3, [pc, #432]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	4a6b      	ldr	r2, [pc, #428]	@ (8005518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
 8005370:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800538a:	4b62      	ldr	r3, [pc, #392]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539a:	ed97 6a02 	vldr	s12, [r7, #8]
 800539e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053ba:	e087      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005528 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ce:	4b51      	ldr	r3, [pc, #324]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053de:	ed97 6a02 	vldr	s12, [r7, #8]
 80053e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053fe:	e065      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2ec>
 800540e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005412:	4b40      	ldr	r3, [pc, #256]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005422:	ed97 6a02 	vldr	s12, [r7, #8]
 8005426:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800542a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005442:	e043      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005530 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b2f      	ldr	r3, [pc, #188]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a02 	vldr	s12, [r7, #8]
 800546a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005486:	e021      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800552c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b1e      	ldr	r3, [pc, #120]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005524 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	0a5b      	lsrs	r3, r3, #9
 80054d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054d6:	3301      	adds	r3, #1
 80054d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f0:	ee17 3a90 	vmov	r3, s15
 80054f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054f6:	e005      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
      break;
 80054fc:	e002      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054fe:	4b07      	ldr	r3, [pc, #28]	@ (800551c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005500:	61bb      	str	r3, [r7, #24]
      break;
 8005502:	bf00      	nop
  }

  return sysclockfreq;
 8005504:	69bb      	ldr	r3, [r7, #24]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3724      	adds	r7, #36	@ 0x24
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	58024400 	.word	0x58024400
 8005518:	03d09000 	.word	0x03d09000
 800551c:	003d0900 	.word	0x003d0900
 8005520:	007a1200 	.word	0x007a1200
 8005524:	46000000 	.word	0x46000000
 8005528:	4c742400 	.word	0x4c742400
 800552c:	4a742400 	.word	0x4a742400
 8005530:	4af42400 	.word	0x4af42400

08005534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800553a:	f7ff fe81 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 800553e:	4602      	mov	r2, r0
 8005540:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <HAL_RCC_GetHCLKFreq+0x50>)
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	490f      	ldr	r1, [pc, #60]	@ (8005588 <HAL_RCC_GetHCLKFreq+0x54>)
 800554c:	5ccb      	ldrb	r3, [r1, r3]
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	fa22 f303 	lsr.w	r3, r2, r3
 8005556:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005558:	4b0a      	ldr	r3, [pc, #40]	@ (8005584 <HAL_RCC_GetHCLKFreq+0x50>)
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	4a09      	ldr	r2, [pc, #36]	@ (8005588 <HAL_RCC_GetHCLKFreq+0x54>)
 8005562:	5cd3      	ldrb	r3, [r2, r3]
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	fa22 f303 	lsr.w	r3, r2, r3
 800556e:	4a07      	ldr	r2, [pc, #28]	@ (800558c <HAL_RCC_GetHCLKFreq+0x58>)
 8005570:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005572:	4a07      	ldr	r2, [pc, #28]	@ (8005590 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005578:	4b04      	ldr	r3, [pc, #16]	@ (800558c <HAL_RCC_GetHCLKFreq+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	58024400 	.word	0x58024400
 8005588:	08009cac 	.word	0x08009cac
 800558c:	24000004 	.word	0x24000004
 8005590:	24000000 	.word	0x24000000

08005594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005598:	f7ff ffcc 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4904      	ldr	r1, [pc, #16]	@ (80055bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	58024400 	.word	0x58024400
 80055bc:	08009cac 	.word	0x08009cac

080055c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055c4:	f7ff ffb6 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	4904      	ldr	r1, [pc, #16]	@ (80055e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055d6:	5ccb      	ldrb	r3, [r1, r3]
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	58024400 	.word	0x58024400
 80055e8:	08009cac 	.word	0x08009cac

080055ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f0:	b0ca      	sub	sp, #296	@ 0x128
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055f8:	2300      	movs	r3, #0
 80055fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005610:	2500      	movs	r5, #0
 8005612:	ea54 0305 	orrs.w	r3, r4, r5
 8005616:	d049      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800561e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005622:	d02f      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005624:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005628:	d828      	bhi.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800562a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800562e:	d01a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005630:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005634:	d822      	bhi.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800563e:	d007      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005640:	e01c      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005642:	4bb8      	ldr	r3, [pc, #736]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	4ab7      	ldr	r2, [pc, #732]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800564c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800564e:	e01a      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005654:	3308      	adds	r3, #8
 8005656:	2102      	movs	r1, #2
 8005658:	4618      	mov	r0, r3
 800565a:	f001 fc8f 	bl	8006f7c <RCCEx_PLL2_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005664:	e00f      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566a:	3328      	adds	r3, #40	@ 0x28
 800566c:	2102      	movs	r1, #2
 800566e:	4618      	mov	r0, r3
 8005670:	f001 fd36 	bl	80070e0 <RCCEx_PLL3_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800567a:	e004      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005682:	e000      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800568e:	4ba5      	ldr	r3, [pc, #660]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005692:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800569c:	4aa1      	ldr	r2, [pc, #644]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800569e:	430b      	orrs	r3, r1
 80056a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80056a2:	e003      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80056b8:	f04f 0900 	mov.w	r9, #0
 80056bc:	ea58 0309 	orrs.w	r3, r8, r9
 80056c0:	d047      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d82a      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	080056e9 	.word	0x080056e9
 80056d8:	080056f7 	.word	0x080056f7
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	0800572b 	.word	0x0800572b
 80056e4:	0800572b 	.word	0x0800572b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	4a8d      	ldr	r2, [pc, #564]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056f4:	e01a      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	3308      	adds	r3, #8
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 fc3c 	bl	8006f7c <RCCEx_PLL2_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800570a:	e00f      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005710:	3328      	adds	r3, #40	@ 0x28
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f001 fce3 	bl	80070e0 <RCCEx_PLL3_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005720:	e004      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005728:	e000      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800572a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800572c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005734:	4b7b      	ldr	r3, [pc, #492]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005738:	f023 0107 	bic.w	r1, r3, #7
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	4a78      	ldr	r2, [pc, #480]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005744:	430b      	orrs	r3, r1
 8005746:	6513      	str	r3, [r2, #80]	@ 0x50
 8005748:	e003      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800575e:	f04f 0b00 	mov.w	fp, #0
 8005762:	ea5a 030b 	orrs.w	r3, sl, fp
 8005766:	d04c      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005772:	d030      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005778:	d829      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800577a:	2bc0      	cmp	r3, #192	@ 0xc0
 800577c:	d02d      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800577e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005780:	d825      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005782:	2b80      	cmp	r3, #128	@ 0x80
 8005784:	d018      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005786:	2b80      	cmp	r3, #128	@ 0x80
 8005788:	d821      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d007      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005792:	e01c      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005794:	4b63      	ldr	r3, [pc, #396]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4a62      	ldr	r2, [pc, #392]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057a0:	e01c      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	3308      	adds	r3, #8
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 fbe6 	bl	8006f7c <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057b6:	e011      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	3328      	adds	r3, #40	@ 0x28
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fc8d 	bl	80070e0 <RCCEx_PLL3_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057cc:	e006      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80057da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057e4:	4b4f      	ldr	r3, [pc, #316]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057f8:	e003      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800580e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005818:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800581c:	460b      	mov	r3, r1
 800581e:	4313      	orrs	r3, r2
 8005820:	d053      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800582a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800582e:	d035      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005830:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005834:	d82e      	bhi.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005836:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800583a:	d031      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800583c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005840:	d828      	bhi.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005842:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005846:	d01a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800584c:	d822      	bhi.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005856:	d007      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005858:	e01c      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585a:	4b32      	ldr	r3, [pc, #200]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	4a31      	ldr	r2, [pc, #196]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005866:	e01c      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586c:	3308      	adds	r3, #8
 800586e:	2100      	movs	r1, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fb83 	bl	8006f7c <RCCEx_PLL2_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800587c:	e011      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005882:	3328      	adds	r3, #40	@ 0x28
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f001 fc2a 	bl	80070e0 <RCCEx_PLL3_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005892:	e006      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800589a:	e002      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058bc:	430b      	orrs	r3, r1
 80058be:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c0:	e003      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80058da:	2300      	movs	r3, #0
 80058dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80058e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80058e4:	460b      	mov	r3, r1
 80058e6:	4313      	orrs	r3, r2
 80058e8:	d056      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058f6:	d038      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80058f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058fc:	d831      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005902:	d034      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005904:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005908:	d82b      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800590a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800590e:	d01d      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005910:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005914:	d825      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d006      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800591a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005920:	e01f      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005922:	bf00      	nop
 8005924:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005928:	4ba2      	ldr	r3, [pc, #648]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	4aa1      	ldr	r2, [pc, #644]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800592e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005934:	e01c      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593a:	3308      	adds	r3, #8
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fb1c 	bl	8006f7c <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800594a:	e011      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005950:	3328      	adds	r3, #40	@ 0x28
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f001 fbc3 	bl	80070e0 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005960:	e006      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800596e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005978:	4b8e      	ldr	r3, [pc, #568]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800597a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005984:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005988:	4a8a      	ldr	r2, [pc, #552]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800598a:	430b      	orrs	r3, r1
 800598c:	6593      	str	r3, [r2, #88]	@ 0x58
 800598e:	e003      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80059b2:	460b      	mov	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	d03a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059be:	2b30      	cmp	r3, #48	@ 0x30
 80059c0:	d01f      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059c2:	2b30      	cmp	r3, #48	@ 0x30
 80059c4:	d819      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d00c      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d815      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d019      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d111      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d6:	4b77      	ldr	r3, [pc, #476]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	4a76      	ldr	r2, [pc, #472]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059e2:	e011      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	3308      	adds	r3, #8
 80059ea:	2102      	movs	r1, #2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fac5 	bl	8006f7c <RCCEx_PLL2_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059f8:	e006      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a00:	e002      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a10:	4b68      	ldr	r3, [pc, #416]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a14:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1e:	4a65      	ldr	r2, [pc, #404]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a24:	e003      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	d051      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a58:	d035      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a5e:	d82e      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a64:	d031      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a6a:	d828      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a70:	d01a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a76:	d822      	bhi.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a80:	d007      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a82:	e01c      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a84:	4b4b      	ldr	r3, [pc, #300]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	4a4a      	ldr	r2, [pc, #296]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a90:	e01c      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	3308      	adds	r3, #8
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 fa6e 	bl	8006f7c <RCCEx_PLL2_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aa6:	e011      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aac:	3328      	adds	r3, #40	@ 0x28
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 fb15 	bl	80070e0 <RCCEx_PLL3_Config>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005abc:	e006      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ac4:	e002      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ad4:	4b37      	ldr	r3, [pc, #220]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae2:	4a34      	ldr	r2, [pc, #208]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005afe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	d056      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b1c:	d033      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b22:	d82c      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b28:	d02f      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b2e:	d826      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b34:	d02b      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b36:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b3a:	d820      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b40:	d012      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b46:	d81a      	bhi.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d022      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b50:	d115      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b56:	3308      	adds	r3, #8
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 fa0e 	bl	8006f7c <RCCEx_PLL2_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b66:	e015      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6c:	3328      	adds	r3, #40	@ 0x28
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 fab5 	bl	80070e0 <RCCEx_PLL3_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b7c:	e00a      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b84:	e006      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b86:	bf00      	nop
 8005b88:	e004      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b8a:	bf00      	nop
 8005b8c:	e002      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b8e:	bf00      	nop
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10d      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b9c:	4b05      	ldr	r3, [pc, #20]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005baa:	4a02      	ldr	r2, [pc, #8]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bac:	430b      	orrs	r3, r1
 8005bae:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bb0:	e006      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	d055      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bec:	d033      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bf2:	d82c      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf8:	d02f      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfe:	d826      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c04:	d02b      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c0a:	d820      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c10:	d012      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c16:	d81a      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d022      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c20:	d115      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	3308      	adds	r3, #8
 8005c28:	2101      	movs	r1, #1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 f9a6 	bl	8006f7c <RCCEx_PLL2_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c36:	e015      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	3328      	adds	r3, #40	@ 0x28
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 fa4d 	bl	80070e0 <RCCEx_PLL3_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c54:	e006      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c56:	bf00      	nop
 8005c58:	e004      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c5a:	bf00      	nop
 8005c5c:	e002      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e000      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c6c:	4ba3      	ldr	r3, [pc, #652]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c70:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c7c:	4a9f      	ldr	r2, [pc, #636]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	d037      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cbc:	d816      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d018      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005cc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cc6:	d111      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	4a8b      	ldr	r2, [pc, #556]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cd4:	e00f      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	3308      	adds	r3, #8
 8005cdc:	2101      	movs	r1, #1
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f94c 	bl	8006f7c <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cea:	e004      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cfe:	4b7f      	ldr	r3, [pc, #508]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0c:	4a7b      	ldr	r2, [pc, #492]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d0e:	430b      	orrs	r3, r1
 8005d10:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d039      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d81c      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d46:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d89 	.word	0x08005d89
 8005d50:	08005d5d 	.word	0x08005d5d
 8005d54:	08005d6b 	.word	0x08005d6b
 8005d58:	08005d89 	.word	0x08005d89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5c:	4b67      	ldr	r3, [pc, #412]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	4a66      	ldr	r2, [pc, #408]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d68:	e00f      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6e:	3308      	adds	r3, #8
 8005d70:	2102      	movs	r1, #2
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f902 	bl	8006f7c <RCCEx_PLL2_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d7e:	e004      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d86:	e000      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d92:	4b5a      	ldr	r3, [pc, #360]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	f023 0103 	bic.w	r1, r3, #3
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da0:	4a56      	ldr	r2, [pc, #344]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005da2:	430b      	orrs	r3, r1
 8005da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f000 809f 	beq.w	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dde:	f7fb fc2f 	bl	8001640 <HAL_GetTick>
 8005de2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005de6:	e00b      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de8:	f7fb fc2a 	bl	8001640 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b64      	cmp	r3, #100	@ 0x64
 8005df6:	d903      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dfe:	e005      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e00:	4b3f      	ldr	r3, [pc, #252]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0ed      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d179      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e14:	4b39      	ldr	r3, [pc, #228]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e16:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e20:	4053      	eors	r3, r2
 8005e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d015      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e2a:	4b34      	ldr	r3, [pc, #208]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e36:	4b31      	ldr	r3, [pc, #196]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3a:	4a30      	ldr	r2, [pc, #192]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e40:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e42:	4b2e      	ldr	r3, [pc, #184]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	4a2d      	ldr	r2, [pc, #180]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e54:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e62:	d118      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e64:	f7fb fbec 	bl	8001640 <HAL_GetTick>
 8005e68:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e6c:	e00d      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6e:	f7fb fbe7 	bl	8001640 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d903      	bls.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005e88:	e005      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0eb      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d129      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eae:	d10e      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005eb0:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ebc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ec0:	091a      	lsrs	r2, r3, #4
 8005ec2:	4b10      	ldr	r3, [pc, #64]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6113      	str	r3, [r2, #16]
 8005ecc:	e005      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ed4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005ed8:	6113      	str	r3, [r2, #16]
 8005eda:	4b08      	ldr	r3, [pc, #32]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005edc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eea:	4a04      	ldr	r2, [pc, #16]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef0:	e00e      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005efa:	e009      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005efc:	58024400 	.word	0x58024400
 8005f00:	58024800 	.word	0x58024800
 8005f04:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f002 0301 	and.w	r3, r2, #1
 8005f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f000 8089 	beq.w	8006044 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f38:	2b28      	cmp	r3, #40	@ 0x28
 8005f3a:	d86b      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	0800601d 	.word	0x0800601d
 8005f48:	08006015 	.word	0x08006015
 8005f4c:	08006015 	.word	0x08006015
 8005f50:	08006015 	.word	0x08006015
 8005f54:	08006015 	.word	0x08006015
 8005f58:	08006015 	.word	0x08006015
 8005f5c:	08006015 	.word	0x08006015
 8005f60:	08006015 	.word	0x08006015
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	08006015 	.word	0x08006015
 8005f6c:	08006015 	.word	0x08006015
 8005f70:	08006015 	.word	0x08006015
 8005f74:	08006015 	.word	0x08006015
 8005f78:	08006015 	.word	0x08006015
 8005f7c:	08006015 	.word	0x08006015
 8005f80:	08006015 	.word	0x08006015
 8005f84:	08005fff 	.word	0x08005fff
 8005f88:	08006015 	.word	0x08006015
 8005f8c:	08006015 	.word	0x08006015
 8005f90:	08006015 	.word	0x08006015
 8005f94:	08006015 	.word	0x08006015
 8005f98:	08006015 	.word	0x08006015
 8005f9c:	08006015 	.word	0x08006015
 8005fa0:	08006015 	.word	0x08006015
 8005fa4:	0800601d 	.word	0x0800601d
 8005fa8:	08006015 	.word	0x08006015
 8005fac:	08006015 	.word	0x08006015
 8005fb0:	08006015 	.word	0x08006015
 8005fb4:	08006015 	.word	0x08006015
 8005fb8:	08006015 	.word	0x08006015
 8005fbc:	08006015 	.word	0x08006015
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	0800601d 	.word	0x0800601d
 8005fc8:	08006015 	.word	0x08006015
 8005fcc:	08006015 	.word	0x08006015
 8005fd0:	08006015 	.word	0x08006015
 8005fd4:	08006015 	.word	0x08006015
 8005fd8:	08006015 	.word	0x08006015
 8005fdc:	08006015 	.word	0x08006015
 8005fe0:	08006015 	.word	0x08006015
 8005fe4:	0800601d 	.word	0x0800601d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fec:	3308      	adds	r3, #8
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 ffc3 	bl	8006f7c <RCCEx_PLL2_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ffc:	e00f      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	3328      	adds	r3, #40	@ 0x28
 8006004:	2101      	movs	r1, #1
 8006006:	4618      	mov	r0, r3
 8006008:	f001 f86a 	bl	80070e0 <RCCEx_PLL3_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006012:	e004      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800601c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006026:	4bbf      	ldr	r3, [pc, #764]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006034:	4abb      	ldr	r2, [pc, #748]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006036:	430b      	orrs	r3, r1
 8006038:	6553      	str	r3, [r2, #84]	@ 0x54
 800603a:	e003      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f002 0302 	and.w	r3, r2, #2
 8006050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800605a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d041      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800606a:	2b05      	cmp	r3, #5
 800606c:	d824      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800606e:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	080060c1 	.word	0x080060c1
 8006078:	0800608d 	.word	0x0800608d
 800607c:	080060a3 	.word	0x080060a3
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800608c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006090:	3308      	adds	r3, #8
 8006092:	2101      	movs	r1, #1
 8006094:	4618      	mov	r0, r3
 8006096:	f000 ff71 	bl	8006f7c <RCCEx_PLL2_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060a0:	e00f      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a6:	3328      	adds	r3, #40	@ 0x28
 80060a8:	2101      	movs	r1, #1
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f818 	bl	80070e0 <RCCEx_PLL3_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060b6:	e004      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060ca:	4b96      	ldr	r3, [pc, #600]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ce:	f023 0107 	bic.w	r1, r3, #7
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060d8:	4a92      	ldr	r2, [pc, #584]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80060de:	e003      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f002 0304 	and.w	r3, r2, #4
 80060f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006102:	460b      	mov	r3, r1
 8006104:	4313      	orrs	r3, r2
 8006106:	d044      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800610c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006110:	2b05      	cmp	r3, #5
 8006112:	d825      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006114:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	08006169 	.word	0x08006169
 8006120:	08006135 	.word	0x08006135
 8006124:	0800614b 	.word	0x0800614b
 8006128:	08006169 	.word	0x08006169
 800612c:	08006169 	.word	0x08006169
 8006130:	08006169 	.word	0x08006169
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006138:	3308      	adds	r3, #8
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f000 ff1d 	bl	8006f7c <RCCEx_PLL2_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006148:	e00f      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614e:	3328      	adds	r3, #40	@ 0x28
 8006150:	2101      	movs	r1, #1
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ffc4 	bl	80070e0 <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800615e:	e004      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006166:	e000      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006172:	4b6c      	ldr	r3, [pc, #432]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006176:	f023 0107 	bic.w	r1, r3, #7
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006182:	4a68      	ldr	r2, [pc, #416]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006184:	430b      	orrs	r3, r1
 8006186:	6593      	str	r3, [r2, #88]	@ 0x58
 8006188:	e003      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800618e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f002 0320 	and.w	r3, r2, #32
 800619e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061a2:	2300      	movs	r3, #0
 80061a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061ac:	460b      	mov	r3, r1
 80061ae:	4313      	orrs	r3, r2
 80061b0:	d055      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061be:	d033      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061c4:	d82c      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ca:	d02f      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d0:	d826      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061d6:	d02b      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80061d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061dc:	d820      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e2:	d012      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80061e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e8:	d81a      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d022      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80061ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061f2:	d115      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	3308      	adds	r3, #8
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 febd 	bl	8006f7c <RCCEx_PLL2_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006208:	e015      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620e:	3328      	adds	r3, #40	@ 0x28
 8006210:	2102      	movs	r1, #2
 8006212:	4618      	mov	r0, r3
 8006214:	f000 ff64 	bl	80070e0 <RCCEx_PLL3_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800621e:	e00a      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006226:	e006      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006228:	bf00      	nop
 800622a:	e004      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800622c:	bf00      	nop
 800622e:	e002      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006230:	bf00      	nop
 8006232:	e000      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10b      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800623e:	4b39      	ldr	r3, [pc, #228]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006242:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624e:	4a35      	ldr	r2, [pc, #212]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006250:	430b      	orrs	r3, r1
 8006252:	6553      	str	r3, [r2, #84]	@ 0x54
 8006254:	e003      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800626a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800626e:	2300      	movs	r3, #0
 8006270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006274:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006278:	460b      	mov	r3, r1
 800627a:	4313      	orrs	r3, r2
 800627c:	d058      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006286:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800628a:	d033      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800628c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006290:	d82c      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006296:	d02f      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629c:	d826      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800629e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062a2:	d02b      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062a8:	d820      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062ae:	d012      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062b4:	d81a      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d022      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062be:	d115      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c4:	3308      	adds	r3, #8
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fe57 	bl	8006f7c <RCCEx_PLL2_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062d4:	e015      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062da:	3328      	adds	r3, #40	@ 0x28
 80062dc:	2102      	movs	r1, #2
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fefe 	bl	80070e0 <RCCEx_PLL3_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062ea:	e00a      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062f2:	e006      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062f4:	bf00      	nop
 80062f6:	e004      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062f8:	bf00      	nop
 80062fa:	e002      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10e      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800630a:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800631a:	4a02      	ldr	r2, [pc, #8]	@ (8006324 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800631c:	430b      	orrs	r3, r1
 800631e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006320:	e006      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006322:	bf00      	nop
 8006324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800633c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006346:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800634a:	460b      	mov	r3, r1
 800634c:	4313      	orrs	r3, r2
 800634e:	d055      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006358:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800635c:	d033      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800635e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006362:	d82c      	bhi.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006368:	d02f      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800636a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800636e:	d826      	bhi.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006370:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006374:	d02b      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006376:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800637a:	d820      	bhi.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800637c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006380:	d012      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006386:	d81a      	bhi.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d022      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800638c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006390:	d115      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006396:	3308      	adds	r3, #8
 8006398:	2100      	movs	r1, #0
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fdee 	bl	8006f7c <RCCEx_PLL2_Config>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063a6:	e015      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ac:	3328      	adds	r3, #40	@ 0x28
 80063ae:	2102      	movs	r1, #2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fe95 	bl	80070e0 <RCCEx_PLL3_Config>
 80063b6:	4603      	mov	r3, r0
 80063b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063bc:	e00a      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063c4:	e006      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063c6:	bf00      	nop
 80063c8:	e004      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063ca:	bf00      	nop
 80063cc:	e002      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063ce:	bf00      	nop
 80063d0:	e000      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10b      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063dc:	4ba1      	ldr	r3, [pc, #644]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063ec:	4a9d      	ldr	r2, [pc, #628]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063ee:	430b      	orrs	r3, r1
 80063f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80063f2:	e003      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80063fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f002 0308 	and.w	r3, r2, #8
 8006408:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006412:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d01e      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006428:	d10c      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642e:	3328      	adds	r3, #40	@ 0x28
 8006430:	2102      	movs	r1, #2
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fe54 	bl	80070e0 <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006444:	4b87      	ldr	r3, [pc, #540]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006448:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006454:	4a83      	ldr	r2, [pc, #524]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006456:	430b      	orrs	r3, r1
 8006458:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	f002 0310 	and.w	r3, r2, #16
 8006466:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800646a:	2300      	movs	r3, #0
 800646c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006470:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006474:	460b      	mov	r3, r1
 8006476:	4313      	orrs	r3, r2
 8006478:	d01e      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006486:	d10c      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648c:	3328      	adds	r3, #40	@ 0x28
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fe25 	bl	80070e0 <RCCEx_PLL3_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064a2:	4b70      	ldr	r3, [pc, #448]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064b2:	4a6c      	ldr	r2, [pc, #432]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b4:	430b      	orrs	r3, r1
 80064b6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80064c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064d2:	460b      	mov	r3, r1
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d03e      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80064e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064e4:	d022      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80064e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ea:	d81b      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80064f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f4:	d00b      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80064f6:	e015      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fc:	3308      	adds	r3, #8
 80064fe:	2100      	movs	r1, #0
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fd3b 	bl	8006f7c <RCCEx_PLL2_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800650c:	e00f      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	3328      	adds	r3, #40	@ 0x28
 8006514:	2102      	movs	r1, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fde2 	bl	80070e0 <RCCEx_PLL3_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006522:	e004      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800652c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006536:	4b4b      	ldr	r3, [pc, #300]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006546:	4a47      	ldr	r2, [pc, #284]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006548:	430b      	orrs	r3, r1
 800654a:	6593      	str	r3, [r2, #88]	@ 0x58
 800654c:	e003      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006562:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006564:	2300      	movs	r3, #0
 8006566:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006568:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800656c:	460b      	mov	r3, r1
 800656e:	4313      	orrs	r3, r2
 8006570:	d03b      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800657e:	d01f      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006580:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006584:	d818      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800658a:	d003      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800658c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006590:	d007      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006592:	e011      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006594:	4b33      	ldr	r3, [pc, #204]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006598:	4a32      	ldr	r2, [pc, #200]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800659a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800659e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065a0:	e00f      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a6:	3328      	adds	r3, #40	@ 0x28
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fd98 	bl	80070e0 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80065b6:	e004      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065ca:	4b26      	ldr	r3, [pc, #152]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065da:	4a22      	ldr	r2, [pc, #136]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	6553      	str	r3, [r2, #84]	@ 0x54
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80065f8:	2300      	movs	r3, #0
 80065fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80065fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d034      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006614:	d007      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006616:	e011      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006618:	4b12      	ldr	r3, [pc, #72]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	4a11      	ldr	r2, [pc, #68]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800661e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006624:	e00e      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	3308      	adds	r3, #8
 800662c:	2102      	movs	r1, #2
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fca4 	bl	8006f7c <RCCEx_PLL2_Config>
 8006634:	4603      	mov	r3, r0
 8006636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800663a:	e003      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10d      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800664c:	4b05      	ldr	r3, [pc, #20]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800664e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006650:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665a:	4a02      	ldr	r2, [pc, #8]	@ (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800665c:	430b      	orrs	r3, r1
 800665e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006660:	e006      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006662:	bf00      	nop
 8006664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800666c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006678:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800667c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800667e:	2300      	movs	r3, #0
 8006680:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006682:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006686:	460b      	mov	r3, r1
 8006688:	4313      	orrs	r3, r2
 800668a:	d00c      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	3328      	adds	r3, #40	@ 0x28
 8006692:	2102      	movs	r1, #2
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fd23 	bl	80070e0 <RCCEx_PLL3_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80066b4:	2300      	movs	r3, #0
 80066b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80066b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80066bc:	460b      	mov	r3, r1
 80066be:	4313      	orrs	r3, r2
 80066c0:	d038      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066ce:	d018      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80066d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d4:	d811      	bhi.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066da:	d014      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e0:	d80b      	bhi.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d011      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80066e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ea:	d106      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ec:	4bc3      	ldr	r3, [pc, #780]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	4ac2      	ldr	r2, [pc, #776]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80066f8:	e008      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006700:	e004      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800670a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006714:	4bb9      	ldr	r3, [pc, #740]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006724:	4ab5      	ldr	r2, [pc, #724]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006726:	430b      	orrs	r3, r1
 8006728:	6553      	str	r3, [r2, #84]	@ 0x54
 800672a:	e003      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006740:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006742:	2300      	movs	r3, #0
 8006744:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006746:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800674a:	460b      	mov	r3, r1
 800674c:	4313      	orrs	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006750:	4baa      	ldr	r3, [pc, #680]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006754:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675e:	4aa7      	ldr	r2, [pc, #668]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006760:	430b      	orrs	r3, r1
 8006762:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006770:	653b      	str	r3, [r7, #80]	@ 0x50
 8006772:	2300      	movs	r3, #0
 8006774:	657b      	str	r3, [r7, #84]	@ 0x54
 8006776:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d00a      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006780:	4b9e      	ldr	r3, [pc, #632]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006790:	4a9a      	ldr	r2, [pc, #616]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006792:	430b      	orrs	r3, r1
 8006794:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067a4:	2300      	movs	r3, #0
 80067a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067b2:	4b92      	ldr	r3, [pc, #584]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80067ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c0:	4a8e      	ldr	r2, [pc, #568]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c2:	430b      	orrs	r3, r1
 80067c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80067d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80067d4:	2300      	movs	r3, #0
 80067d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067dc:	460b      	mov	r3, r1
 80067de:	4313      	orrs	r3, r2
 80067e0:	d00e      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067e2:	4b86      	ldr	r3, [pc, #536]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	4a85      	ldr	r2, [pc, #532]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067ec:	6113      	str	r3, [r2, #16]
 80067ee:	4b83      	ldr	r3, [pc, #524]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f0:	6919      	ldr	r1, [r3, #16]
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80067fa:	4a80      	ldr	r2, [pc, #512]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800680c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800680e:	2300      	movs	r3, #0
 8006810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006812:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006816:	460b      	mov	r3, r1
 8006818:	4313      	orrs	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800681c:	4b77      	ldr	r3, [pc, #476]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800681e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006820:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	4a74      	ldr	r2, [pc, #464]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800682c:	430b      	orrs	r3, r1
 800682e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800683c:	633b      	str	r3, [r7, #48]	@ 0x30
 800683e:	2300      	movs	r3, #0
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
 8006842:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006846:	460b      	mov	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	d00a      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800684c:	4b6b      	ldr	r3, [pc, #428]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800685c:	4a67      	ldr	r2, [pc, #412]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800685e:	430b      	orrs	r3, r1
 8006860:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	2100      	movs	r1, #0
 800686c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006874:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d011      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	3308      	adds	r3, #8
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb78 	bl	8006f7c <RCCEx_PLL2_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800689e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	2100      	movs	r1, #0
 80068ac:	6239      	str	r1, [r7, #32]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068b8:	460b      	mov	r3, r1
 80068ba:	4313      	orrs	r3, r2
 80068bc:	d011      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c2:	3308      	adds	r3, #8
 80068c4:	2101      	movs	r1, #1
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fb58 	bl	8006f7c <RCCEx_PLL2_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	2100      	movs	r1, #0
 80068ec:	61b9      	str	r1, [r7, #24]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068f8:	460b      	mov	r3, r1
 80068fa:	4313      	orrs	r3, r2
 80068fc:	d011      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	3308      	adds	r3, #8
 8006904:	2102      	movs	r1, #2
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fb38 	bl	8006f7c <RCCEx_PLL2_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800691e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	2100      	movs	r1, #0
 800692c:	6139      	str	r1, [r7, #16]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006938:	460b      	mov	r3, r1
 800693a:	4313      	orrs	r3, r2
 800693c:	d011      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006942:	3328      	adds	r3, #40	@ 0x28
 8006944:	2100      	movs	r1, #0
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fbca 	bl	80070e0 <RCCEx_PLL3_Config>
 800694c:	4603      	mov	r3, r0
 800694e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800695e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	2100      	movs	r1, #0
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006978:	460b      	mov	r3, r1
 800697a:	4313      	orrs	r3, r2
 800697c:	d011      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800697e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006982:	3328      	adds	r3, #40	@ 0x28
 8006984:	2101      	movs	r1, #1
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fbaa 	bl	80070e0 <RCCEx_PLL3_Config>
 800698c:	4603      	mov	r3, r0
 800698e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800699e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069aa:	2100      	movs	r1, #0
 80069ac:	6039      	str	r1, [r7, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069b8:	460b      	mov	r3, r1
 80069ba:	4313      	orrs	r3, r2
 80069bc:	d011      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069c2:	3328      	adds	r3, #40	@ 0x28
 80069c4:	2102      	movs	r1, #2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fb8a 	bl	80070e0 <RCCEx_PLL3_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80069e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e000      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80069f6:	46bd      	mov	sp, r7
 80069f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069fc:	58024400 	.word	0x58024400

08006a00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a04:	f7fe fd96 	bl	8005534 <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b06      	ldr	r3, [pc, #24]	@ (8006a24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4904      	ldr	r1, [pc, #16]	@ (8006a28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	f003 031f 	and.w	r3, r3, #31
 8006a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	58024400 	.word	0x58024400
 8006a28:	08009cac 	.word	0x08009cac

08006a2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	@ 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a34:	4ba1      	ldr	r3, [pc, #644]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a3e:	4b9f      	ldr	r3, [pc, #636]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a42:	0b1b      	lsrs	r3, r3, #12
 8006a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	091b      	lsrs	r3, r3, #4
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a56:	4b99      	ldr	r3, [pc, #612]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5a:	08db      	lsrs	r3, r3, #3
 8006a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8111 	beq.w	8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	f000 8083 	beq.w	8006b88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	f200 80a1 	bhi.w	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d056      	beq.n	8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a96:	e099      	b.n	8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a98:	4b88      	ldr	r3, [pc, #544]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d02d      	beq.n	8006b00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aa4:	4b85      	ldr	r3, [pc, #532]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	08db      	lsrs	r3, r3, #3
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	4a84      	ldr	r2, [pc, #528]	@ (8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	ee07 3a90 	vmov	s15, r3
 8006abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ace:	4b7b      	ldr	r3, [pc, #492]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006afe:	e087      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b12:	4b6a      	ldr	r3, [pc, #424]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b42:	e065      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b56:	4b59      	ldr	r3, [pc, #356]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b86:	e043      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b48      	ldr	r3, [pc, #288]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bca:	e021      	b.n	8006c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b37      	ldr	r3, [pc, #220]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c10:	4b2a      	ldr	r3, [pc, #168]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	0a5b      	lsrs	r3, r3, #9
 8006c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c1a:	ee07 3a90 	vmov	s15, r3
 8006c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c36:	ee17 2a90 	vmov	r2, s15
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c64:	ee17 2a90 	vmov	r2, s15
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c6c:	4b13      	ldr	r3, [pc, #76]	@ (8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c70:	0e1b      	lsrs	r3, r3, #24
 8006c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c92:	ee17 2a90 	vmov	r2, s15
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c9a:	e008      	b.n	8006cae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
}
 8006cae:	bf00      	nop
 8006cb0:	3724      	adds	r7, #36	@ 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	46000000 	.word	0x46000000
 8006cc8:	4c742400 	.word	0x4c742400
 8006ccc:	4a742400 	.word	0x4a742400
 8006cd0:	4af42400 	.word	0x4af42400

08006cd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b089      	sub	sp, #36	@ 0x24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cdc:	4ba1      	ldr	r3, [pc, #644]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006ce6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cea:	0d1b      	lsrs	r3, r3, #20
 8006cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cfe:	4b99      	ldr	r3, [pc, #612]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	08db      	lsrs	r3, r3, #3
 8006d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8111 	beq.w	8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	f000 8083 	beq.w	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	f200 80a1 	bhi.w	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d056      	beq.n	8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d3e:	e099      	b.n	8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d40:	4b88      	ldr	r3, [pc, #544]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d02d      	beq.n	8006da8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d4c:	4b85      	ldr	r3, [pc, #532]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	4a84      	ldr	r2, [pc, #528]	@ (8006f68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b7b      	ldr	r3, [pc, #492]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006da6:	e087      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dba:	4b6a      	ldr	r3, [pc, #424]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dea:	e065      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b59      	ldr	r3, [pc, #356]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e2e:	e043      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b48      	ldr	r3, [pc, #288]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e72:	e021      	b.n	8006eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b37      	ldr	r3, [pc, #220]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebc:	0a5b      	lsrs	r3, r3, #9
 8006ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ede:	ee17 2a90 	vmov	r2, s15
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	0c1b      	lsrs	r3, r3, #16
 8006eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0c:	ee17 2a90 	vmov	r2, s15
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f14:	4b13      	ldr	r3, [pc, #76]	@ (8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f18:	0e1b      	lsrs	r3, r3, #24
 8006f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3a:	ee17 2a90 	vmov	r2, s15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f42:	e008      	b.n	8006f56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	609a      	str	r2, [r3, #8]
}
 8006f56:	bf00      	nop
 8006f58:	3724      	adds	r7, #36	@ 0x24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	58024400 	.word	0x58024400
 8006f68:	03d09000 	.word	0x03d09000
 8006f6c:	46000000 	.word	0x46000000
 8006f70:	4c742400 	.word	0x4c742400
 8006f74:	4a742400 	.word	0x4a742400
 8006f78:	4af42400 	.word	0x4af42400

08006f7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f8a:	4b53      	ldr	r3, [pc, #332]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d101      	bne.n	8006f9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e099      	b.n	80070ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a4e      	ldr	r2, [pc, #312]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8006fa0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa6:	f7fa fb4b 	bl	8001640 <HAL_GetTick>
 8006faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fac:	e008      	b.n	8006fc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fae:	f7fa fb47 	bl	8001640 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d901      	bls.n	8006fc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e086      	b.n	80070ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fc0:	4b45      	ldr	r3, [pc, #276]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f0      	bne.n	8006fae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fcc:	4b42      	ldr	r3, [pc, #264]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	031b      	lsls	r3, r3, #12
 8006fda:	493f      	ldr	r1, [pc, #252]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	025b      	lsls	r3, r3, #9
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	041b      	lsls	r3, r3, #16
 8006ffe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	3b01      	subs	r3, #1
 800700a:	061b      	lsls	r3, r3, #24
 800700c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007010:	4931      	ldr	r1, [pc, #196]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007012:	4313      	orrs	r3, r2
 8007014:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007016:	4b30      	ldr	r3, [pc, #192]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	492d      	ldr	r1, [pc, #180]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007024:	4313      	orrs	r3, r2
 8007026:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007028:	4b2b      	ldr	r3, [pc, #172]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 800702a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702c:	f023 0220 	bic.w	r2, r3, #32
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	4928      	ldr	r1, [pc, #160]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007036:	4313      	orrs	r3, r2
 8007038:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800703a:	4b27      	ldr	r3, [pc, #156]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	4a26      	ldr	r2, [pc, #152]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007040:	f023 0310 	bic.w	r3, r3, #16
 8007044:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007046:	4b24      	ldr	r3, [pc, #144]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800704a:	4b24      	ldr	r3, [pc, #144]	@ (80070dc <RCCEx_PLL2_Config+0x160>)
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	69d2      	ldr	r2, [r2, #28]
 8007052:	00d2      	lsls	r2, r2, #3
 8007054:	4920      	ldr	r1, [pc, #128]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800705a:	4b1f      	ldr	r3, [pc, #124]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	4a1e      	ldr	r2, [pc, #120]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007060:	f043 0310 	orr.w	r3, r3, #16
 8007064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800706c:	4b1a      	ldr	r3, [pc, #104]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 800706e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007070:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007072:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007076:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007078:	e00f      	b.n	800709a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d106      	bne.n	800708e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007080:	4b15      	ldr	r3, [pc, #84]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	4a14      	ldr	r2, [pc, #80]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800708a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800708c:	e005      	b.n	800709a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800708e:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	4a11      	ldr	r2, [pc, #68]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 8007094:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007098:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800709a:	4b0f      	ldr	r3, [pc, #60]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a0e      	ldr	r2, [pc, #56]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 80070a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a6:	f7fa facb 	bl	8001640 <HAL_GetTick>
 80070aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070ac:	e008      	b.n	80070c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070ae:	f7fa fac7 	bl	8001640 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e006      	b.n	80070ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070c0:	4b05      	ldr	r3, [pc, #20]	@ (80070d8 <RCCEx_PLL2_Config+0x15c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	58024400 	.word	0x58024400
 80070dc:	ffff0007 	.word	0xffff0007

080070e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070ee:	4b53      	ldr	r3, [pc, #332]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d101      	bne.n	80070fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e099      	b.n	8007232 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070fe:	4b4f      	ldr	r3, [pc, #316]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a4e      	ldr	r2, [pc, #312]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800710a:	f7fa fa99 	bl	8001640 <HAL_GetTick>
 800710e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007110:	e008      	b.n	8007124 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007112:	f7fa fa95 	bl	8001640 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d901      	bls.n	8007124 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e086      	b.n	8007232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007124:	4b45      	ldr	r3, [pc, #276]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f0      	bne.n	8007112 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007130:	4b42      	ldr	r3, [pc, #264]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	051b      	lsls	r3, r3, #20
 800713e:	493f      	ldr	r1, [pc, #252]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007140:	4313      	orrs	r3, r2
 8007142:	628b      	str	r3, [r1, #40]	@ 0x28
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	3b01      	subs	r3, #1
 800714a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	3b01      	subs	r3, #1
 8007154:	025b      	lsls	r3, r3, #9
 8007156:	b29b      	uxth	r3, r3
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	3b01      	subs	r3, #1
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	3b01      	subs	r3, #1
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007174:	4931      	ldr	r1, [pc, #196]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007176:	4313      	orrs	r3, r2
 8007178:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800717a:	4b30      	ldr	r3, [pc, #192]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	492d      	ldr	r1, [pc, #180]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007188:	4313      	orrs	r3, r2
 800718a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800718c:	4b2b      	ldr	r3, [pc, #172]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	4928      	ldr	r1, [pc, #160]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 800719a:	4313      	orrs	r3, r2
 800719c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800719e:	4b27      	ldr	r3, [pc, #156]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a2:	4a26      	ldr	r2, [pc, #152]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071aa:	4b24      	ldr	r3, [pc, #144]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071ae:	4b24      	ldr	r3, [pc, #144]	@ (8007240 <RCCEx_PLL3_Config+0x160>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	69d2      	ldr	r2, [r2, #28]
 80071b6:	00d2      	lsls	r2, r2, #3
 80071b8:	4920      	ldr	r1, [pc, #128]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071be:	4b1f      	ldr	r3, [pc, #124]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c2:	4a1e      	ldr	r2, [pc, #120]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071d0:	4b1a      	ldr	r3, [pc, #104]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d4:	4a19      	ldr	r2, [pc, #100]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80071da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071dc:	e00f      	b.n	80071fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d106      	bne.n	80071f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071e4:	4b15      	ldr	r3, [pc, #84]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	4a14      	ldr	r2, [pc, #80]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071f0:	e005      	b.n	80071fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071f2:	4b12      	ldr	r3, [pc, #72]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f6:	4a11      	ldr	r2, [pc, #68]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 80071f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071fe:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a0e      	ldr	r2, [pc, #56]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800720a:	f7fa fa19 	bl	8001640 <HAL_GetTick>
 800720e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007210:	e008      	b.n	8007224 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007212:	f7fa fa15 	bl	8001640 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e006      	b.n	8007232 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007224:	4b05      	ldr	r3, [pc, #20]	@ (800723c <RCCEx_PLL3_Config+0x15c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	58024400 	.word	0x58024400
 8007240:	ffff0007 	.word	0xffff0007

08007244 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d071      	beq.n	800733a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7f9 fd52 	bl	8000d14 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b10      	cmp	r3, #16
 8007284:	d050      	beq.n	8007328 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	22ca      	movs	r2, #202	@ 0xca
 800728c:	625a      	str	r2, [r3, #36]	@ 0x24
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2253      	movs	r2, #83	@ 0x53
 8007294:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9a0 	bl	80075dc <RTC_EnterInitMode>
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d124      	bne.n	80072f0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6899      	ldr	r1, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4b24      	ldr	r3, [pc, #144]	@ (8007344 <HAL_RTC_Init+0x100>)
 80072b2:	400b      	ands	r3, r1
 80072b4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6899      	ldr	r1, [r3, #8]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	0419      	lsls	r1, r3, #16
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9ac 	bl	8007644 <RTC_ExitInitMode>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d113      	bne.n	800731e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0203 	bic.w	r2, r2, #3
 8007304:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	22ff      	movs	r2, #255	@ 0xff
 8007324:	625a      	str	r2, [r3, #36]	@ 0x24
 8007326:	e001      	b.n	800732c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	ff8fffbf 	.word	0xff8fffbf

08007348 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007348:	b590      	push	{r4, r7, lr}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d101      	bne.n	8007362 <HAL_RTC_SetTime+0x1a>
 800735e:	2302      	movs	r3, #2
 8007360:	e089      	b.n	8007476 <HAL_RTC_SetTime+0x12e>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	22ca      	movs	r2, #202	@ 0xca
 8007378:	625a      	str	r2, [r3, #36]	@ 0x24
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2253      	movs	r2, #83	@ 0x53
 8007380:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f92a 	bl	80075dc <RTC_EnterInitMode>
 8007388:	4603      	mov	r3, r0
 800738a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d161      	bne.n	8007456 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d126      	bne.n	80073e6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d102      	bne.n	80073ac <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 f985 	bl	80076c0 <RTC_ByteToBcd2>
 80073b6:	4603      	mov	r3, r0
 80073b8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	785b      	ldrb	r3, [r3, #1]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f97e 	bl	80076c0 <RTC_ByteToBcd2>
 80073c4:	4603      	mov	r3, r0
 80073c6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073c8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	789b      	ldrb	r3, [r3, #2]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f976 	bl	80076c0 <RTC_ByteToBcd2>
 80073d4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80073d6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	78db      	ldrb	r3, [r3, #3]
 80073de:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e018      	b.n	8007418 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2200      	movs	r2, #0
 80073f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007406:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800740c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	78db      	ldrb	r3, [r3, #3]
 8007412:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	6979      	ldr	r1, [r7, #20]
 800741e:	4b18      	ldr	r3, [pc, #96]	@ (8007480 <HAL_RTC_SetTime+0x138>)
 8007420:	400b      	ands	r3, r1
 8007422:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007432:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6899      	ldr	r1, [r3, #8]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	431a      	orrs	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f8f9 	bl	8007644 <RTC_ExitInitMode>
 8007452:	4603      	mov	r3, r0
 8007454:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	22ff      	movs	r2, #255	@ 0xff
 800745c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007474:	7cfb      	ldrb	r3, [r7, #19]
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	bd90      	pop	{r4, r7, pc}
 800747e:	bf00      	nop
 8007480:	007f7f7f 	.word	0x007f7f7f

08007484 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007484:	b590      	push	{r4, r7, lr}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_RTC_SetDate+0x1a>
 800749a:	2302      	movs	r3, #2
 800749c:	e073      	b.n	8007586 <HAL_RTC_SetDate+0x102>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2202      	movs	r2, #2
 80074aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10e      	bne.n	80074d2 <HAL_RTC_SetDate+0x4e>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	f003 0310 	and.w	r3, r3, #16
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	f023 0310 	bic.w	r3, r3, #16
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	330a      	adds	r3, #10
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d11c      	bne.n	8007512 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	78db      	ldrb	r3, [r3, #3]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f8ef 	bl	80076c0 <RTC_ByteToBcd2>
 80074e2:	4603      	mov	r3, r0
 80074e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	785b      	ldrb	r3, [r3, #1]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f8e8 	bl	80076c0 <RTC_ByteToBcd2>
 80074f0:	4603      	mov	r3, r0
 80074f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	789b      	ldrb	r3, [r3, #2]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f8e0 	bl	80076c0 <RTC_ByteToBcd2>
 8007500:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007502:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]
 8007510:	e00e      	b.n	8007530 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	78db      	ldrb	r3, [r3, #3]
 8007516:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800751e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007524:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	22ca      	movs	r2, #202	@ 0xca
 8007536:	625a      	str	r2, [r3, #36]	@ 0x24
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2253      	movs	r2, #83	@ 0x53
 800753e:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f84b 	bl	80075dc <RTC_EnterInitMode>
 8007546:	4603      	mov	r3, r0
 8007548:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800754a:	7cfb      	ldrb	r3, [r7, #19]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	6979      	ldr	r1, [r7, #20]
 8007556:	4b0e      	ldr	r3, [pc, #56]	@ (8007590 <HAL_RTC_SetDate+0x10c>)
 8007558:	400b      	ands	r3, r1
 800755a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f871 	bl	8007644 <RTC_ExitInitMode>
 8007562:	4603      	mov	r3, r0
 8007564:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	22ff      	movs	r2, #255	@ 0xff
 800756c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800756e:	7cfb      	ldrb	r3, [r7, #19]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007584:	7cfb      	ldrb	r3, [r7, #19]


}
 8007586:	4618      	mov	r0, r3
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	bd90      	pop	{r4, r7, pc}
 800758e:	bf00      	nop
 8007590:	00ffff3f 	.word	0x00ffff3f

08007594 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a0d      	ldr	r2, [pc, #52]	@ (80075d8 <HAL_RTC_WaitForSynchro+0x44>)
 80075a2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80075a4:	f7fa f84c 	bl	8001640 <HAL_GetTick>
 80075a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075aa:	e009      	b.n	80075c0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075ac:	f7fa f848 	bl	8001640 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075ba:	d901      	bls.n	80075c0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e007      	b.n	80075d0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f003 0320 	and.w	r3, r3, #32
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0ee      	beq.n	80075ac <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	0003ff5f 	.word	0x0003ff5f

080075dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d120      	bne.n	8007638 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f04f 32ff 	mov.w	r2, #4294967295
 80075fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007600:	f7fa f81e 	bl	8001640 <HAL_GetTick>
 8007604:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007606:	e00d      	b.n	8007624 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007608:	f7fa f81a 	bl	8001640 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007616:	d905      	bls.n	8007624 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2203      	movs	r2, #3
 8007620:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762e:	2b00      	cmp	r3, #0
 8007630:	d102      	bne.n	8007638 <RTC_EnterInitMode+0x5c>
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d1e7      	bne.n	8007608 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007650:	4b1a      	ldr	r3, [pc, #104]	@ (80076bc <RTC_ExitInitMode+0x78>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a19      	ldr	r2, [pc, #100]	@ (80076bc <RTC_ExitInitMode+0x78>)
 8007656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800765a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800765c:	4b17      	ldr	r3, [pc, #92]	@ (80076bc <RTC_ExitInitMode+0x78>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0320 	and.w	r3, r3, #32
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff ff93 	bl	8007594 <HAL_RTC_WaitForSynchro>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01e      	beq.n	80076b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2203      	movs	r2, #3
 8007678:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	73fb      	strb	r3, [r7, #15]
 8007680:	e017      	b.n	80076b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007682:	4b0e      	ldr	r3, [pc, #56]	@ (80076bc <RTC_ExitInitMode+0x78>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	4a0d      	ldr	r2, [pc, #52]	@ (80076bc <RTC_ExitInitMode+0x78>)
 8007688:	f023 0320 	bic.w	r3, r3, #32
 800768c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ff80 	bl	8007594 <HAL_RTC_WaitForSynchro>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2203      	movs	r2, #3
 800769e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80076a6:	4b05      	ldr	r3, [pc, #20]	@ (80076bc <RTC_ExitInitMode+0x78>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	4a04      	ldr	r2, [pc, #16]	@ (80076bc <RTC_ExitInitMode+0x78>)
 80076ac:	f043 0320 	orr.w	r3, r3, #32
 80076b0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	58004000 	.word	0x58004000

080076c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80076d2:	e005      	b.n	80076e0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80076da:	7afb      	ldrb	r3, [r7, #11]
 80076dc:	3b0a      	subs	r3, #10
 80076de:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	d8f6      	bhi.n	80076d4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	b2db      	uxtb	r3, r3
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e10f      	b.n	8007932 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a87      	ldr	r2, [pc, #540]	@ (800793c <HAL_SPI_Init+0x23c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00f      	beq.n	8007742 <HAL_SPI_Init+0x42>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a86      	ldr	r2, [pc, #536]	@ (8007940 <HAL_SPI_Init+0x240>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00a      	beq.n	8007742 <HAL_SPI_Init+0x42>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a84      	ldr	r2, [pc, #528]	@ (8007944 <HAL_SPI_Init+0x244>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d005      	beq.n	8007742 <HAL_SPI_Init+0x42>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b0f      	cmp	r3, #15
 800773c:	d901      	bls.n	8007742 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e0f7      	b.n	8007932 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fdcc 	bl	80082e0 <SPI_GetPacketSize>
 8007748:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a7b      	ldr	r2, [pc, #492]	@ (800793c <HAL_SPI_Init+0x23c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00c      	beq.n	800776e <HAL_SPI_Init+0x6e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a79      	ldr	r2, [pc, #484]	@ (8007940 <HAL_SPI_Init+0x240>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <HAL_SPI_Init+0x6e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a78      	ldr	r2, [pc, #480]	@ (8007944 <HAL_SPI_Init+0x244>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d002      	beq.n	800776e <HAL_SPI_Init+0x6e>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b08      	cmp	r3, #8
 800776c:	d811      	bhi.n	8007792 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007772:	4a72      	ldr	r2, [pc, #456]	@ (800793c <HAL_SPI_Init+0x23c>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a70      	ldr	r2, [pc, #448]	@ (8007940 <HAL_SPI_Init+0x240>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_SPI_Init+0x8c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a6f      	ldr	r2, [pc, #444]	@ (8007944 <HAL_SPI_Init+0x244>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d104      	bne.n	8007796 <HAL_SPI_Init+0x96>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b10      	cmp	r3, #16
 8007790:	d901      	bls.n	8007796 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e0cd      	b.n	8007932 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7f9 fb92 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80077d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077dc:	d119      	bne.n	8007812 <HAL_SPI_Init+0x112>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077e6:	d103      	bne.n	80077f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10c      	bne.n	8007812 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007800:	d107      	bne.n	8007812 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007810:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00f      	beq.n	800783e <HAL_SPI_Init+0x13e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b06      	cmp	r3, #6
 8007824:	d90b      	bls.n	800783e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	e007      	b.n	800784e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800784c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69da      	ldr	r2, [r3, #28]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	431a      	orrs	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	ea42 0103 	orr.w	r1, r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ae:	ea42 0103 	orr.w	r1, r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d113      	bne.n	80078ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80078ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40013000 	.word	0x40013000
 8007940:	40003800 	.word	0x40003800
 8007944:	40003c00 	.word	0x40003c00

08007948 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3320      	adds	r3, #32
 800795e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007960:	f7f9 fe6e 	bl	8001640 <HAL_GetTick>
 8007964:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b01      	cmp	r3, #1
 8007970:	d001      	beq.n	8007976 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007972:	2302      	movs	r3, #2
 8007974:	e1d1      	b.n	8007d1a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_SPI_Transmit+0x3a>
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e1c9      	b.n	8007d1a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_SPI_Transmit+0x4c>
 8007990:	2302      	movs	r3, #2
 8007992:	e1c2      	b.n	8007d1a <HAL_SPI_Transmit+0x3d2>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2203      	movs	r2, #3
 80079a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	88fa      	ldrh	r2, [r7, #6]
 80079b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80079ec:	d108      	bne.n	8007a00 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e009      	b.n	8007a14 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007a12:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	4b96      	ldr	r3, [pc, #600]	@ (8007c74 <HAL_SPI_Transmit+0x32c>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	88f9      	ldrh	r1, [r7, #6]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a40:	d107      	bne.n	8007a52 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	2b0f      	cmp	r3, #15
 8007a58:	d947      	bls.n	8007aea <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a5a:	e03f      	b.n	8007adc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d114      	bne.n	8007a94 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007a92:	e023      	b.n	8007adc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a94:	f7f9 fdd4 	bl	8001640 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d803      	bhi.n	8007aac <HAL_SPI_Transmit+0x164>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d102      	bne.n	8007ab2 <HAL_SPI_Transmit+0x16a>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d114      	bne.n	8007adc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fb46 	bl	8008144 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007abe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e11e      	b.n	8007d1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1b9      	bne.n	8007a5c <HAL_SPI_Transmit+0x114>
 8007ae8:	e0f1      	b.n	8007cce <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b07      	cmp	r3, #7
 8007af0:	f240 80e6 	bls.w	8007cc0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007af4:	e05d      	b.n	8007bb2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d132      	bne.n	8007b6a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d918      	bls.n	8007b42 <HAL_SPI_Transmit+0x1fa>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d014      	beq.n	8007b42 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6812      	ldr	r2, [r2, #0]
 8007b22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b28:	1d1a      	adds	r2, r3, #4
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b02      	subs	r3, #2
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007b40:	e037      	b.n	8007bb2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b46:	881a      	ldrh	r2, [r3, #0]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b50:	1c9a      	adds	r2, r3, #2
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007b68:	e023      	b.n	8007bb2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b6a:	f7f9 fd69 	bl	8001640 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d803      	bhi.n	8007b82 <HAL_SPI_Transmit+0x23a>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d102      	bne.n	8007b88 <HAL_SPI_Transmit+0x240>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d114      	bne.n	8007bb2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fadb 	bl	8008144 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e0b3      	b.n	8007d1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d19b      	bne.n	8007af6 <HAL_SPI_Transmit+0x1ae>
 8007bbe:	e086      	b.n	8007cce <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d154      	bne.n	8007c78 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d918      	bls.n	8007c0c <HAL_SPI_Transmit+0x2c4>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bde:	2b40      	cmp	r3, #64	@ 0x40
 8007be0:	d914      	bls.n	8007c0c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b04      	subs	r3, #4
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c0a:	e059      	b.n	8007cc0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d917      	bls.n	8007c48 <HAL_SPI_Transmit+0x300>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d013      	beq.n	8007c48 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c24:	881a      	ldrh	r2, [r3, #0]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c2e:	1c9a      	adds	r2, r3, #2
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b02      	subs	r3, #2
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c46:	e03b      	b.n	8007cc0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3320      	adds	r3, #32
 8007c52:	7812      	ldrb	r2, [r2, #0]
 8007c54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007c72:	e025      	b.n	8007cc0 <HAL_SPI_Transmit+0x378>
 8007c74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c78:	f7f9 fce2 	bl	8001640 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d803      	bhi.n	8007c90 <HAL_SPI_Transmit+0x348>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8e:	d102      	bne.n	8007c96 <HAL_SPI_Transmit+0x34e>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d114      	bne.n	8007cc0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fa54 	bl	8008144 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e02c      	b.n	8007d1a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f47f af79 	bne.w	8007bc0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2108      	movs	r1, #8
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fad3 	bl	8008284 <SPI_WaitOnFlagUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cea:	f043 0220 	orr.w	r2, r3, #32
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fa25 	bl	8008144 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007d18:	2300      	movs	r3, #0
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop

08007d24 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	4013      	ands	r3, r2
 8007d42:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007d56:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3330      	adds	r3, #48	@ 0x30
 8007d5e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d010      	beq.n	8007d8c <HAL_SPI_IRQHandler+0x68>
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d82:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f9b9 	bl	80080fc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007d8a:	e192      	b.n	80080b2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d113      	bne.n	8007dbe <HAL_SPI_IRQHandler+0x9a>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10e      	bne.n	8007dbe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
    handled = 1UL;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10f      	bne.n	8007de8 <HAL_SPI_IRQHandler+0xc4>
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d105      	bne.n	8007de8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
    handled = 1UL;
 8007de4:	2301      	movs	r3, #1
 8007de6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10f      	bne.n	8007e12 <HAL_SPI_IRQHandler+0xee>
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
    handled = 1UL;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f040 8147 	bne.w	80080a8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 808b 	beq.w	8007f3c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0208 	orr.w	r2, r2, #8
 8007e34:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	699a      	ldr	r2, [r3, #24]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f042 0210 	orr.w	r2, r2, #16
 8007e44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	699a      	ldr	r2, [r3, #24]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e54:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	691a      	ldr	r2, [r3, #16]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0208 	bic.w	r2, r2, #8
 8007e64:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d13d      	bne.n	8007ef0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007e74:	e036      	b.n	8007ee4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d90b      	bls.n	8007e96 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e88:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	665a      	str	r2, [r3, #100]	@ 0x64
 8007e94:	e01d      	b.n	8007ed2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b07      	cmp	r3, #7
 8007e9c:	d90b      	bls.n	8007eb6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	8812      	ldrh	r2, [r2, #0]
 8007ea6:	b292      	uxth	r2, r2
 8007ea8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eae:	1c9a      	adds	r2, r3, #2
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	665a      	str	r2, [r3, #100]	@ 0x64
 8007eb4:	e00d      	b.n	8007ed2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ec2:	7812      	ldrb	r2, [r2, #0]
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1c2      	bne.n	8007e76 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f927 	bl	8008144 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f8ed 	bl	80080e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f0e:	e0d0      	b.n	80080b2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007f10:	7cfb      	ldrb	r3, [r7, #19]
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d103      	bne.n	8007f1e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8dc 	bl	80080d4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007f1c:	e0c6      	b.n	80080ac <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007f1e:	7cfb      	ldrb	r3, [r7, #19]
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d103      	bne.n	8007f2c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f8cb 	bl	80080c0 <HAL_SPI_RxCpltCallback>
    return;
 8007f2a:	e0bf      	b.n	80080ac <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007f2c:	7cfb      	ldrb	r3, [r7, #19]
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	f040 80bc 	bne.w	80080ac <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fde9 	bl	8009b0c <HAL_SPI_TxCpltCallback>
    return;
 8007f3a:	e0b7      	b.n	80080ac <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 80b5 	beq.w	80080b2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00f      	beq.n	8007f72 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f58:	f043 0204 	orr.w	r2, r3, #4
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f70:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00f      	beq.n	8007f9c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f82:	f043 0201 	orr.w	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f9a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fac:	f043 0208 	orr.w	r2, r3, #8
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699a      	ldr	r2, [r3, #24]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fc4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 0320 	and.w	r3, r3, #32
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00f      	beq.n	8007ff0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0220 	orr.w	r2, r2, #32
 8007fee:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d05a      	beq.n	80080b0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0201 	bic.w	r2, r2, #1
 8008008:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6919      	ldr	r1, [r3, #16]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	4b28      	ldr	r3, [pc, #160]	@ (80080b8 <HAL_SPI_IRQHandler+0x394>)
 8008016:	400b      	ands	r3, r1
 8008018:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008020:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008024:	d138      	bne.n	8008098 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008034:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d013      	beq.n	8008066 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008042:	4a1e      	ldr	r2, [pc, #120]	@ (80080bc <HAL_SPI_IRQHandler+0x398>)
 8008044:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800804a:	4618      	mov	r0, r3
 800804c:	f7f9 ffb4 	bl	8001fb8 <HAL_DMA_Abort_IT>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800805c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800806a:	2b00      	cmp	r3, #0
 800806c:	d020      	beq.n	80080b0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008072:	4a12      	ldr	r2, [pc, #72]	@ (80080bc <HAL_SPI_IRQHandler+0x398>)
 8008074:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800807a:	4618      	mov	r0, r3
 800807c:	f7f9 ff9c 	bl	8001fb8 <HAL_DMA_Abort_IT>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d014      	beq.n	80080b0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008096:	e00b      	b.n	80080b0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f821 	bl	80080e8 <HAL_SPI_ErrorCallback>
    return;
 80080a6:	e003      	b.n	80080b0 <HAL_SPI_IRQHandler+0x38c>
    return;
 80080a8:	bf00      	nop
 80080aa:	e002      	b.n	80080b2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80080ac:	bf00      	nop
 80080ae:	e000      	b.n	80080b2 <HAL_SPI_IRQHandler+0x38e>
    return;
 80080b0:	bf00      	nop
  }
}
 80080b2:	3728      	adds	r7, #40	@ 0x28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	fffffc94 	.word	0xfffffc94
 80080bc:	08008111 	.word	0x08008111

080080c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff ffd6 	bl	80080e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0208 	orr.w	r2, r2, #8
 8008162:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699a      	ldr	r2, [r3, #24]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0210 	orr.w	r2, r2, #16
 8008172:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0201 	bic.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6919      	ldr	r1, [r3, #16]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b3c      	ldr	r3, [pc, #240]	@ (8008280 <SPI_CloseTransfer+0x13c>)
 8008190:	400b      	ands	r3, r1
 8008192:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80081a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d014      	beq.n	80081da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00f      	beq.n	80081da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0220 	orr.w	r2, r2, #32
 80081d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d014      	beq.n	8008210 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00f      	beq.n	8008210 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081f6:	f043 0204 	orr.w	r2, r3, #4
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800820e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00f      	beq.n	800823a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008220:	f043 0201 	orr.w	r2, r3, #1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008238:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00f      	beq.n	8008264 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800824a:	f043 0208 	orr.w	r2, r3, #8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008262:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	fffffc90 	.word	0xfffffc90

08008284 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008294:	e010      	b.n	80082b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008296:	f7f9 f9d3 	bl	8001640 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d803      	bhi.n	80082ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d102      	bne.n	80082b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e00f      	b.n	80082d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4013      	ands	r3, r2
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	bf0c      	ite	eq
 80082c8:	2301      	moveq	r3, #1
 80082ca:	2300      	movne	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	461a      	mov	r2, r3
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d0df      	beq.n	8008296 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	3307      	adds	r3, #7
 80082fe:	08db      	lsrs	r3, r3, #3
 8008300:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	fb02 f303 	mul.w	r3, r2, r3
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e042      	b.n	80083ae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800832e:	2b00      	cmp	r3, #0
 8008330:	d106      	bne.n	8008340 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7f8 ffb8 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2224      	movs	r2, #36	@ 0x24
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fd91 	bl	8008e88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f826 	bl	80083b8 <UART_SetConfig>
 800836c:	4603      	mov	r3, r0
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e01b      	b.n	80083ae <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008384:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008394:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0201 	orr.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fe10 	bl	8008fcc <UART_CheckIdleState>
 80083ac:	4603      	mov	r3, r0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083bc:	b092      	sub	sp, #72	@ 0x48
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	431a      	orrs	r2, r3
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	4313      	orrs	r3, r2
 80083de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4bbe      	ldr	r3, [pc, #760]	@ (80086e0 <UART_SetConfig+0x328>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	6812      	ldr	r2, [r2, #0]
 80083ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083f0:	430b      	orrs	r3, r1
 80083f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4ab3      	ldr	r2, [pc, #716]	@ (80086e4 <UART_SetConfig+0x32c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008420:	4313      	orrs	r3, r2
 8008422:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	4baf      	ldr	r3, [pc, #700]	@ (80086e8 <UART_SetConfig+0x330>)
 800842c:	4013      	ands	r3, r2
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008434:	430b      	orrs	r3, r1
 8008436:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843e:	f023 010f 	bic.w	r1, r3, #15
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4aa6      	ldr	r2, [pc, #664]	@ (80086ec <UART_SetConfig+0x334>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d177      	bne.n	8008548 <UART_SetConfig+0x190>
 8008458:	4ba5      	ldr	r3, [pc, #660]	@ (80086f0 <UART_SetConfig+0x338>)
 800845a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008460:	2b28      	cmp	r3, #40	@ 0x28
 8008462:	d86d      	bhi.n	8008540 <UART_SetConfig+0x188>
 8008464:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <UART_SetConfig+0xb4>)
 8008466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846a:	bf00      	nop
 800846c:	08008511 	.word	0x08008511
 8008470:	08008541 	.word	0x08008541
 8008474:	08008541 	.word	0x08008541
 8008478:	08008541 	.word	0x08008541
 800847c:	08008541 	.word	0x08008541
 8008480:	08008541 	.word	0x08008541
 8008484:	08008541 	.word	0x08008541
 8008488:	08008541 	.word	0x08008541
 800848c:	08008519 	.word	0x08008519
 8008490:	08008541 	.word	0x08008541
 8008494:	08008541 	.word	0x08008541
 8008498:	08008541 	.word	0x08008541
 800849c:	08008541 	.word	0x08008541
 80084a0:	08008541 	.word	0x08008541
 80084a4:	08008541 	.word	0x08008541
 80084a8:	08008541 	.word	0x08008541
 80084ac:	08008521 	.word	0x08008521
 80084b0:	08008541 	.word	0x08008541
 80084b4:	08008541 	.word	0x08008541
 80084b8:	08008541 	.word	0x08008541
 80084bc:	08008541 	.word	0x08008541
 80084c0:	08008541 	.word	0x08008541
 80084c4:	08008541 	.word	0x08008541
 80084c8:	08008541 	.word	0x08008541
 80084cc:	08008529 	.word	0x08008529
 80084d0:	08008541 	.word	0x08008541
 80084d4:	08008541 	.word	0x08008541
 80084d8:	08008541 	.word	0x08008541
 80084dc:	08008541 	.word	0x08008541
 80084e0:	08008541 	.word	0x08008541
 80084e4:	08008541 	.word	0x08008541
 80084e8:	08008541 	.word	0x08008541
 80084ec:	08008531 	.word	0x08008531
 80084f0:	08008541 	.word	0x08008541
 80084f4:	08008541 	.word	0x08008541
 80084f8:	08008541 	.word	0x08008541
 80084fc:	08008541 	.word	0x08008541
 8008500:	08008541 	.word	0x08008541
 8008504:	08008541 	.word	0x08008541
 8008508:	08008541 	.word	0x08008541
 800850c:	08008539 	.word	0x08008539
 8008510:	2301      	movs	r3, #1
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e222      	b.n	800895e <UART_SetConfig+0x5a6>
 8008518:	2304      	movs	r3, #4
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e21e      	b.n	800895e <UART_SetConfig+0x5a6>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e21a      	b.n	800895e <UART_SetConfig+0x5a6>
 8008528:	2310      	movs	r3, #16
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e216      	b.n	800895e <UART_SetConfig+0x5a6>
 8008530:	2320      	movs	r3, #32
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008536:	e212      	b.n	800895e <UART_SetConfig+0x5a6>
 8008538:	2340      	movs	r3, #64	@ 0x40
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e20e      	b.n	800895e <UART_SetConfig+0x5a6>
 8008540:	2380      	movs	r3, #128	@ 0x80
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008546:	e20a      	b.n	800895e <UART_SetConfig+0x5a6>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a69      	ldr	r2, [pc, #420]	@ (80086f4 <UART_SetConfig+0x33c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d130      	bne.n	80085b4 <UART_SetConfig+0x1fc>
 8008552:	4b67      	ldr	r3, [pc, #412]	@ (80086f0 <UART_SetConfig+0x338>)
 8008554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b05      	cmp	r3, #5
 800855c:	d826      	bhi.n	80085ac <UART_SetConfig+0x1f4>
 800855e:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <UART_SetConfig+0x1ac>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	0800857d 	.word	0x0800857d
 8008568:	08008585 	.word	0x08008585
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008595 	.word	0x08008595
 8008574:	0800859d 	.word	0x0800859d
 8008578:	080085a5 	.word	0x080085a5
 800857c:	2300      	movs	r3, #0
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008582:	e1ec      	b.n	800895e <UART_SetConfig+0x5a6>
 8008584:	2304      	movs	r3, #4
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e1e8      	b.n	800895e <UART_SetConfig+0x5a6>
 800858c:	2308      	movs	r3, #8
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e1e4      	b.n	800895e <UART_SetConfig+0x5a6>
 8008594:	2310      	movs	r3, #16
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e1e0      	b.n	800895e <UART_SetConfig+0x5a6>
 800859c:	2320      	movs	r3, #32
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e1dc      	b.n	800895e <UART_SetConfig+0x5a6>
 80085a4:	2340      	movs	r3, #64	@ 0x40
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e1d8      	b.n	800895e <UART_SetConfig+0x5a6>
 80085ac:	2380      	movs	r3, #128	@ 0x80
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e1d4      	b.n	800895e <UART_SetConfig+0x5a6>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a4f      	ldr	r2, [pc, #316]	@ (80086f8 <UART_SetConfig+0x340>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d130      	bne.n	8008620 <UART_SetConfig+0x268>
 80085be:	4b4c      	ldr	r3, [pc, #304]	@ (80086f0 <UART_SetConfig+0x338>)
 80085c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	d826      	bhi.n	8008618 <UART_SetConfig+0x260>
 80085ca:	a201      	add	r2, pc, #4	@ (adr r2, 80085d0 <UART_SetConfig+0x218>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085e9 	.word	0x080085e9
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	080085f9 	.word	0x080085f9
 80085dc:	08008601 	.word	0x08008601
 80085e0:	08008609 	.word	0x08008609
 80085e4:	08008611 	.word	0x08008611
 80085e8:	2300      	movs	r3, #0
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ee:	e1b6      	b.n	800895e <UART_SetConfig+0x5a6>
 80085f0:	2304      	movs	r3, #4
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f6:	e1b2      	b.n	800895e <UART_SetConfig+0x5a6>
 80085f8:	2308      	movs	r3, #8
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fe:	e1ae      	b.n	800895e <UART_SetConfig+0x5a6>
 8008600:	2310      	movs	r3, #16
 8008602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008606:	e1aa      	b.n	800895e <UART_SetConfig+0x5a6>
 8008608:	2320      	movs	r3, #32
 800860a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860e:	e1a6      	b.n	800895e <UART_SetConfig+0x5a6>
 8008610:	2340      	movs	r3, #64	@ 0x40
 8008612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008616:	e1a2      	b.n	800895e <UART_SetConfig+0x5a6>
 8008618:	2380      	movs	r3, #128	@ 0x80
 800861a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861e:	e19e      	b.n	800895e <UART_SetConfig+0x5a6>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <UART_SetConfig+0x344>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d130      	bne.n	800868c <UART_SetConfig+0x2d4>
 800862a:	4b31      	ldr	r3, [pc, #196]	@ (80086f0 <UART_SetConfig+0x338>)
 800862c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	2b05      	cmp	r3, #5
 8008634:	d826      	bhi.n	8008684 <UART_SetConfig+0x2cc>
 8008636:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <UART_SetConfig+0x284>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008655 	.word	0x08008655
 8008640:	0800865d 	.word	0x0800865d
 8008644:	08008665 	.word	0x08008665
 8008648:	0800866d 	.word	0x0800866d
 800864c:	08008675 	.word	0x08008675
 8008650:	0800867d 	.word	0x0800867d
 8008654:	2300      	movs	r3, #0
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800865a:	e180      	b.n	800895e <UART_SetConfig+0x5a6>
 800865c:	2304      	movs	r3, #4
 800865e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008662:	e17c      	b.n	800895e <UART_SetConfig+0x5a6>
 8008664:	2308      	movs	r3, #8
 8008666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800866a:	e178      	b.n	800895e <UART_SetConfig+0x5a6>
 800866c:	2310      	movs	r3, #16
 800866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008672:	e174      	b.n	800895e <UART_SetConfig+0x5a6>
 8008674:	2320      	movs	r3, #32
 8008676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867a:	e170      	b.n	800895e <UART_SetConfig+0x5a6>
 800867c:	2340      	movs	r3, #64	@ 0x40
 800867e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008682:	e16c      	b.n	800895e <UART_SetConfig+0x5a6>
 8008684:	2380      	movs	r3, #128	@ 0x80
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868a:	e168      	b.n	800895e <UART_SetConfig+0x5a6>
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <UART_SetConfig+0x348>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d142      	bne.n	800871c <UART_SetConfig+0x364>
 8008696:	4b16      	ldr	r3, [pc, #88]	@ (80086f0 <UART_SetConfig+0x338>)
 8008698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b05      	cmp	r3, #5
 80086a0:	d838      	bhi.n	8008714 <UART_SetConfig+0x35c>
 80086a2:	a201      	add	r2, pc, #4	@ (adr r2, 80086a8 <UART_SetConfig+0x2f0>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086c1 	.word	0x080086c1
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	080086d1 	.word	0x080086d1
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	08008705 	.word	0x08008705
 80086bc:	0800870d 	.word	0x0800870d
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086c6:	e14a      	b.n	800895e <UART_SetConfig+0x5a6>
 80086c8:	2304      	movs	r3, #4
 80086ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086ce:	e146      	b.n	800895e <UART_SetConfig+0x5a6>
 80086d0:	2308      	movs	r3, #8
 80086d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086d6:	e142      	b.n	800895e <UART_SetConfig+0x5a6>
 80086d8:	2310      	movs	r3, #16
 80086da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086de:	e13e      	b.n	800895e <UART_SetConfig+0x5a6>
 80086e0:	cfff69f3 	.word	0xcfff69f3
 80086e4:	58000c00 	.word	0x58000c00
 80086e8:	11fff4ff 	.word	0x11fff4ff
 80086ec:	40011000 	.word	0x40011000
 80086f0:	58024400 	.word	0x58024400
 80086f4:	40004400 	.word	0x40004400
 80086f8:	40004800 	.word	0x40004800
 80086fc:	40004c00 	.word	0x40004c00
 8008700:	40005000 	.word	0x40005000
 8008704:	2320      	movs	r3, #32
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870a:	e128      	b.n	800895e <UART_SetConfig+0x5a6>
 800870c:	2340      	movs	r3, #64	@ 0x40
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008712:	e124      	b.n	800895e <UART_SetConfig+0x5a6>
 8008714:	2380      	movs	r3, #128	@ 0x80
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871a:	e120      	b.n	800895e <UART_SetConfig+0x5a6>
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4acb      	ldr	r2, [pc, #812]	@ (8008a50 <UART_SetConfig+0x698>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d176      	bne.n	8008814 <UART_SetConfig+0x45c>
 8008726:	4bcb      	ldr	r3, [pc, #812]	@ (8008a54 <UART_SetConfig+0x69c>)
 8008728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800872e:	2b28      	cmp	r3, #40	@ 0x28
 8008730:	d86c      	bhi.n	800880c <UART_SetConfig+0x454>
 8008732:	a201      	add	r2, pc, #4	@ (adr r2, 8008738 <UART_SetConfig+0x380>)
 8008734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008738:	080087dd 	.word	0x080087dd
 800873c:	0800880d 	.word	0x0800880d
 8008740:	0800880d 	.word	0x0800880d
 8008744:	0800880d 	.word	0x0800880d
 8008748:	0800880d 	.word	0x0800880d
 800874c:	0800880d 	.word	0x0800880d
 8008750:	0800880d 	.word	0x0800880d
 8008754:	0800880d 	.word	0x0800880d
 8008758:	080087e5 	.word	0x080087e5
 800875c:	0800880d 	.word	0x0800880d
 8008760:	0800880d 	.word	0x0800880d
 8008764:	0800880d 	.word	0x0800880d
 8008768:	0800880d 	.word	0x0800880d
 800876c:	0800880d 	.word	0x0800880d
 8008770:	0800880d 	.word	0x0800880d
 8008774:	0800880d 	.word	0x0800880d
 8008778:	080087ed 	.word	0x080087ed
 800877c:	0800880d 	.word	0x0800880d
 8008780:	0800880d 	.word	0x0800880d
 8008784:	0800880d 	.word	0x0800880d
 8008788:	0800880d 	.word	0x0800880d
 800878c:	0800880d 	.word	0x0800880d
 8008790:	0800880d 	.word	0x0800880d
 8008794:	0800880d 	.word	0x0800880d
 8008798:	080087f5 	.word	0x080087f5
 800879c:	0800880d 	.word	0x0800880d
 80087a0:	0800880d 	.word	0x0800880d
 80087a4:	0800880d 	.word	0x0800880d
 80087a8:	0800880d 	.word	0x0800880d
 80087ac:	0800880d 	.word	0x0800880d
 80087b0:	0800880d 	.word	0x0800880d
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	080087fd 	.word	0x080087fd
 80087bc:	0800880d 	.word	0x0800880d
 80087c0:	0800880d 	.word	0x0800880d
 80087c4:	0800880d 	.word	0x0800880d
 80087c8:	0800880d 	.word	0x0800880d
 80087cc:	0800880d 	.word	0x0800880d
 80087d0:	0800880d 	.word	0x0800880d
 80087d4:	0800880d 	.word	0x0800880d
 80087d8:	08008805 	.word	0x08008805
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e2:	e0bc      	b.n	800895e <UART_SetConfig+0x5a6>
 80087e4:	2304      	movs	r3, #4
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ea:	e0b8      	b.n	800895e <UART_SetConfig+0x5a6>
 80087ec:	2308      	movs	r3, #8
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f2:	e0b4      	b.n	800895e <UART_SetConfig+0x5a6>
 80087f4:	2310      	movs	r3, #16
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fa:	e0b0      	b.n	800895e <UART_SetConfig+0x5a6>
 80087fc:	2320      	movs	r3, #32
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008802:	e0ac      	b.n	800895e <UART_SetConfig+0x5a6>
 8008804:	2340      	movs	r3, #64	@ 0x40
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880a:	e0a8      	b.n	800895e <UART_SetConfig+0x5a6>
 800880c:	2380      	movs	r3, #128	@ 0x80
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008812:	e0a4      	b.n	800895e <UART_SetConfig+0x5a6>
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a8f      	ldr	r2, [pc, #572]	@ (8008a58 <UART_SetConfig+0x6a0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d130      	bne.n	8008880 <UART_SetConfig+0x4c8>
 800881e:	4b8d      	ldr	r3, [pc, #564]	@ (8008a54 <UART_SetConfig+0x69c>)
 8008820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	2b05      	cmp	r3, #5
 8008828:	d826      	bhi.n	8008878 <UART_SetConfig+0x4c0>
 800882a:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <UART_SetConfig+0x478>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008849 	.word	0x08008849
 8008834:	08008851 	.word	0x08008851
 8008838:	08008859 	.word	0x08008859
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	2300      	movs	r3, #0
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884e:	e086      	b.n	800895e <UART_SetConfig+0x5a6>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008856:	e082      	b.n	800895e <UART_SetConfig+0x5a6>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800885e:	e07e      	b.n	800895e <UART_SetConfig+0x5a6>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008866:	e07a      	b.n	800895e <UART_SetConfig+0x5a6>
 8008868:	2320      	movs	r3, #32
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800886e:	e076      	b.n	800895e <UART_SetConfig+0x5a6>
 8008870:	2340      	movs	r3, #64	@ 0x40
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008876:	e072      	b.n	800895e <UART_SetConfig+0x5a6>
 8008878:	2380      	movs	r3, #128	@ 0x80
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887e:	e06e      	b.n	800895e <UART_SetConfig+0x5a6>
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a75      	ldr	r2, [pc, #468]	@ (8008a5c <UART_SetConfig+0x6a4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d130      	bne.n	80088ec <UART_SetConfig+0x534>
 800888a:	4b72      	ldr	r3, [pc, #456]	@ (8008a54 <UART_SetConfig+0x69c>)
 800888c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	2b05      	cmp	r3, #5
 8008894:	d826      	bhi.n	80088e4 <UART_SetConfig+0x52c>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <UART_SetConfig+0x4e4>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088b5 	.word	0x080088b5
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088c5 	.word	0x080088c5
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088d5 	.word	0x080088d5
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ba:	e050      	b.n	800895e <UART_SetConfig+0x5a6>
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088c2:	e04c      	b.n	800895e <UART_SetConfig+0x5a6>
 80088c4:	2308      	movs	r3, #8
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ca:	e048      	b.n	800895e <UART_SetConfig+0x5a6>
 80088cc:	2310      	movs	r3, #16
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d2:	e044      	b.n	800895e <UART_SetConfig+0x5a6>
 80088d4:	2320      	movs	r3, #32
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088da:	e040      	b.n	800895e <UART_SetConfig+0x5a6>
 80088dc:	2340      	movs	r3, #64	@ 0x40
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e2:	e03c      	b.n	800895e <UART_SetConfig+0x5a6>
 80088e4:	2380      	movs	r3, #128	@ 0x80
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e038      	b.n	800895e <UART_SetConfig+0x5a6>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a5b      	ldr	r2, [pc, #364]	@ (8008a60 <UART_SetConfig+0x6a8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d130      	bne.n	8008958 <UART_SetConfig+0x5a0>
 80088f6:	4b57      	ldr	r3, [pc, #348]	@ (8008a54 <UART_SetConfig+0x69c>)
 80088f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d826      	bhi.n	8008950 <UART_SetConfig+0x598>
 8008902:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <UART_SetConfig+0x550>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008921 	.word	0x08008921
 800890c:	08008929 	.word	0x08008929
 8008910:	08008931 	.word	0x08008931
 8008914:	08008939 	.word	0x08008939
 8008918:	08008941 	.word	0x08008941
 800891c:	08008949 	.word	0x08008949
 8008920:	2302      	movs	r3, #2
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008926:	e01a      	b.n	800895e <UART_SetConfig+0x5a6>
 8008928:	2304      	movs	r3, #4
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892e:	e016      	b.n	800895e <UART_SetConfig+0x5a6>
 8008930:	2308      	movs	r3, #8
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008936:	e012      	b.n	800895e <UART_SetConfig+0x5a6>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800893e:	e00e      	b.n	800895e <UART_SetConfig+0x5a6>
 8008940:	2320      	movs	r3, #32
 8008942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008946:	e00a      	b.n	800895e <UART_SetConfig+0x5a6>
 8008948:	2340      	movs	r3, #64	@ 0x40
 800894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800894e:	e006      	b.n	800895e <UART_SetConfig+0x5a6>
 8008950:	2380      	movs	r3, #128	@ 0x80
 8008952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008956:	e002      	b.n	800895e <UART_SetConfig+0x5a6>
 8008958:	2380      	movs	r3, #128	@ 0x80
 800895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a3f      	ldr	r2, [pc, #252]	@ (8008a60 <UART_SetConfig+0x6a8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	f040 80f8 	bne.w	8008b5a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800896a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800896e:	2b20      	cmp	r3, #32
 8008970:	dc46      	bgt.n	8008a00 <UART_SetConfig+0x648>
 8008972:	2b02      	cmp	r3, #2
 8008974:	f2c0 8082 	blt.w	8008a7c <UART_SetConfig+0x6c4>
 8008978:	3b02      	subs	r3, #2
 800897a:	2b1e      	cmp	r3, #30
 800897c:	d87e      	bhi.n	8008a7c <UART_SetConfig+0x6c4>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <UART_SetConfig+0x5cc>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	08008a07 	.word	0x08008a07
 8008988:	08008a7d 	.word	0x08008a7d
 800898c:	08008a0f 	.word	0x08008a0f
 8008990:	08008a7d 	.word	0x08008a7d
 8008994:	08008a7d 	.word	0x08008a7d
 8008998:	08008a7d 	.word	0x08008a7d
 800899c:	08008a1f 	.word	0x08008a1f
 80089a0:	08008a7d 	.word	0x08008a7d
 80089a4:	08008a7d 	.word	0x08008a7d
 80089a8:	08008a7d 	.word	0x08008a7d
 80089ac:	08008a7d 	.word	0x08008a7d
 80089b0:	08008a7d 	.word	0x08008a7d
 80089b4:	08008a7d 	.word	0x08008a7d
 80089b8:	08008a7d 	.word	0x08008a7d
 80089bc:	08008a2f 	.word	0x08008a2f
 80089c0:	08008a7d 	.word	0x08008a7d
 80089c4:	08008a7d 	.word	0x08008a7d
 80089c8:	08008a7d 	.word	0x08008a7d
 80089cc:	08008a7d 	.word	0x08008a7d
 80089d0:	08008a7d 	.word	0x08008a7d
 80089d4:	08008a7d 	.word	0x08008a7d
 80089d8:	08008a7d 	.word	0x08008a7d
 80089dc:	08008a7d 	.word	0x08008a7d
 80089e0:	08008a7d 	.word	0x08008a7d
 80089e4:	08008a7d 	.word	0x08008a7d
 80089e8:	08008a7d 	.word	0x08008a7d
 80089ec:	08008a7d 	.word	0x08008a7d
 80089f0:	08008a7d 	.word	0x08008a7d
 80089f4:	08008a7d 	.word	0x08008a7d
 80089f8:	08008a7d 	.word	0x08008a7d
 80089fc:	08008a6f 	.word	0x08008a6f
 8008a00:	2b40      	cmp	r3, #64	@ 0x40
 8008a02:	d037      	beq.n	8008a74 <UART_SetConfig+0x6bc>
 8008a04:	e03a      	b.n	8008a7c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a06:	f7fd fffb 	bl	8006a00 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a0c:	e03c      	b.n	8008a88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe f80a 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1c:	e034      	b.n	8008a88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a1e:	f107 0318 	add.w	r3, r7, #24
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe f956 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a2c:	e02c      	b.n	8008a88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a2e:	4b09      	ldr	r3, [pc, #36]	@ (8008a54 <UART_SetConfig+0x69c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a3a:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <UART_SetConfig+0x69c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	08db      	lsrs	r3, r3, #3
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	4a07      	ldr	r2, [pc, #28]	@ (8008a64 <UART_SetConfig+0x6ac>)
 8008a46:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a4c:	e01c      	b.n	8008a88 <UART_SetConfig+0x6d0>
 8008a4e:	bf00      	nop
 8008a50:	40011400 	.word	0x40011400
 8008a54:	58024400 	.word	0x58024400
 8008a58:	40007800 	.word	0x40007800
 8008a5c:	40007c00 	.word	0x40007c00
 8008a60:	58000c00 	.word	0x58000c00
 8008a64:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008a68:	4b9d      	ldr	r3, [pc, #628]	@ (8008ce0 <UART_SetConfig+0x928>)
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6c:	e00c      	b.n	8008a88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a6e:	4b9d      	ldr	r3, [pc, #628]	@ (8008ce4 <UART_SetConfig+0x92c>)
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a72:	e009      	b.n	8008a88 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7a:	e005      	b.n	8008a88 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 81de 	beq.w	8008e4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a94:	4a94      	ldr	r2, [pc, #592]	@ (8008ce8 <UART_SetConfig+0x930>)
 8008a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	4413      	add	r3, r2
 8008aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d305      	bcc.n	8008ac0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d903      	bls.n	8008ac8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ac6:	e1c1      	b.n	8008e4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aca:	2200      	movs	r2, #0
 8008acc:	60bb      	str	r3, [r7, #8]
 8008ace:	60fa      	str	r2, [r7, #12]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad4:	4a84      	ldr	r2, [pc, #528]	@ (8008ce8 <UART_SetConfig+0x930>)
 8008ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2200      	movs	r2, #0
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aea:	f7f7 fbf5 	bl	80002d8 <__aeabi_uldivmod>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4610      	mov	r0, r2
 8008af4:	4619      	mov	r1, r3
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	020b      	lsls	r3, r1, #8
 8008b00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b04:	0202      	lsls	r2, r0, #8
 8008b06:	6979      	ldr	r1, [r7, #20]
 8008b08:	6849      	ldr	r1, [r1, #4]
 8008b0a:	0849      	lsrs	r1, r1, #1
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	4605      	mov	r5, r0
 8008b12:	eb12 0804 	adds.w	r8, r2, r4
 8008b16:	eb43 0905 	adc.w	r9, r3, r5
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	469a      	mov	sl, r3
 8008b22:	4693      	mov	fp, r2
 8008b24:	4652      	mov	r2, sl
 8008b26:	465b      	mov	r3, fp
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 fbd4 	bl	80002d8 <__aeabi_uldivmod>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4613      	mov	r3, r2
 8008b36:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b3e:	d308      	bcc.n	8008b52 <UART_SetConfig+0x79a>
 8008b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b46:	d204      	bcs.n	8008b52 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b4e:	60da      	str	r2, [r3, #12]
 8008b50:	e17c      	b.n	8008e4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b58:	e178      	b.n	8008e4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b62:	f040 80c5 	bne.w	8008cf0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008b66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	dc48      	bgt.n	8008c00 <UART_SetConfig+0x848>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	db7b      	blt.n	8008c6a <UART_SetConfig+0x8b2>
 8008b72:	2b20      	cmp	r3, #32
 8008b74:	d879      	bhi.n	8008c6a <UART_SetConfig+0x8b2>
 8008b76:	a201      	add	r2, pc, #4	@ (adr r2, 8008b7c <UART_SetConfig+0x7c4>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008c07 	.word	0x08008c07
 8008b80:	08008c0f 	.word	0x08008c0f
 8008b84:	08008c6b 	.word	0x08008c6b
 8008b88:	08008c6b 	.word	0x08008c6b
 8008b8c:	08008c17 	.word	0x08008c17
 8008b90:	08008c6b 	.word	0x08008c6b
 8008b94:	08008c6b 	.word	0x08008c6b
 8008b98:	08008c6b 	.word	0x08008c6b
 8008b9c:	08008c27 	.word	0x08008c27
 8008ba0:	08008c6b 	.word	0x08008c6b
 8008ba4:	08008c6b 	.word	0x08008c6b
 8008ba8:	08008c6b 	.word	0x08008c6b
 8008bac:	08008c6b 	.word	0x08008c6b
 8008bb0:	08008c6b 	.word	0x08008c6b
 8008bb4:	08008c6b 	.word	0x08008c6b
 8008bb8:	08008c6b 	.word	0x08008c6b
 8008bbc:	08008c37 	.word	0x08008c37
 8008bc0:	08008c6b 	.word	0x08008c6b
 8008bc4:	08008c6b 	.word	0x08008c6b
 8008bc8:	08008c6b 	.word	0x08008c6b
 8008bcc:	08008c6b 	.word	0x08008c6b
 8008bd0:	08008c6b 	.word	0x08008c6b
 8008bd4:	08008c6b 	.word	0x08008c6b
 8008bd8:	08008c6b 	.word	0x08008c6b
 8008bdc:	08008c6b 	.word	0x08008c6b
 8008be0:	08008c6b 	.word	0x08008c6b
 8008be4:	08008c6b 	.word	0x08008c6b
 8008be8:	08008c6b 	.word	0x08008c6b
 8008bec:	08008c6b 	.word	0x08008c6b
 8008bf0:	08008c6b 	.word	0x08008c6b
 8008bf4:	08008c6b 	.word	0x08008c6b
 8008bf8:	08008c6b 	.word	0x08008c6b
 8008bfc:	08008c5d 	.word	0x08008c5d
 8008c00:	2b40      	cmp	r3, #64	@ 0x40
 8008c02:	d02e      	beq.n	8008c62 <UART_SetConfig+0x8aa>
 8008c04:	e031      	b.n	8008c6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c06:	f7fc fcc5 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8008c0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e033      	b.n	8008c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c0e:	f7fc fcd7 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 8008c12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c14:	e02f      	b.n	8008c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fd ff06 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c24:	e027      	b.n	8008c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c26:	f107 0318 	add.w	r3, r7, #24
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe f852 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c34:	e01f      	b.n	8008c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c36:	4b2d      	ldr	r3, [pc, #180]	@ (8008cec <UART_SetConfig+0x934>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d009      	beq.n	8008c56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c42:	4b2a      	ldr	r3, [pc, #168]	@ (8008cec <UART_SetConfig+0x934>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	4a24      	ldr	r2, [pc, #144]	@ (8008ce0 <UART_SetConfig+0x928>)
 8008c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c54:	e00f      	b.n	8008c76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008c56:	4b22      	ldr	r3, [pc, #136]	@ (8008ce0 <UART_SetConfig+0x928>)
 8008c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c5a:	e00c      	b.n	8008c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c5c:	4b21      	ldr	r3, [pc, #132]	@ (8008ce4 <UART_SetConfig+0x92c>)
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c60:	e009      	b.n	8008c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c68:	e005      	b.n	8008c76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 80e7 	beq.w	8008e4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c82:	4a19      	ldr	r2, [pc, #100]	@ (8008ce8 <UART_SetConfig+0x930>)
 8008c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c90:	005a      	lsls	r2, r3, #1
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	085b      	lsrs	r3, r3, #1
 8008c98:	441a      	add	r2, r3
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d916      	bls.n	8008cd8 <UART_SetConfig+0x920>
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb0:	d212      	bcs.n	8008cd8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	f023 030f 	bic.w	r3, r3, #15
 8008cba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	e0b9      	b.n	8008e4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008cde:	e0b5      	b.n	8008e4c <UART_SetConfig+0xa94>
 8008ce0:	03d09000 	.word	0x03d09000
 8008ce4:	003d0900 	.word	0x003d0900
 8008ce8:	08009cc4 	.word	0x08009cc4
 8008cec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cf0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cf4:	2b20      	cmp	r3, #32
 8008cf6:	dc49      	bgt.n	8008d8c <UART_SetConfig+0x9d4>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	db7c      	blt.n	8008df6 <UART_SetConfig+0xa3e>
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	d87a      	bhi.n	8008df6 <UART_SetConfig+0xa3e>
 8008d00:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <UART_SetConfig+0x950>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d93 	.word	0x08008d93
 8008d0c:	08008d9b 	.word	0x08008d9b
 8008d10:	08008df7 	.word	0x08008df7
 8008d14:	08008df7 	.word	0x08008df7
 8008d18:	08008da3 	.word	0x08008da3
 8008d1c:	08008df7 	.word	0x08008df7
 8008d20:	08008df7 	.word	0x08008df7
 8008d24:	08008df7 	.word	0x08008df7
 8008d28:	08008db3 	.word	0x08008db3
 8008d2c:	08008df7 	.word	0x08008df7
 8008d30:	08008df7 	.word	0x08008df7
 8008d34:	08008df7 	.word	0x08008df7
 8008d38:	08008df7 	.word	0x08008df7
 8008d3c:	08008df7 	.word	0x08008df7
 8008d40:	08008df7 	.word	0x08008df7
 8008d44:	08008df7 	.word	0x08008df7
 8008d48:	08008dc3 	.word	0x08008dc3
 8008d4c:	08008df7 	.word	0x08008df7
 8008d50:	08008df7 	.word	0x08008df7
 8008d54:	08008df7 	.word	0x08008df7
 8008d58:	08008df7 	.word	0x08008df7
 8008d5c:	08008df7 	.word	0x08008df7
 8008d60:	08008df7 	.word	0x08008df7
 8008d64:	08008df7 	.word	0x08008df7
 8008d68:	08008df7 	.word	0x08008df7
 8008d6c:	08008df7 	.word	0x08008df7
 8008d70:	08008df7 	.word	0x08008df7
 8008d74:	08008df7 	.word	0x08008df7
 8008d78:	08008df7 	.word	0x08008df7
 8008d7c:	08008df7 	.word	0x08008df7
 8008d80:	08008df7 	.word	0x08008df7
 8008d84:	08008df7 	.word	0x08008df7
 8008d88:	08008de9 	.word	0x08008de9
 8008d8c:	2b40      	cmp	r3, #64	@ 0x40
 8008d8e:	d02e      	beq.n	8008dee <UART_SetConfig+0xa36>
 8008d90:	e031      	b.n	8008df6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d92:	f7fc fbff 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8008d96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d98:	e033      	b.n	8008e02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d9a:	f7fc fc11 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 8008d9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008da0:	e02f      	b.n	8008e02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fd fe40 	bl	8006a2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db0:	e027      	b.n	8008e02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db2:	f107 0318 	add.w	r3, r7, #24
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fd ff8c 	bl	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dc0:	e01f      	b.n	8008e02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8008e78 <UART_SetConfig+0xac0>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d009      	beq.n	8008de2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008dce:	4b2a      	ldr	r3, [pc, #168]	@ (8008e78 <UART_SetConfig+0xac0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	08db      	lsrs	r3, r3, #3
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	4a28      	ldr	r2, [pc, #160]	@ (8008e7c <UART_SetConfig+0xac4>)
 8008dda:	fa22 f303 	lsr.w	r3, r2, r3
 8008dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008de0:	e00f      	b.n	8008e02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008de2:	4b26      	ldr	r3, [pc, #152]	@ (8008e7c <UART_SetConfig+0xac4>)
 8008de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de6:	e00c      	b.n	8008e02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008de8:	4b25      	ldr	r3, [pc, #148]	@ (8008e80 <UART_SetConfig+0xac8>)
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dec:	e009      	b.n	8008e02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008df4:	e005      	b.n	8008e02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008e00:	bf00      	nop
    }

    if (pclk != 0U)
 8008e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d021      	beq.n	8008e4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e84 <UART_SetConfig+0xacc>)
 8008e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e12:	461a      	mov	r2, r3
 8008e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e16:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	441a      	add	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	2b0f      	cmp	r3, #15
 8008e30:	d909      	bls.n	8008e46 <UART_SetConfig+0xa8e>
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e38:	d205      	bcs.n	8008e46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60da      	str	r2, [r3, #12]
 8008e44:	e002      	b.n	8008e4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2200      	movs	r2, #0
 8008e66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e68:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3748      	adds	r7, #72	@ 0x48
 8008e70:	46bd      	mov	sp, r7
 8008e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e76:	bf00      	nop
 8008e78:	58024400 	.word	0x58024400
 8008e7c:	03d09000 	.word	0x03d09000
 8008e80:	003d0900 	.word	0x003d0900
 8008e84:	08009cc4 	.word	0x08009cc4

08008e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e94:	f003 0308 	and.w	r3, r3, #8
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01a      	beq.n	8008f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f86:	d10a      	bne.n	8008f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	605a      	str	r2, [r3, #4]
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b098      	sub	sp, #96	@ 0x60
 8008fd0:	af02      	add	r7, sp, #8
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fdc:	f7f8 fb30 	bl	8001640 <HAL_GetTick>
 8008fe0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0308 	and.w	r3, r3, #8
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d12f      	bne.n	8009050 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f88e 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d022      	beq.n	8009050 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800901a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800901e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009028:	647b      	str	r3, [r7, #68]	@ 0x44
 800902a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800902e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e6      	bne.n	800900a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e063      	b.n	8009118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b04      	cmp	r3, #4
 800905c:	d149      	bne.n	80090f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800905e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009066:	2200      	movs	r2, #0
 8009068:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f857 	bl	8009120 <UART_WaitOnFlagUntilTimeout>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d03c      	beq.n	80090f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	623b      	str	r3, [r7, #32]
   return(result);
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800908c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009096:	633b      	str	r3, [r7, #48]	@ 0x30
 8009098:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800909c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3308      	adds	r3, #8
 80090b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090ca:	61fa      	str	r2, [r7, #28]
 80090cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	69b9      	ldr	r1, [r7, #24]
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	617b      	str	r3, [r7, #20]
   return(result);
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e5      	bne.n	80090aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e012      	b.n	8009118 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3758      	adds	r7, #88	@ 0x58
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	4613      	mov	r3, r2
 800912e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009130:	e04f      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d04b      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800913a:	f7f8 fa81 	bl	8001640 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	429a      	cmp	r2, r3
 8009148:	d302      	bcc.n	8009150 <UART_WaitOnFlagUntilTimeout+0x30>
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e04e      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	d037      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b80      	cmp	r3, #128	@ 0x80
 8009166:	d034      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b40      	cmp	r3, #64	@ 0x40
 800916c:	d031      	beq.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	f003 0308 	and.w	r3, r3, #8
 8009178:	2b08      	cmp	r3, #8
 800917a:	d110      	bne.n	800919e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2208      	movs	r2, #8
 8009182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f839 	bl	80091fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2208      	movs	r2, #8
 800918e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e029      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ac:	d111      	bne.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f81f 	bl	80091fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e00f      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	4013      	ands	r3, r2
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	429a      	cmp	r2, r3
 80091e0:	bf0c      	ite	eq
 80091e2:	2301      	moveq	r3, #1
 80091e4:	2300      	movne	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d0a0      	beq.n	8009132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b095      	sub	sp, #84	@ 0x54
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009222:	643b      	str	r3, [r7, #64]	@ 0x40
 8009224:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e6      	bne.n	8009204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3308      	adds	r3, #8
 800923c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	61fb      	str	r3, [r7, #28]
   return(result);
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	4b1e      	ldr	r3, [pc, #120]	@ (80092c4 <UART_EndRxTransfer+0xc8>)
 800924a:	4013      	ands	r3, r2
 800924c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3308      	adds	r3, #8
 8009254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800925c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e5      	bne.n	8009236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800926e:	2b01      	cmp	r3, #1
 8009270:	d118      	bne.n	80092a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f023 0310 	bic.w	r3, r3, #16
 8009286:	647b      	str	r3, [r7, #68]	@ 0x44
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009290:	61bb      	str	r3, [r7, #24]
 8009292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6979      	ldr	r1, [r7, #20]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	613b      	str	r3, [r7, #16]
   return(result);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e6      	bne.n	8009272 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80092b8:	bf00      	nop
 80092ba:	3754      	adds	r7, #84	@ 0x54
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	effffffe 	.word	0xeffffffe

080092c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d101      	bne.n	80092de <HAL_UARTEx_DisableFifoMode+0x16>
 80092da:	2302      	movs	r3, #2
 80092dc:	e027      	b.n	800932e <HAL_UARTEx_DisableFifoMode+0x66>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2224      	movs	r2, #36	@ 0x24
 80092ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0201 	bic.w	r2, r2, #1
 8009304:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800930c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2220      	movs	r2, #32
 8009320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800934e:	2302      	movs	r3, #2
 8009350:	e02d      	b.n	80093ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2224      	movs	r2, #36	@ 0x24
 800935e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f022 0201 	bic.w	r2, r2, #1
 8009378:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f850 	bl	8009434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2220      	movs	r2, #32
 80093a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093ca:	2302      	movs	r3, #2
 80093cc:	e02d      	b.n	800942a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2224      	movs	r2, #36	@ 0x24
 80093da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0201 	bic.w	r2, r2, #1
 80093f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f812 	bl	8009434 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009440:	2b00      	cmp	r3, #0
 8009442:	d108      	bne.n	8009456 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009454:	e031      	b.n	80094ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009456:	2310      	movs	r3, #16
 8009458:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800945a:	2310      	movs	r3, #16
 800945c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	0e5b      	lsrs	r3, r3, #25
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	0f5b      	lsrs	r3, r3, #29
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	7b3a      	ldrb	r2, [r7, #12]
 8009482:	4911      	ldr	r1, [pc, #68]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x94>)
 8009484:	5c8a      	ldrb	r2, [r1, r2]
 8009486:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800948a:	7b3a      	ldrb	r2, [r7, #12]
 800948c:	490f      	ldr	r1, [pc, #60]	@ (80094cc <UARTEx_SetNbDataToProcess+0x98>)
 800948e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009490:	fb93 f3f2 	sdiv	r3, r3, r2
 8009494:	b29a      	uxth	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	7b7a      	ldrb	r2, [r7, #13]
 80094a0:	4909      	ldr	r1, [pc, #36]	@ (80094c8 <UARTEx_SetNbDataToProcess+0x94>)
 80094a2:	5c8a      	ldrb	r2, [r1, r2]
 80094a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094a8:	7b7a      	ldrb	r2, [r7, #13]
 80094aa:	4908      	ldr	r1, [pc, #32]	@ (80094cc <UARTEx_SetNbDataToProcess+0x98>)
 80094ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80094ba:	bf00      	nop
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	08009cdc 	.word	0x08009cdc
 80094cc:	08009ce4 	.word	0x08009ce4

080094d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094d0:	b084      	sub	sp, #16
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	f107 001c 	add.w	r0, r7, #28
 80094de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d121      	bne.n	800952e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	4b2c      	ldr	r3, [pc, #176]	@ (80095ac <USB_CoreInit+0xdc>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800950e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009512:	2b01      	cmp	r3, #1
 8009514:	d105      	bne.n	8009522 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 faaa 	bl	8009a7c <USB_CoreReset>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]
 800952c:	e01b      	b.n	8009566 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fa9e 	bl	8009a7c <USB_CoreReset>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009544:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009550:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	639a      	str	r2, [r3, #56]	@ 0x38
 8009558:	e005      	b.n	8009566 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009566:	7fbb      	ldrb	r3, [r7, #30]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d116      	bne.n	800959a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800957a:	4b0d      	ldr	r3, [pc, #52]	@ (80095b0 <USB_CoreInit+0xe0>)
 800957c:	4313      	orrs	r3, r2
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f043 0206 	orr.w	r2, r3, #6
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f043 0220 	orr.w	r2, r3, #32
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095a6:	b004      	add	sp, #16
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	ffbdffbf 	.word	0xffbdffbf
 80095b0:	03ee0000 	.word	0x03ee0000

080095b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f023 0201 	bic.w	r2, r3, #1
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d115      	bne.n	8009624 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009604:	200a      	movs	r0, #10
 8009606:	f7f8 f827 	bl	8001658 <HAL_Delay>
      ms += 10U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	330a      	adds	r3, #10
 800960e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fa25 	bl	8009a60 <USB_GetMode>
 8009616:	4603      	mov	r3, r0
 8009618:	2b01      	cmp	r3, #1
 800961a:	d01e      	beq.n	800965a <USB_SetCurrentMode+0x84>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009620:	d9f0      	bls.n	8009604 <USB_SetCurrentMode+0x2e>
 8009622:	e01a      	b.n	800965a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d115      	bne.n	8009656 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009636:	200a      	movs	r0, #10
 8009638:	f7f8 f80e 	bl	8001658 <HAL_Delay>
      ms += 10U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	330a      	adds	r3, #10
 8009640:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fa0c 	bl	8009a60 <USB_GetMode>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d005      	beq.n	800965a <USB_SetCurrentMode+0x84>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2bc7      	cmp	r3, #199	@ 0xc7
 8009652:	d9f0      	bls.n	8009636 <USB_SetCurrentMode+0x60>
 8009654:	e001      	b.n	800965a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e005      	b.n	8009666 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2bc8      	cmp	r3, #200	@ 0xc8
 800965e:	d101      	bne.n	8009664 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009670:	b084      	sub	sp, #16
 8009672:	b580      	push	{r7, lr}
 8009674:	b086      	sub	sp, #24
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800967e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]
 800968e:	e009      	b.n	80096a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	3340      	adds	r3, #64	@ 0x40
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	3301      	adds	r3, #1
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b0e      	cmp	r3, #14
 80096a8:	d9f2      	bls.n	8009690 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d11c      	bne.n	80096ec <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096c0:	f043 0302 	orr.w	r3, r3, #2
 80096c4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ca:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	e005      	b.n	80096f8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096fe:	461a      	mov	r2, r3
 8009700:	2300      	movs	r3, #0
 8009702:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009704:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009708:	2b01      	cmp	r3, #1
 800970a:	d10d      	bne.n	8009728 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800970c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009714:	2100      	movs	r1, #0
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f968 	bl	80099ec <USB_SetDevSpeed>
 800971c:	e008      	b.n	8009730 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800971e:	2101      	movs	r1, #1
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f963 	bl	80099ec <USB_SetDevSpeed>
 8009726:	e003      	b.n	8009730 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009728:	2103      	movs	r1, #3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f95e 	bl	80099ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009730:	2110      	movs	r1, #16
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f8fa 	bl	800992c <USB_FlushTxFifo>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f924 	bl	8009990 <USB_FlushRxFifo>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009758:	461a      	mov	r2, r3
 800975a:	2300      	movs	r3, #0
 800975c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009764:	461a      	mov	r2, r3
 8009766:	2300      	movs	r3, #0
 8009768:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009770:	461a      	mov	r2, r3
 8009772:	2300      	movs	r3, #0
 8009774:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009776:	2300      	movs	r3, #0
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	e043      	b.n	8009804 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800978e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009792:	d118      	bne.n	80097c6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10a      	bne.n	80097b0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097a6:	461a      	mov	r2, r3
 80097a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e013      	b.n	80097d8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097bc:	461a      	mov	r2, r3
 80097be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	e008      	b.n	80097d8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d2:	461a      	mov	r2, r3
 80097d4:	2300      	movs	r3, #0
 80097d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e4:	461a      	mov	r2, r3
 80097e6:	2300      	movs	r3, #0
 80097e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f6:	461a      	mov	r2, r3
 80097f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3301      	adds	r3, #1
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009808:	461a      	mov	r2, r3
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	4293      	cmp	r3, r2
 800980e:	d3b5      	bcc.n	800977c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009810:	2300      	movs	r3, #0
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	e043      	b.n	800989e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800982c:	d118      	bne.n	8009860 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009840:	461a      	mov	r2, r3
 8009842:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	e013      	b.n	8009872 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009856:	461a      	mov	r2, r3
 8009858:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	e008      	b.n	8009872 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800986c:	461a      	mov	r2, r3
 800986e:	2300      	movs	r3, #0
 8009870:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987e:	461a      	mov	r2, r3
 8009880:	2300      	movs	r3, #0
 8009882:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009890:	461a      	mov	r2, r3
 8009892:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	3301      	adds	r3, #1
 800989c:	613b      	str	r3, [r7, #16]
 800989e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098a2:	461a      	mov	r2, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d3b5      	bcc.n	8009816 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80098ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80098cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d105      	bne.n	80098e0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f043 0210 	orr.w	r2, r3, #16
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699a      	ldr	r2, [r3, #24]
 80098e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009924 <USB_DevInit+0x2b4>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	f043 0208 	orr.w	r2, r3, #8
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009900:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009904:	2b01      	cmp	r3, #1
 8009906:	d105      	bne.n	8009914 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	699a      	ldr	r2, [r3, #24]
 800990c:	4b06      	ldr	r3, [pc, #24]	@ (8009928 <USB_DevInit+0x2b8>)
 800990e:	4313      	orrs	r3, r2
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009920:	b004      	add	sp, #16
 8009922:	4770      	bx	lr
 8009924:	803c3800 	.word	0x803c3800
 8009928:	40000004 	.word	0x40000004

0800992c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009946:	d901      	bls.n	800994c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e01b      	b.n	8009984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	daf2      	bge.n	800993a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	019b      	lsls	r3, r3, #6
 800995c:	f043 0220 	orr.w	r2, r3, #32
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3301      	adds	r3, #1
 8009968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009970:	d901      	bls.n	8009976 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e006      	b.n	8009984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f003 0320 	and.w	r3, r3, #32
 800997e:	2b20      	cmp	r3, #32
 8009980:	d0f0      	beq.n	8009964 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3301      	adds	r3, #1
 80099a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099a8:	d901      	bls.n	80099ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e018      	b.n	80099e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	daf2      	bge.n	800999c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2210      	movs	r2, #16
 80099be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	3301      	adds	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099cc:	d901      	bls.n	80099d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e006      	b.n	80099e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f003 0310 	and.w	r3, r3, #16
 80099da:	2b10      	cmp	r3, #16
 80099dc:	d0f0      	beq.n	80099c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	68f9      	ldr	r1, [r7, #12]
 8009a08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b085      	sub	sp, #20
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a38:	f023 0303 	bic.w	r3, r3, #3
 8009a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a4c:	f043 0302 	orr.w	r3, r3, #2
 8009a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a94:	d901      	bls.n	8009a9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e01b      	b.n	8009ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	daf2      	bge.n	8009a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f043 0201 	orr.w	r2, r3, #1
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009abe:	d901      	bls.n	8009ac4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e006      	b.n	8009ad2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d0f0      	beq.n	8009ab2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <User_SystemInit>:
#include "User_include.h"

void User_SystemInit();

void User_SystemInit()
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	af00      	add	r7, sp, #0
    /* Init User System */
    TM1638_Init();
 8009ae2:	f000 f83b 	bl	8009b5c <TM1638_Init>
    //TM1638_DisplayNumber(1, 3);
    extern void TM1638_GPIO_TEST();
    //TM1638_GPIO_TEST();
 8009ae6:	bf00      	nop
 8009ae8:	bd80      	pop	{r7, pc}
	...

08009aec <User_RunSystem>:
#include "User_include.h"

void User_RunSystem();

void User_RunSystem()
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
    int mytemp = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	607b      	str	r3, [r7, #4]
    while(1)
    {
        HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8009af6:	2201      	movs	r2, #1
 8009af8:	2101      	movs	r1, #1
 8009afa:	4803      	ldr	r0, [pc, #12]	@ (8009b08 <User_RunSystem+0x1c>)
 8009afc:	f7fa fbec 	bl	80042d8 <HAL_GPIO_WritePin>
    	mytemp = 1;
 8009b00:	2301      	movs	r3, #1
 8009b02:	607b      	str	r3, [r7, #4]
    
        continue;
 8009b04:	bf00      	nop
        HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8009b06:	e7f6      	b.n	8009af6 <User_RunSystem+0xa>
 8009b08:	58020400 	.word	0x58020400

08009b0c <HAL_SPI_TxCpltCallback>:
void TM1638_ReceiveByte(uint8_t data);
void TM1638_Init();
void TM1638_DisplayNumber(uint8_t position, uint8_t number);

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if (hspi->Instance == SPI4) {
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a05      	ldr	r2, [pc, #20]	@ (8009b30 <HAL_SPI_TxCpltCallback+0x24>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d102      	bne.n	8009b24 <HAL_SPI_TxCpltCallback+0x18>
    // 전송 완료 시 실행할 코드 (예: LED 점멸)
    flag = 1;
 8009b1e:	4b05      	ldr	r3, [pc, #20]	@ (8009b34 <HAL_SPI_TxCpltCallback+0x28>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
    }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	40013400 	.word	0x40013400
 8009b34:	24000904 	.word	0x24000904

08009b38 <TM1638_SendByte>:


void TM1638_SendByte(uint8_t data)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	71fb      	strb	r3, [r7, #7]
    
    HAL_SPI_Transmit(&TM1638_SPI, &data, 1, HAL_MAX_DELAY);
 8009b42:	1df9      	adds	r1, r7, #7
 8009b44:	f04f 33ff 	mov.w	r3, #4294967295
 8009b48:	2201      	movs	r2, #1
 8009b4a:	4803      	ldr	r0, [pc, #12]	@ (8009b58 <TM1638_SendByte+0x20>)
 8009b4c:	f7fd fefc 	bl	8007948 <HAL_SPI_Transmit>
    
}
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	24000288 	.word	0x24000288

08009b5c <TM1638_Init>:
    HAL_SPI_Receive(&TM1638_SPI, &receivedData, 1, HAL_MAX_DELAY);
    return receivedData;
}

void TM1638_Init()
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
    // 2. 디스플레이 및 밝기 설정 (0x8F = 밝기 최대)
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8009b62:	2200      	movs	r2, #0
 8009b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b68:	4833      	ldr	r0, [pc, #204]	@ (8009c38 <TM1638_Init+0xdc>)
 8009b6a:	f7fa fbb5 	bl	80042d8 <HAL_GPIO_WritePin>
    TM1638_SendByte(0x8F);  
 8009b6e:	208f      	movs	r0, #143	@ 0x8f
 8009b70:	f7ff ffe2 	bl	8009b38 <TM1638_SendByte>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009b74:	2201      	movs	r2, #1
 8009b76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b7a:	482f      	ldr	r0, [pc, #188]	@ (8009c38 <TM1638_Init+0xdc>)
 8009b7c:	f7fa fbac 	bl	80042d8 <HAL_GPIO_WritePin>
    // 3. 데이터 설정 (0x40 = 자동 주소 증가 모드)
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8009b80:	2200      	movs	r2, #0
 8009b82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b86:	482c      	ldr	r0, [pc, #176]	@ (8009c38 <TM1638_Init+0xdc>)
 8009b88:	f7fa fba6 	bl	80042d8 <HAL_GPIO_WritePin>
    TM1638_SendByte(0x40);
 8009b8c:	2040      	movs	r0, #64	@ 0x40
 8009b8e:	f7ff ffd3 	bl	8009b38 <TM1638_SendByte>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009b92:	2201      	movs	r2, #1
 8009b94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009b98:	4827      	ldr	r0, [pc, #156]	@ (8009c38 <TM1638_Init+0xdc>)
 8009b9a:	f7fa fb9d 	bl	80042d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009ba4:	4824      	ldr	r0, [pc, #144]	@ (8009c38 <TM1638_Init+0xdc>)
 8009ba6:	f7fa fb97 	bl	80042d8 <HAL_GPIO_WritePin>
    TM1638_SendByte(0xC0);  // 주소 0번부터 시작
 8009baa:	20c0      	movs	r0, #192	@ 0xc0
 8009bac:	f7ff ffc4 	bl	8009b38 <TM1638_SendByte>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009bb6:	4820      	ldr	r0, [pc, #128]	@ (8009c38 <TM1638_Init+0xdc>)
 8009bb8:	f7fa fb8e 	bl	80042d8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009bc2:	481d      	ldr	r0, [pc, #116]	@ (8009c38 <TM1638_Init+0xdc>)
 8009bc4:	f7fa fb88 	bl	80042d8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 16; i++) {
 8009bc8:	2300      	movs	r3, #0
 8009bca:	607b      	str	r3, [r7, #4]
 8009bcc:	e008      	b.n	8009be0 <TM1638_Init+0x84>
        
        TM1638_SendByte(0x00);
 8009bce:	2000      	movs	r0, #0
 8009bd0:	f7ff ffb2 	bl	8009b38 <TM1638_SendByte>
        
        HAL_Delay(10);
 8009bd4:	200a      	movs	r0, #10
 8009bd6:	f7f7 fd3f 	bl	8001658 <HAL_Delay>
    for (int i = 0; i < 16; i++) {
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	607b      	str	r3, [r7, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b0f      	cmp	r3, #15
 8009be4:	ddf3      	ble.n	8009bce <TM1638_Init+0x72>
    }
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009be6:	2201      	movs	r2, #1
 8009be8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009bec:	4812      	ldr	r0, [pc, #72]	@ (8009c38 <TM1638_Init+0xdc>)
 8009bee:	f7fa fb73 	bl	80042d8 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009bf8:	480f      	ldr	r0, [pc, #60]	@ (8009c38 <TM1638_Init+0xdc>)
 8009bfa:	f7fa fb6d 	bl	80042d8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 16; i++) {
 8009bfe:	2300      	movs	r3, #0
 8009c00:	603b      	str	r3, [r7, #0]
 8009c02:	e008      	b.n	8009c16 <TM1638_Init+0xba>
        
        TM1638_SendByte(0xFF);
 8009c04:	20ff      	movs	r0, #255	@ 0xff
 8009c06:	f7ff ff97 	bl	8009b38 <TM1638_SendByte>
        
        HAL_Delay(10);
 8009c0a:	200a      	movs	r0, #10
 8009c0c:	f7f7 fd24 	bl	8001658 <HAL_Delay>
    for (int i = 0; i < 16; i++) {
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	3301      	adds	r3, #1
 8009c14:	603b      	str	r3, [r7, #0]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	2b0f      	cmp	r3, #15
 8009c1a:	ddf3      	ble.n	8009c04 <TM1638_Init+0xa8>
    }
    TM1638_SendByte(0xFF);
 8009c1c:	20ff      	movs	r0, #255	@ 0xff
 8009c1e:	f7ff ff8b 	bl	8009b38 <TM1638_SendByte>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009c22:	2201      	movs	r2, #1
 8009c24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009c28:	4803      	ldr	r0, [pc, #12]	@ (8009c38 <TM1638_Init+0xdc>)
 8009c2a:	f7fa fb55 	bl	80042d8 <HAL_GPIO_WritePin>
}
 8009c2e:	bf00      	nop
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	58021400 	.word	0x58021400

08009c3c <memset>:
 8009c3c:	4402      	add	r2, r0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d100      	bne.n	8009c46 <memset+0xa>
 8009c44:	4770      	bx	lr
 8009c46:	f803 1b01 	strb.w	r1, [r3], #1
 8009c4a:	e7f9      	b.n	8009c40 <memset+0x4>

08009c4c <__libc_init_array>:
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8009c84 <__libc_init_array+0x38>)
 8009c50:	4c0d      	ldr	r4, [pc, #52]	@ (8009c88 <__libc_init_array+0x3c>)
 8009c52:	1b64      	subs	r4, r4, r5
 8009c54:	10a4      	asrs	r4, r4, #2
 8009c56:	2600      	movs	r6, #0
 8009c58:	42a6      	cmp	r6, r4
 8009c5a:	d109      	bne.n	8009c70 <__libc_init_array+0x24>
 8009c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8009c8c <__libc_init_array+0x40>)
 8009c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8009c90 <__libc_init_array+0x44>)
 8009c60:	f000 f818 	bl	8009c94 <_init>
 8009c64:	1b64      	subs	r4, r4, r5
 8009c66:	10a4      	asrs	r4, r4, #2
 8009c68:	2600      	movs	r6, #0
 8009c6a:	42a6      	cmp	r6, r4
 8009c6c:	d105      	bne.n	8009c7a <__libc_init_array+0x2e>
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c74:	4798      	blx	r3
 8009c76:	3601      	adds	r6, #1
 8009c78:	e7ee      	b.n	8009c58 <__libc_init_array+0xc>
 8009c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7e:	4798      	blx	r3
 8009c80:	3601      	adds	r6, #1
 8009c82:	e7f2      	b.n	8009c6a <__libc_init_array+0x1e>
 8009c84:	08009cf4 	.word	0x08009cf4
 8009c88:	08009cf4 	.word	0x08009cf4
 8009c8c:	08009cf4 	.word	0x08009cf4
 8009c90:	08009cf8 	.word	0x08009cf8

08009c94 <_init>:
 8009c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c96:	bf00      	nop
 8009c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c9a:	bc08      	pop	{r3}
 8009c9c:	469e      	mov	lr, r3
 8009c9e:	4770      	bx	lr

08009ca0 <_fini>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	bf00      	nop
 8009ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca6:	bc08      	pop	{r3}
 8009ca8:	469e      	mov	lr, r3
 8009caa:	4770      	bx	lr
