
ToyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800926c  0800926c  0000a26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080092b0  080092b0  0000a2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080092b8  080092b8  0000a2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080092bc  080092bc  0000a2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080092c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080092d0  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009330  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000848  240000d0  08009390  0000b0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000918  08009390  0000b918  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c4b  00000000  00000000  0000b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c6c  00000000  00000000  0002fd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  000349b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001458  00000000  00000000  00036420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003db19  00000000  00000000  00037878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f62  00000000  00000000  00075391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176e3e  00000000  00000000  0009e2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00215131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e1c  00000000  00000000  00215174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0021bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009254 	.word	0x08009254

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009254 	.word	0x08009254

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <MX_CRC_Init+0x3c>)
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <MX_CRC_Init+0x40>)
 80005d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_CRC_Init+0x3c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_CRC_Init+0x3c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_CRC_Init+0x3c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <MX_CRC_Init+0x3c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_CRC_Init+0x3c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_CRC_Init+0x3c>)
 80005f2:	f001 fa89 	bl	8001b08 <HAL_CRC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005fc:	f000 fbd5 	bl	8000daa <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	240000ec 	.word	0x240000ec
 8000608:	58024c00 	.word	0x58024c00

0800060c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <HAL_CRC_MspInit+0x3c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10e      	bne.n	800063c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <HAL_CRC_MspInit+0x40>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000624:	4a09      	ldr	r2, [pc, #36]	@ (800064c <HAL_CRC_MspInit+0x40>)
 8000626:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800062a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <HAL_CRC_MspInit+0x40>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000634:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024c00 	.word	0x58024c00
 800064c:	58024400 	.word	0x58024400

08000650 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000654:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <MX_ETH_Init+0x80>)
 8000656:	4a1f      	ldr	r2, [pc, #124]	@ (80006d4 <MX_ETH_Init+0x84>)
 8000658:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_ETH_Init+0x88>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000660:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_ETH_Init+0x88>)
 8000662:	2280      	movs	r2, #128	@ 0x80
 8000664:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_ETH_Init+0x88>)
 8000668:	22e1      	movs	r2, #225	@ 0xe1
 800066a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_ETH_Init+0x88>)
 800066e:	2200      	movs	r2, #0
 8000670:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_ETH_Init+0x88>)
 8000674:	2200      	movs	r2, #0
 8000676:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_ETH_Init+0x88>)
 800067a:	2200      	movs	r2, #0
 800067c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_ETH_Init+0x80>)
 8000680:	4a15      	ldr	r2, [pc, #84]	@ (80006d8 <MX_ETH_Init+0x88>)
 8000682:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_ETH_Init+0x80>)
 8000686:	2201      	movs	r2, #1
 8000688:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_ETH_Init+0x80>)
 800068c:	4a13      	ldr	r2, [pc, #76]	@ (80006dc <MX_ETH_Init+0x8c>)
 800068e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_ETH_Init+0x80>)
 8000692:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <MX_ETH_Init+0x90>)
 8000694:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <MX_ETH_Init+0x80>)
 8000698:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800069c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800069e:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <MX_ETH_Init+0x80>)
 80006a0:	f001 fb24 	bl	8001cec <HAL_ETH_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80006aa:	f000 fb7e 	bl	8000daa <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ae:	2238      	movs	r2, #56	@ 0x38
 80006b0:	2100      	movs	r1, #0
 80006b2:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_ETH_Init+0x94>)
 80006b4:	f008 fda2 	bl	80091fc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_ETH_Init+0x94>)
 80006ba:	2221      	movs	r2, #33	@ 0x21
 80006bc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_ETH_Init+0x94>)
 80006c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006c4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_ETH_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	24000148 	.word	0x24000148
 80006d4:	40028000 	.word	0x40028000
 80006d8:	240001f8 	.word	0x240001f8
 80006dc:	24000070 	.word	0x24000070
 80006e0:	24000010 	.word	0x24000010
 80006e4:	24000110 	.word	0x24000110

080006e8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	@ 0x38
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a59      	ldr	r2, [pc, #356]	@ (800086c <HAL_ETH_MspInit+0x184>)
 8000706:	4293      	cmp	r3, r2
 8000708:	f040 80ab 	bne.w	8000862 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800070c:	4b58      	ldr	r3, [pc, #352]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000712:	4a57      	ldr	r2, [pc, #348]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 8000714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000718:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800071c:	4b54      	ldr	r3, [pc, #336]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800071e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000722:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800072a:	4b51      	ldr	r3, [pc, #324]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000730:	4a4f      	ldr	r2, [pc, #316]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 8000732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000736:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800073a:	4b4d      	ldr	r3, [pc, #308]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800073c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000748:	4b49      	ldr	r3, [pc, #292]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800074e:	4a48      	ldr	r2, [pc, #288]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000754:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000758:	4b45      	ldr	r3, [pc, #276]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800075a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800075e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b42      	ldr	r3, [pc, #264]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	4a40      	ldr	r2, [pc, #256]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000776:	4b3e      	ldr	r3, [pc, #248]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b3a      	ldr	r3, [pc, #232]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078a:	4a39      	ldr	r2, [pc, #228]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000794:	4b36      	ldr	r3, [pc, #216]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b33      	ldr	r3, [pc, #204]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a8:	4a31      	ldr	r2, [pc, #196]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d0:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <HAL_ETH_MspInit+0x188>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80007de:	2332      	movs	r3, #50	@ 0x32
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f6:	4619      	mov	r1, r3
 80007f8:	481e      	ldr	r0, [pc, #120]	@ (8000874 <HAL_ETH_MspInit+0x18c>)
 80007fa:	f001 feab 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80007fe:	2386      	movs	r3, #134	@ 0x86
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080e:	230b      	movs	r3, #11
 8000810:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	4817      	ldr	r0, [pc, #92]	@ (8000878 <HAL_ETH_MspInit+0x190>)
 800081a:	f001 fe9b 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000830:	230b      	movs	r3, #11
 8000832:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	4810      	ldr	r0, [pc, #64]	@ (800087c <HAL_ETH_MspInit+0x194>)
 800083c:	f001 fe8a 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000840:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000852:	230b      	movs	r3, #11
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4808      	ldr	r0, [pc, #32]	@ (8000880 <HAL_ETH_MspInit+0x198>)
 800085e:	f001 fe79 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	@ 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40028000 	.word	0x40028000
 8000870:	58024400 	.word	0x58024400
 8000874:	58020800 	.word	0x58020800
 8000878:	58020000 	.word	0x58020000
 800087c:	58020400 	.word	0x58020400
 8000880:	58021800 	.word	0x58021800

08000884 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PB5   ------> SPI6_MOSI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	@ 0x38
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	4b85      	ldr	r3, [pc, #532]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a0:	4a83      	ldr	r2, [pc, #524]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008aa:	4b81      	ldr	r3, [pc, #516]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b0:	f003 0310 	and.w	r3, r3, #16
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b8:	4b7d      	ldr	r3, [pc, #500]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008be:	4a7c      	ldr	r2, [pc, #496]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c8:	4b79      	ldr	r3, [pc, #484]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	61fb      	str	r3, [r7, #28]
 80008d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d6:	4b76      	ldr	r3, [pc, #472]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	4a74      	ldr	r2, [pc, #464]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e6:	4b72      	ldr	r3, [pc, #456]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	f003 0320 	and.w	r3, r3, #32
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f4:	4b6e      	ldr	r3, [pc, #440]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008fa:	4a6d      	ldr	r2, [pc, #436]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000904:	4b6a      	ldr	r3, [pc, #424]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b67      	ldr	r3, [pc, #412]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a65      	ldr	r2, [pc, #404]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b63      	ldr	r3, [pc, #396]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000936:	4a5e      	ldr	r2, [pc, #376]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000940:	4b5b      	ldr	r3, [pc, #364]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	4b58      	ldr	r3, [pc, #352]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a56      	ldr	r2, [pc, #344]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b54      	ldr	r3, [pc, #336]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096c:	4b50      	ldr	r3, [pc, #320]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a4f      	ldr	r2, [pc, #316]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab0 <MX_GPIO_Init+0x22c>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000990:	4848      	ldr	r0, [pc, #288]	@ (8000ab4 <MX_GPIO_Init+0x230>)
 8000992:	f001 ff8f 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f244 0101 	movw	r1, #16385	@ 0x4001
 800099c:	4846      	ldr	r0, [pc, #280]	@ (8000ab8 <MX_GPIO_Init+0x234>)
 800099e:	f001 ff89 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2103      	movs	r1, #3
 80009a6:	4845      	ldr	r0, [pc, #276]	@ (8000abc <MX_GPIO_Init+0x238>)
 80009a8:	f001 ff84 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b2:	4843      	ldr	r0, [pc, #268]	@ (8000ac0 <MX_GPIO_Init+0x23c>)
 80009b4:	f001 ff7e 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2102      	movs	r1, #2
 80009bc:	4841      	ldr	r0, [pc, #260]	@ (8000ac4 <MX_GPIO_Init+0x240>)
 80009be:	f001 ff79 	bl	80028b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	483c      	ldr	r0, [pc, #240]	@ (8000ac8 <MX_GPIO_Init+0x244>)
 80009d8:	f001 fdbc 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_STB_Pin;
 80009dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_STB_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	482f      	ldr	r0, [pc, #188]	@ (8000ab4 <MX_GPIO_Init+0x230>)
 80009f6:	f001 fdad 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009fa:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4829      	ldr	r0, [pc, #164]	@ (8000ab8 <MX_GPIO_Init+0x234>)
 8000a14:	f001 fd9e 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RESET_Pin;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4823      	ldr	r0, [pc, #140]	@ (8000abc <MX_GPIO_Init+0x238>)
 8000a30:	f001 fd90 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481c      	ldr	r0, [pc, #112]	@ (8000ac0 <MX_GPIO_Init+0x23c>)
 8000a4e:	f001 fd81 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	4815      	ldr	r0, [pc, #84]	@ (8000abc <MX_GPIO_Init+0x238>)
 8000a68:	f001 fd74 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_GPIO_Init+0x234>)
 8000a88:	f001 fd64 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <MX_GPIO_Init+0x240>)
 8000aa4:	f001 fd56 	bl	8002554 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3738      	adds	r7, #56	@ 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	58021400 	.word	0x58021400
 8000ab8:	58020400 	.word	0x58020400
 8000abc:	58021800 	.word	0x58021800
 8000ac0:	58020c00 	.word	0x58020c00
 8000ac4:	58021000 	.word	0x58021000
 8000ac8:	58020800 	.word	0x58020800

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ad2:	4b40      	ldr	r3, [pc, #256]	@ (8000bd4 <main+0x108>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11b      	bne.n	8000b16 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ade:	f3bf 8f4f 	dsb	sy
}
 8000ae2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae4:	f3bf 8f6f 	isb	sy
}
 8000ae8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000aea:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd4 <main+0x108>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000af2:	f3bf 8f4f 	dsb	sy
}
 8000af6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af8:	f3bf 8f6f 	isb	sy
}
 8000afc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000afe:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <main+0x108>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a34      	ldr	r2, [pc, #208]	@ (8000bd4 <main+0x108>)
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0a:	f3bf 8f4f 	dsb	sy
}
 8000b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b10:	f3bf 8f6f 	isb	sy
}
 8000b14:	e000      	b.n	8000b18 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b16:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b18:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <main+0x108>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d138      	bne.n	8000b96 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b24:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <main+0x108>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b32:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <main+0x108>)
 8000b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000b38:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	0b5b      	lsrs	r3, r3, #13
 8000b3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b42:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b4c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	015a      	lsls	r2, r3, #5
 8000b52:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000b56:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b5c:	491d      	ldr	r1, [pc, #116]	@ (8000bd4 <main+0x108>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ef      	bne.n	8000b4e <main+0x82>
    } while(sets-- != 0U);
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60ba      	str	r2, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1e5      	bne.n	8000b44 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b78:	f3bf 8f4f 	dsb	sy
}
 8000b7c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <main+0x108>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <main+0x108>)
 8000b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8a:	f3bf 8f4f 	dsb	sy
}
 8000b8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b90:	f3bf 8f6f 	isb	sy
}
 8000b94:	e000      	b.n	8000b98 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b96:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b98:	f000 fdfc 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9c:	f000 f81c 	bl	8000bd8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ba0:	f000 f8d4 	bl	8000d4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f7ff fe6e 	bl	8000884 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ba8:	f000 fd1c 	bl	80015e4 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8000bac:	f000 f904 	bl	8000db8 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000bb0:	f000 fc62 	bl	8001478 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000bb4:	f000 fb90 	bl	80012d8 <MX_TIM2_Init>
  MX_CRC_Init();
 8000bb8:	f7ff fd06 	bl	80005c8 <MX_CRC_Init>
  MX_ETH_Init();
 8000bbc:	f7ff fd48 	bl	8000650 <MX_ETH_Init>
  MX_SPI4_Init();
 8000bc0:	f000 f988 	bl	8000ed4 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000bc4:	f000 f9dc 	bl	8000f80 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  extern void User_SystemInit();
  User_SystemInit();
 8000bc8:	f008 f9cc 	bl	8008f64 <User_SystemInit>
  extern void User_RunSystem();
  User_RunSystem();
 8000bcc:	f008 fa38 	bl	8009040 <User_RunSystem>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <main+0x104>
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09e      	sub	sp, #120	@ 0x78
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be2:	224c      	movs	r2, #76	@ 0x4c
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 fb08 	bl	80091fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 fb01 	bl	80091fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f001 ffb4 	bl	8002b68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b4e      	ldr	r3, [pc, #312]	@ (8000d40 <SystemClock_Config+0x168>)
 8000c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c08:	4a4d      	ldr	r2, [pc, #308]	@ (8000d40 <SystemClock_Config+0x168>)
 8000c0a:	f023 0301 	bic.w	r3, r3, #1
 8000c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c10:	4b4b      	ldr	r3, [pc, #300]	@ (8000d40 <SystemClock_Config+0x168>)
 8000c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	4a49      	ldr	r2, [pc, #292]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c24:	6193      	str	r3, [r2, #24]
 8000c26:	4b47      	ldr	r3, [pc, #284]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c32:	bf00      	nop
 8000c34:	4b43      	ldr	r3, [pc, #268]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c40:	d1f8      	bne.n	8000c34 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <SystemClock_Config+0x170>)
 8000c44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c48:	4a3f      	ldr	r2, [pc, #252]	@ (8000d48 <SystemClock_Config+0x170>)
 8000c4a:	f043 0302 	orr.w	r3, r3, #2
 8000c4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c52:	4b3d      	ldr	r3, [pc, #244]	@ (8000d48 <SystemClock_Config+0x170>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4b37      	ldr	r3, [pc, #220]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a36      	ldr	r2, [pc, #216]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b34      	ldr	r3, [pc, #208]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b31      	ldr	r3, [pc, #196]	@ (8000d40 <SystemClock_Config+0x168>)
 8000c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7e:	4a30      	ldr	r2, [pc, #192]	@ (8000d40 <SystemClock_Config+0x168>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c86:	4b2e      	ldr	r3, [pc, #184]	@ (8000d40 <SystemClock_Config+0x168>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c92:	bf00      	nop
 8000c94:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <SystemClock_Config+0x16c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ca0:	d1f8      	bne.n	8000c94 <SystemClock_Config+0xbc>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ca2:	f001 ff51 	bl	8002b48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ca6:	f000 fe2b 	bl	8001900 <HAL_GetREVID>
 8000caa:	4b27      	ldr	r3, [pc, #156]	@ (8000d48 <SystemClock_Config+0x170>)
 8000cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cae:	4a26      	ldr	r2, [pc, #152]	@ (8000d48 <SystemClock_Config+0x170>)
 8000cb0:	f023 0318 	bic.w	r3, r3, #24
 8000cb4:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cba:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000cd0:	2378      	movs	r3, #120	@ 0x78
 8000cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000cd8:	2314      	movs	r3, #20
 8000cda:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 ff83 	bl	8002bfc <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000cfc:	f000 f855 	bl	8000daa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	233f      	movs	r3, #63	@ 0x3f
 8000d02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2303      	movs	r3, #3
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d10:	2340      	movs	r3, #64	@ 0x40
 8000d12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d14:	2340      	movs	r3, #64	@ 0x40
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d1e:	2340      	movs	r3, #64	@ 0x40
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2104      	movs	r1, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fbc1 	bl	80034b0 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8000d34:	f000 f839 	bl	8000daa <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3778      	adds	r7, #120	@ 0x78
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	58000400 	.word	0x58000400
 8000d44:	58024800 	.word	0x58024800
 8000d48:	58024400 	.word	0x58024400

08000d4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0b0      	sub	sp, #192	@ 0xc0
 8000d50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	22c0      	movs	r2, #192	@ 0xc0
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f008 fa4f 	bl	80091fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_SPI5;
 8000d5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 120;
 8000d6e:	2378      	movs	r3, #120	@ 0x78
 8000d70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d72:	2302      	movs	r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8000d76:	2314      	movs	r3, #20
 8000d78:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d7e:	23c0      	movs	r3, #192	@ 0xc0
 8000d80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d8e:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 ff18 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000d9e:	f000 f804 	bl	8000daa <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	37c0      	adds	r7, #192	@ 0xc0
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dae:	b672      	cpsid	i
}
 8000db0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db2:	bf00      	nop
 8000db4:	e7fd      	b.n	8000db2 <Error_Handler+0x8>
	...

08000db8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dd0:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000dd2:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <MX_RTC_Init+0xb4>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000dde:	227f      	movs	r2, #127	@ 0x7f
 8000de0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000de2:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000de4:	22ff      	movs	r2, #255	@ 0xff
 8000de6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000de8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e00:	4819      	ldr	r0, [pc, #100]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000e02:	f004 fd0d 	bl	8005820 <HAL_RTC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000e0c:	f7ff ffcd 	bl	8000daa <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2201      	movs	r2, #1
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000e2c:	f004 fd7a 	bl	8005924 <HAL_RTC_SetTime>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e36:	f7ff ffb8 	bl	8000daa <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_RTC_Init+0xb0>)
 8000e52:	f004 fe61 	bl	8005b18 <HAL_RTC_SetDate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000e5c:	f7ff ffa5 	bl	8000daa <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	24000200 	.word	0x24000200
 8000e6c:	58004000 	.word	0x58004000

08000e70 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0b2      	sub	sp, #200	@ 0xc8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	22c0      	movs	r2, #192	@ 0xc0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f008 f9bb 	bl	80091fc <memset>
  if(rtcHandle->Instance==RTC)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <HAL_RTC_MspInit+0x5c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d119      	bne.n	8000ec4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f002 fe8d 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000eb4:	f7ff ff79 	bl	8000daa <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_RTC_MspInit+0x60>)
 8000eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_RTC_MspInit+0x60>)
 8000ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ec2:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	37c8      	adds	r7, #200	@ 0xc8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58004000 	.word	0x58004000
 8000ed0:	58024400 	.word	0x58024400

08000ed4 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000eda:	4a28      	ldr	r2, [pc, #160]	@ (8000f7c <MX_SPI4_Init+0xa8>)
 8000edc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000ee0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ee4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee6:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eec:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000eee:	2207      	movs	r2, #7
 8000ef0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f04:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <MX_SPI4_Init+0xa4>)
 8000f64:	f004 ff7e 	bl	8005e64 <HAL_SPI_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000f6e:	f7ff ff1c 	bl	8000daa <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24000224 	.word	0x24000224
 8000f7c:	40013400 	.word	0x40013400

08000f80 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000f86:	4a29      	ldr	r2, [pc, #164]	@ (800102c <MX_SPI5_Init+0xac>)
 8000f88:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000f8a:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000f8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f90:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8000f92:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000f94:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000f98:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa0:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fb2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fbe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000fc2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fdc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8001004:	2200      	movs	r2, #0
 8001006:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <MX_SPI5_Init+0xa8>)
 800100a:	2200      	movs	r2, #0
 800100c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	@ (8001028 <MX_SPI5_Init+0xa8>)
 8001016:	f004 ff25 	bl	8005e64 <HAL_SPI_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_SPI5_Init+0xa4>
  {
    Error_Handler();
 8001020:	f7ff fec3 	bl	8000daa <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	240002ac 	.word	0x240002ac
 800102c:	40015000 	.word	0x40015000

08001030 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	@ 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <HAL_SPI_MspInit+0xf0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12e      	bne.n	80010b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001052:	4b34      	ldr	r3, [pc, #208]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 8001054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001058:	4a32      	ldr	r2, [pc, #200]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 800105a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800105e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001062:	4b30      	ldr	r3, [pc, #192]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 8001064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001070:	4b2c      	ldr	r3, [pc, #176]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	4a2b      	ldr	r2, [pc, #172]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001080:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800108e:	2374      	movs	r3, #116	@ 0x74
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800109e:	2305      	movs	r3, #5
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	481f      	ldr	r0, [pc, #124]	@ (8001128 <HAL_SPI_MspInit+0xf8>)
 80010aa:	f001 fa53 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80010ae:	e033      	b.n	8001118 <HAL_SPI_MspInit+0xe8>
  else if(spiHandle->Instance==SPI5)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <HAL_SPI_MspInit+0xfc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d12e      	bne.n	8001118 <HAL_SPI_MspInit+0xe8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 80010bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c0:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 80010c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 80010cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	4a11      	ldr	r2, [pc, #68]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_SPI_MspInit+0xf4>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	f003 0320 	and.w	r3, r3, #32
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80010f6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001108:	2305      	movs	r3, #5
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4807      	ldr	r0, [pc, #28]	@ (8001130 <HAL_SPI_MspInit+0x100>)
 8001114:	f001 fa1e 	bl	8002554 <HAL_GPIO_Init>
}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	@ 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40013400 	.word	0x40013400
 8001124:	58024400 	.word	0x58024400
 8001128:	58021000 	.word	0x58021000
 800112c:	40015000 	.word	0x40015000
 8001130:	58021400 	.word	0x58021400

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_MspInit+0x30>)
 800113c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001140:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_MspInit+0x30>)
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_MspInit+0x30>)
 800114c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	58024400 	.word	0x58024400

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011be:	f000 fb5b 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011cc:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <SystemInit+0xe4>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d2:	4a36      	ldr	r2, [pc, #216]	@ (80012ac <SystemInit+0xe4>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011dc:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <SystemInit+0xe8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	2b06      	cmp	r3, #6
 80011e6:	d807      	bhi.n	80011f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e8:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <SystemInit+0xe8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	4a2f      	ldr	r2, [pc, #188]	@ (80012b0 <SystemInit+0xe8>)
 80011f2:	f043 0307 	orr.w	r3, r3, #7
 80011f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011f8:	4b2e      	ldr	r3, [pc, #184]	@ (80012b4 <SystemInit+0xec>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a2d      	ldr	r2, [pc, #180]	@ (80012b4 <SystemInit+0xec>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001204:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <SystemInit+0xec>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800120a:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <SystemInit+0xec>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4929      	ldr	r1, [pc, #164]	@ (80012b4 <SystemInit+0xec>)
 8001210:	4b29      	ldr	r3, [pc, #164]	@ (80012b8 <SystemInit+0xf0>)
 8001212:	4013      	ands	r3, r2
 8001214:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001216:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <SystemInit+0xe8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d007      	beq.n	8001232 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001222:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <SystemInit+0xe8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 030f 	bic.w	r3, r3, #15
 800122a:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <SystemInit+0xe8>)
 800122c:	f043 0307 	orr.w	r3, r3, #7
 8001230:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <SystemInit+0xec>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <SystemInit+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <SystemInit+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <SystemInit+0xec>)
 8001246:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <SystemInit+0xf4>)
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <SystemInit+0xec>)
 800124c:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <SystemInit+0xf8>)
 800124e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <SystemInit+0xec>)
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <SystemInit+0xfc>)
 8001254:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <SystemInit+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <SystemInit+0xec>)
 800125e:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <SystemInit+0xfc>)
 8001260:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <SystemInit+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <SystemInit+0xec>)
 800126a:	4a16      	ldr	r2, [pc, #88]	@ (80012c4 <SystemInit+0xfc>)
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <SystemInit+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <SystemInit+0xec>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <SystemInit+0xec>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <SystemInit+0xec>)
 8001282:	2200      	movs	r2, #0
 8001284:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <SystemInit+0x100>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <SystemInit+0x104>)
 800128c:	4013      	ands	r3, r2
 800128e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001292:	d202      	bcs.n	800129a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001294:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <SystemInit+0x108>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <SystemInit+0x10c>)
 800129c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00
 80012b0:	52002000 	.word	0x52002000
 80012b4:	58024400 	.word	0x58024400
 80012b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80012bc:	02020200 	.word	0x02020200
 80012c0:	01ff0000 	.word	0x01ff0000
 80012c4:	01010280 	.word	0x01010280
 80012c8:	5c001000 	.word	0x5c001000
 80012cc:	ffff0000 	.word	0xffff0000
 80012d0:	51008108 	.word	0x51008108
 80012d4:	52004000 	.word	0x52004000

080012d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	@ 0x38
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 800130c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240000 - 1 /* 240MHz / 240000 = 1KHz, 1ms */;
 8001312:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 8001314:	4a2b      	ldr	r2, [pc, #172]	@ (80013c4 <MX_TIM2_Init+0xec>)
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 8001320:	2263      	movs	r2, #99	@ 0x63
 8001322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001330:	4823      	ldr	r0, [pc, #140]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 8001332:	f005 f992 	bl	800665a <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800133c:	f7ff fd35 	bl	8000daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 800134e:	f005 fc5f 	bl	8006c10 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001358:	f7ff fd27 	bl	8000daa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800135c:	4818      	ldr	r0, [pc, #96]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 800135e:	f005 f9d3 	bl	8006708 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001368:	f7ff fd1f 	bl	8000daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 800137c:	f006 f980 	bl	8007680 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001386:	f7ff fd10 	bl	8000daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	@ 0x60
 800138c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 80013a2:	f005 fb21 	bl	80069e8 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013ac:	f7ff fcfd 	bl	8000daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <MX_TIM2_Init+0xe8>)
 80013b2:	f000 f829 	bl	8001408 <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3738      	adds	r7, #56	@ 0x38
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000334 	.word	0x24000334
 80013c4:	0003a97f 	.word	0x0003a97f

080013c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013d8:	d10e      	bne.n	80013f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013e0:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	58024400 	.word	0x58024400

08001408 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001428:	d11e      	bne.n	8001468 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_TIM_MspPostInit+0x68>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <HAL_TIM_MspPostInit+0x68>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <HAL_TIM_MspPostInit+0x68>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001448:	2301      	movs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001458:	2301      	movs	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	4804      	ldr	r0, [pc, #16]	@ (8001474 <HAL_TIM_MspPostInit+0x6c>)
 8001464:	f001 f876 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	58024400 	.word	0x58024400
 8001474:	58020000 	.word	0x58020000

08001478 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800147e:	4a23      	ldr	r2, [pc, #140]	@ (800150c <MX_USART3_UART_Init+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ba:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014c2:	f006 f96b 	bl	800779c <HAL_UART_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014cc:	f7ff fc6d 	bl	8000daa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014d4:	f007 f973 	bl	80087be <HAL_UARTEx_SetTxFifoThreshold>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014de:	f7ff fc64 	bl	8000daa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014e6:	f007 f9a8 	bl	800883a <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014f0:	f7ff fc5b 	bl	8000daa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	@ (8001508 <MX_USART3_UART_Init+0x90>)
 80014f6:	f007 f929 	bl	800874c <HAL_UARTEx_DisableFifoMode>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001500:	f7ff fc53 	bl	8000daa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24000380 	.word	0x24000380
 800150c:	40004800 	.word	0x40004800

08001510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0ba      	sub	sp, #232	@ 0xe8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	22c0      	movs	r2, #192	@ 0xc0
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f007 fe63 	bl	80091fc <memset>
  if(uartHandle->Instance==USART3)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <HAL_UART_MspInit+0xc8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d146      	bne.n	80015ce <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001540:	f04f 0202 	mov.w	r2, #2
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fb36 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001562:	f7ff fc22 	bl	8000daa <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <HAL_UART_MspInit+0xcc>)
 8001568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800156c:	4a1b      	ldr	r2, [pc, #108]	@ (80015dc <HAL_UART_MspInit+0xcc>)
 800156e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001572:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001576:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_UART_MspInit+0xcc>)
 8001578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800157c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_UART_MspInit+0xcc>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <HAL_UART_MspInit+0xcc>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <HAL_UART_MspInit+0xcc>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015bc:	2307      	movs	r3, #7
 80015be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <HAL_UART_MspInit+0xd0>)
 80015ca:	f000 ffc3 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015ce:	bf00      	nop
 80015d0:	37e8      	adds	r7, #232	@ 0xe8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40004800 	.word	0x40004800
 80015dc:	58024400 	.word	0x58024400
 80015e0:	58020c00 	.word	0x58020c00

080015e4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015e8:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ea:	4a16      	ldr	r2, [pc, #88]	@ (8001644 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80015ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f0:	2209      	movs	r2, #9
 80015f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001600:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001602:	2202      	movs	r2, #2
 8001604:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001608:	2201      	movs	r2, #1
 800160a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800160e:	2200      	movs	r2, #0
 8001610:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001614:	2200      	movs	r2, #0
 8001616:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800161a:	2201      	movs	r2, #1
 800161c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800161e:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001620:	2201      	movs	r2, #1
 8001622:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001626:	2200      	movs	r2, #0
 8001628:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800162c:	f001 f95b 	bl	80028e6 <HAL_PCD_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001636:	f7ff fbb8 	bl	8000daa <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	24000414 	.word	0x24000414
 8001644:	40080000 	.word	0x40080000

08001648 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0ba      	sub	sp, #232	@ 0xe8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	22c0      	movs	r2, #192	@ 0xc0
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f007 fdc7 	bl	80091fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a30      	ldr	r2, [pc, #192]	@ (8001734 <HAL_PCD_MspInit+0xec>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d159      	bne.n	800172c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001678:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001684:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4618      	mov	r0, r3
 8001692:	f002 fa99 	bl	8003bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800169c:	f7ff fb85 	bl	8000daa <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80016a0:	f001 fa9c 	bl	8002bdc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <HAL_PCD_MspInit+0xf0>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016aa:	4a23      	ldr	r2, [pc, #140]	@ (8001738 <HAL_PCD_MspInit+0xf0>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b4:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_PCD_MspInit+0xf0>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80016c2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80016c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016dc:	230a      	movs	r3, #10
 80016de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4814      	ldr	r0, [pc, #80]	@ (800173c <HAL_PCD_MspInit+0xf4>)
 80016ea:	f000 ff33 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <HAL_PCD_MspInit+0xf4>)
 800170a:	f000 ff23 	bl	8002554 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_PCD_MspInit+0xf0>)
 8001710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001714:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_PCD_MspInit+0xf0>)
 8001716:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800171a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_PCD_MspInit+0xf0>)
 8001720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800172c:	bf00      	nop
 800172e:	37e8      	adds	r7, #232	@ 0xe8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40080000 	.word	0x40080000
 8001738:	58024400 	.word	0x58024400
 800173c:	58020000 	.word	0x58020000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001778 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001744:	f7ff fd40 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	@ (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	@ (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f007 fd4d 	bl	800920c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff f9ab 	bl	8000acc <main>
  bx  lr
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800177c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001780:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001784:	080092c0 	.word	0x080092c0
  ldr r2, =_sbss
 8001788:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800178c:	24000918 	.word	0x24000918

08001790 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC3_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179a:	2003      	movs	r0, #3
 800179c:	f000 f982 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a0:	f002 f83c 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_Init+0x68>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	4913      	ldr	r1, [pc, #76]	@ (8001800 <HAL_Init+0x6c>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_Init+0x68>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <HAL_Init+0x6c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001804 <HAL_Init+0x70>)
 80017d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001808 <HAL_Init+0x74>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f814 	bl	800180c <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e002      	b.n	80017f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ee:	f7ff fca1 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	58024400 	.word	0x58024400
 8001800:	0800926c 	.word	0x0800926c
 8001804:	24000004 	.word	0x24000004
 8001808:	24000000 	.word	0x24000000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_InitTick+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e021      	b.n	8001864 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <HAL_InitTick+0x64>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_InitTick+0x60>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f959 	bl	8001aee <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f931 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <HAL_InitTick+0x68>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2400000c 	.word	0x2400000c
 8001870:	24000000 	.word	0x24000000
 8001874:	24000008 	.word	0x24000008

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2400000c 	.word	0x2400000c
 800189c:	240008f8 	.word	0x240008f8

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	240008f8 	.word	0x240008f8

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2400000c 	.word	0x2400000c

08001900 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001904:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <HAL_GetREVID+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0c1b      	lsrs	r3, r3, #16
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	5c001000 	.word	0x5c001000

08001918 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001928:	4904      	ldr	r1, [pc, #16]	@ (800193c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	58000400 	.word	0x58000400

08001940 <__NVIC_SetPriorityGrouping>:
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <__NVIC_SetPriorityGrouping+0x40>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	4313      	orrs	r3, r2
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <__NVIC_SetPriorityGrouping+0x40>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00
 8001984:	05fa0000 	.word	0x05fa0000

08001988 <__NVIC_GetPriorityGrouping>:
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_SetPriority>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff47 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff5e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffb2 	bl	8001a60 <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e054      	b.n	8001bc4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7f5b      	ldrb	r3, [r3, #29]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe fd6e 	bl	800060c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <HAL_CRC_Init+0xc4>)
 8001b44:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0218 	bic.w	r2, r2, #24
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	e00c      	b.n	8001b72 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6899      	ldr	r1, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	461a      	mov	r2, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f834 	bl	8001bd0 <HAL_CRCEx_Polynomial_Set>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e028      	b.n	8001bc4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	795b      	ldrb	r3, [r3, #5]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b82:	611a      	str	r2, [r3, #16]
 8001b84:	e004      	b.n	8001b90 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6912      	ldr	r2, [r2, #16]
 8001b8e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	04c11db7 	.word	0x04c11db7

08001bd0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001be0:	231f      	movs	r3, #31
 8001be2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
 8001bf2:	e063      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001bf4:	bf00      	nop
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	613a      	str	r2, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_CRCEx_Polynomial_Set+0x44>
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	d846      	bhi.n	8001ca8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001caf 	.word	0x08001caf
 8001c24:	08001ca9 	.word	0x08001ca9
 8001c28:	08001ca9 	.word	0x08001ca9
 8001c2c:	08001ca9 	.word	0x08001ca9
 8001c30:	08001ca9 	.word	0x08001ca9
 8001c34:	08001ca9 	.word	0x08001ca9
 8001c38:	08001ca9 	.word	0x08001ca9
 8001c3c:	08001ca9 	.word	0x08001ca9
 8001c40:	08001c9d 	.word	0x08001c9d
 8001c44:	08001ca9 	.word	0x08001ca9
 8001c48:	08001ca9 	.word	0x08001ca9
 8001c4c:	08001ca9 	.word	0x08001ca9
 8001c50:	08001ca9 	.word	0x08001ca9
 8001c54:	08001ca9 	.word	0x08001ca9
 8001c58:	08001ca9 	.word	0x08001ca9
 8001c5c:	08001ca9 	.word	0x08001ca9
 8001c60:	08001c91 	.word	0x08001c91
 8001c64:	08001ca9 	.word	0x08001ca9
 8001c68:	08001ca9 	.word	0x08001ca9
 8001c6c:	08001ca9 	.word	0x08001ca9
 8001c70:	08001ca9 	.word	0x08001ca9
 8001c74:	08001ca9 	.word	0x08001ca9
 8001c78:	08001ca9 	.word	0x08001ca9
 8001c7c:	08001ca9 	.word	0x08001ca9
 8001c80:	08001c85 	.word	0x08001c85
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d913      	bls.n	8001cb2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001c8e:	e010      	b.n	8001cb2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b07      	cmp	r3, #7
 8001c94:	d90f      	bls.n	8001cb6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001c9a:	e00c      	b.n	8001cb6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	d90b      	bls.n	8001cba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001ca6:	e008      	b.n	8001cba <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
        break;
 8001cac:	e006      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cae:	bf00      	nop
 8001cb0:	e004      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cb2:	bf00      	nop
 8001cb4:	e002      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cb6:	bf00      	nop
 8001cb8:	e000      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 0118 	bic.w	r1, r3, #24
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0e3      	b.n	8001ec6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2223      	movs	r2, #35	@ 0x23
 8001d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7fe fce9 	bl	80006e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed0 <HAL_ETH_Init+0x1e4>)
 8001d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d1c:	4a6c      	ldr	r2, [pc, #432]	@ (8001ed0 <HAL_ETH_Init+0x1e4>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d26:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed0 <HAL_ETH_Init+0x1e4>)
 8001d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7a1b      	ldrb	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d103      	bne.n	8001d44 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff fdeb 	bl	8001918 <HAL_SYSCFG_ETHInterfaceSelect>
 8001d42:	e003      	b.n	8001d4c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001d44:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001d48:	f7ff fde6 	bl	8001918 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001d4c:	4b61      	ldr	r3, [pc, #388]	@ (8001ed4 <HAL_ETH_Init+0x1e8>)
 8001d4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d68:	f7ff fd9a 	bl	80018a0 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d6e:	e011      	b.n	8001d94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d70:	f7ff fd96 	bl	80018a0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d7e:	d909      	bls.n	8001d94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2204      	movs	r2, #4
 8001d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	22e0      	movs	r2, #224	@ 0xe0
 8001d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e098      	b.n	8001ec6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1e4      	bne.n	8001d70 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f89e 	bl	8001ee8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001dac:	f001 feb0 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a49      	ldr	r2, [pc, #292]	@ (8001ed8 <HAL_ETH_Init+0x1ec>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	0c9a      	lsrs	r2, r3, #18
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3a01      	subs	r2, #1
 8001dc0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fa81 	bl	80022cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001dd6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001de2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001de6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	22e0      	movs	r2, #224	@ 0xe0
 8001e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e05d      	b.n	8001ec6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e12:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001e16:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <HAL_ETH_Init+0x1f0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6952      	ldr	r2, [r2, #20]
 8001e1e:	0051      	lsls	r1, r2, #1
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e2a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fae9 	bl	8002406 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fb2f 	bl	8002498 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	3305      	adds	r3, #5
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	021a      	lsls	r2, r3, #8
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	061a      	lsls	r2, r3, #24
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	3302      	adds	r3, #2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	3301      	adds	r3, #1
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e88:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_ETH_Init+0x1f4>)
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <HAL_ETH_Init+0x1f8>)
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	58024400 	.word	0x58024400
 8001ed4:	58000400 	.word	0x58000400
 8001ed8:	431bde83 	.word	0x431bde83
 8001edc:	ffff8001 	.word	0xffff8001
 8001ee0:	0c020060 	.word	0x0c020060
 8001ee4:	0c20c000 	.word	0x0c20c000

08001ee8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f02:	f001 fe05 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8001f06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d804      	bhi.n	8001f1a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e022      	b.n	8001f60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	4a16      	ldr	r2, [pc, #88]	@ (8001f78 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d204      	bcs.n	8001f2c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e019      	b.n	8001f60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d915      	bls.n	8001f60 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d804      	bhi.n	8001f46 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e00c      	b.n	8001f60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d804      	bhi.n	8001f58 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e003      	b.n	8001f60 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	02160ebf 	.word	0x02160ebf
 8001f78:	03938700 	.word	0x03938700
 8001f7c:	05f5e0ff 	.word	0x05f5e0ff
 8001f80:	08f0d17f 	.word	0x08f0d17f
 8001f84:	0ee6b27f 	.word	0x0ee6b27f

08001f88 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001f9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001fa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7b1b      	ldrb	r3, [r3, #12]
 8001fa8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001faa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	7b5b      	ldrb	r3, [r3, #13]
 8001fb0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001fb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	7b9b      	ldrb	r3, [r3, #14]
 8001fb8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001fba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	7bdb      	ldrb	r3, [r3, #15]
 8001fc0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001fc2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	7c12      	ldrb	r2, [r2, #16]
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	d102      	bne.n	8001fd2 <ETH_SetMACConfig+0x4a>
 8001fcc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001fd0:	e000      	b.n	8001fd4 <ETH_SetMACConfig+0x4c>
 8001fd2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	7c52      	ldrb	r2, [r2, #17]
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d102      	bne.n	8001fe4 <ETH_SetMACConfig+0x5c>
 8001fde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fe2:	e000      	b.n	8001fe6 <ETH_SetMACConfig+0x5e>
 8001fe4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fe6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	7c9b      	ldrb	r3, [r3, #18]
 8001fec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fee:	431a      	orrs	r2, r3
               macconf->Speed |
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ff4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001ffa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	7f1b      	ldrb	r3, [r3, #28]
 8002000:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002002:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	7f5b      	ldrb	r3, [r3, #29]
 8002008:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800200a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	7f92      	ldrb	r2, [r2, #30]
 8002010:	2a00      	cmp	r2, #0
 8002012:	d102      	bne.n	800201a <ETH_SetMACConfig+0x92>
 8002014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002018:	e000      	b.n	800201c <ETH_SetMACConfig+0x94>
 800201a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800201c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7fdb      	ldrb	r3, [r3, #31]
 8002022:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002024:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	f892 2020 	ldrb.w	r2, [r2, #32]
 800202c:	2a00      	cmp	r2, #0
 800202e:	d102      	bne.n	8002036 <ETH_SetMACConfig+0xae>
 8002030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002034:	e000      	b.n	8002038 <ETH_SetMACConfig+0xb0>
 8002036:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002038:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800203e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002046:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002048:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b56      	ldr	r3, [pc, #344]	@ (80021b4 <ETH_SetMACConfig+0x22c>)
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	430b      	orrs	r3, r1
 8002064:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002072:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002074:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800207c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800207e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002086:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002088:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002090:	2a00      	cmp	r2, #0
 8002092:	d102      	bne.n	800209a <ETH_SetMACConfig+0x112>
 8002094:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002098:	e000      	b.n	800209c <ETH_SetMACConfig+0x114>
 800209a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800209c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4b42      	ldr	r3, [pc, #264]	@ (80021b8 <ETH_SetMACConfig+0x230>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	430b      	orrs	r3, r1
 80020b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <ETH_SetMACConfig+0x234>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	430b      	orrs	r3, r1
 80020dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d101      	bne.n	80020fa <ETH_SetMACConfig+0x172>
 80020f6:	2280      	movs	r2, #128	@ 0x80
 80020f8:	e000      	b.n	80020fc <ETH_SetMACConfig+0x174>
 80020fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80020fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002102:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800210e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	430b      	orrs	r3, r1
 800211c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002124:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800212c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213a:	f023 0103 	bic.w	r1, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	430a      	orrs	r2, r1
 8002146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002152:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800216e:	2a00      	cmp	r2, #0
 8002170:	d101      	bne.n	8002176 <ETH_SetMACConfig+0x1ee>
 8002172:	2240      	movs	r2, #64	@ 0x40
 8002174:	e000      	b.n	8002178 <ETH_SetMACConfig+0x1f0>
 8002176:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002178:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002180:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800218a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002198:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	00048083 	.word	0x00048083
 80021b8:	c0f88000 	.word	0xc0f88000
 80021bc:	fffffef0 	.word	0xfffffef0

080021c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b38      	ldr	r3, [pc, #224]	@ (80022b8 <ETH_SetDMAConfig+0xf8>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	6811      	ldr	r1, [r2, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7b1b      	ldrb	r3, [r3, #12]
 80021f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4b2c      	ldr	r3, [pc, #176]	@ (80022bc <ETH_SetDMAConfig+0xfc>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	430b      	orrs	r3, r1
 8002214:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002218:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7b5b      	ldrb	r3, [r3, #13]
 800221e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002230:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002234:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <ETH_SetDMAConfig+0x100>)
 8002236:	4013      	ands	r3, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	68f9      	ldr	r1, [r7, #12]
 800223e:	430b      	orrs	r3, r1
 8002240:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002244:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	7d1b      	ldrb	r3, [r3, #20]
 8002250:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002252:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7f5b      	ldrb	r3, [r3, #29]
 8002258:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002266:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800226a:	4b16      	ldr	r3, [pc, #88]	@ (80022c4 <ETH_SetDMAConfig+0x104>)
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	430b      	orrs	r3, r1
 8002276:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800227a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	7f1b      	ldrb	r3, [r3, #28]
 8002282:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002294:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <ETH_SetDMAConfig+0x108>)
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	430b      	orrs	r3, r1
 80022a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022a8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	ffff87fd 	.word	0xffff87fd
 80022bc:	ffff2ffe 	.word	0xffff2ffe
 80022c0:	fffec000 	.word	0xfffec000
 80022c4:	ffc0efef 	.word	0xffc0efef
 80022c8:	7fc0ffff 	.word	0x7fc0ffff

080022cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0a4      	sub	sp, #144	@ 0x90
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022da:	2300      	movs	r3, #0
 80022dc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022f6:	2301      	movs	r3, #1
 80022f8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002308:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800230c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002314:	2300      	movs	r3, #0
 8002316:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002324:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002328:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002330:	2300      	movs	r3, #0
 8002332:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002346:	2300      	movs	r3, #0
 8002348:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800234a:	2300      	movs	r3, #0
 800234c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800234e:	2300      	movs	r3, #0
 8002350:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800235e:	2301      	movs	r3, #1
 8002360:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002364:	2320      	movs	r3, #32
 8002366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002376:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800237c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002380:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002388:	2302      	movs	r3, #2
 800238a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80023a6:	2300      	movs	r3, #0
 80023a8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fde6 	bl	8001f88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023bc:	2301      	movs	r3, #1
 80023be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023c0:	2301      	movs	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80023ec:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80023f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023f2:	f107 0308 	add.w	r3, r7, #8
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff fee1 	bl	80021c0 <ETH_SetDMAConfig>
}
 80023fe:	bf00      	nop
 8002400:	3790      	adds	r7, #144	@ 0x90
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	e01d      	b.n	8002450 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68d9      	ldr	r1, [r3, #12]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	3206      	adds	r2, #6
 8002446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3301      	adds	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d9de      	bls.n	8002414 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002464:	461a      	mov	r2, r3
 8002466:	2303      	movs	r3, #3
 8002468:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002478:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002488:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e023      	b.n	80024ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6919      	ldr	r1, [r3, #16]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2200      	movs	r2, #0
 80024da:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	3212      	adds	r2, #18
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d9d8      	bls.n	80024a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800251a:	461a      	mov	r2, r3
 800251c:	2303      	movs	r3, #3
 800251e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800252e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002542:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	@ 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002562:	4b89      	ldr	r3, [pc, #548]	@ (8002788 <HAL_GPIO_Init+0x234>)
 8002564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002566:	e194      	b.n	8002892 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa01 f303 	lsl.w	r3, r1, r3
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8186 	beq.w	800288c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d005      	beq.n	8002598 <HAL_GPIO_Init+0x44>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d130      	bne.n	80025fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ce:	2201      	movs	r2, #1
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f003 0201 	and.w	r2, r3, #1
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b03      	cmp	r3, #3
 8002604:	d017      	beq.n	8002636 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d123      	bne.n	800268a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	69b9      	ldr	r1, [r7, #24]
 8002686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80e0 	beq.w	800288c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026cc:	4b2f      	ldr	r3, [pc, #188]	@ (800278c <HAL_GPIO_Init+0x238>)
 80026ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026d2:	4a2e      	ldr	r2, [pc, #184]	@ (800278c <HAL_GPIO_Init+0x238>)
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_GPIO_Init+0x238>)
 80026de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ea:	4a29      	ldr	r2, [pc, #164]	@ (8002790 <HAL_GPIO_Init+0x23c>)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	220f      	movs	r2, #15
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a20      	ldr	r2, [pc, #128]	@ (8002794 <HAL_GPIO_Init+0x240>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d052      	beq.n	80027bc <HAL_GPIO_Init+0x268>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <HAL_GPIO_Init+0x244>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d031      	beq.n	8002782 <HAL_GPIO_Init+0x22e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1e      	ldr	r2, [pc, #120]	@ (800279c <HAL_GPIO_Init+0x248>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <HAL_GPIO_Init+0x22a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1d      	ldr	r2, [pc, #116]	@ (80027a0 <HAL_GPIO_Init+0x24c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x226>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <HAL_GPIO_Init+0x250>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1b      	ldr	r2, [pc, #108]	@ (80027a8 <HAL_GPIO_Init+0x254>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <HAL_GPIO_Init+0x258>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a19      	ldr	r2, [pc, #100]	@ (80027b0 <HAL_GPIO_Init+0x25c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x216>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a18      	ldr	r2, [pc, #96]	@ (80027b4 <HAL_GPIO_Init+0x260>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a17      	ldr	r2, [pc, #92]	@ (80027b8 <HAL_GPIO_Init+0x264>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x20e>
 800275e:	2309      	movs	r3, #9
 8002760:	e02d      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002762:	230a      	movs	r3, #10
 8002764:	e02b      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002766:	2308      	movs	r3, #8
 8002768:	e029      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800276a:	2307      	movs	r3, #7
 800276c:	e027      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800276e:	2306      	movs	r3, #6
 8002770:	e025      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002772:	2305      	movs	r3, #5
 8002774:	e023      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002776:	2304      	movs	r3, #4
 8002778:	e021      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800277a:	2303      	movs	r3, #3
 800277c:	e01f      	b.n	80027be <HAL_GPIO_Init+0x26a>
 800277e:	2302      	movs	r3, #2
 8002780:	e01d      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002782:	2301      	movs	r3, #1
 8002784:	e01b      	b.n	80027be <HAL_GPIO_Init+0x26a>
 8002786:	bf00      	nop
 8002788:	58000080 	.word	0x58000080
 800278c:	58024400 	.word	0x58024400
 8002790:	58000400 	.word	0x58000400
 8002794:	58020000 	.word	0x58020000
 8002798:	58020400 	.word	0x58020400
 800279c:	58020800 	.word	0x58020800
 80027a0:	58020c00 	.word	0x58020c00
 80027a4:	58021000 	.word	0x58021000
 80027a8:	58021400 	.word	0x58021400
 80027ac:	58021800 	.word	0x58021800
 80027b0:	58021c00 	.word	0x58021c00
 80027b4:	58022000 	.word	0x58022000
 80027b8:	58022400 	.word	0x58022400
 80027bc:	2300      	movs	r3, #0
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ce:	4938      	ldr	r1, [pc, #224]	@ (80028b0 <HAL_GPIO_Init+0x35c>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	3301      	adds	r3, #1
 8002890:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	f47f ae63 	bne.w	8002568 <HAL_GPIO_Init+0x14>
  }
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	3724      	adds	r7, #36	@ 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	58000400 	.word	0x58000400

080028b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
 80028c0:	4613      	mov	r3, r2
 80028c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ca:	887a      	ldrh	r2, [r7, #2]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028d0:	e003      	b.n	80028da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	041a      	lsls	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0fe      	b.n	8002af6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe fe9b 	bl	8001648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2203      	movs	r2, #3
 8002916:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f006 f88a 	bl	8008a38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	7c1a      	ldrb	r2, [r3, #16]
 800292c:	f88d 2000 	strb.w	r2, [sp]
 8002930:	3304      	adds	r3, #4
 8002932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002934:	f006 f80e 	bl	8008954 <USB_CoreInit>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0d5      	b.n	8002af6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f006 f882 	bl	8008a5a <USB_SetCurrentMode>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0c6      	b.n	8002af6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e04a      	b.n	8002a04 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3315      	adds	r3, #21
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3314      	adds	r3, #20
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	b298      	uxth	r0, r3
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	332e      	adds	r3, #46	@ 0x2e
 80029aa:	4602      	mov	r2, r0
 80029ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3318      	adds	r3, #24
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	331c      	adds	r3, #28
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3320      	adds	r3, #32
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3324      	adds	r3, #36	@ 0x24
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	3301      	adds	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	791b      	ldrb	r3, [r3, #4]
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d3af      	bcc.n	800296e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e044      	b.n	8002a9e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	791b      	ldrb	r3, [r3, #4]
 8002aa2:	7bfa      	ldrb	r2, [r7, #15]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d3b5      	bcc.n	8002a14 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7c1a      	ldrb	r2, [r3, #16]
 8002ab0:	f88d 2000 	strb.w	r2, [sp]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab8:	f006 f81c 	bl	8008af4 <USB_DevInit>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e013      	b.n	8002af6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7b1b      	ldrb	r3, [r3, #12]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f80b 	bl	8002b00 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f006 f9d7 	bl	8008ea2 <USB_DevDisconnect>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b2e:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	10000003 	.word	0x10000003

08002b48 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a04      	ldr	r2, [pc, #16]	@ (8002b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	58024800 	.word	0x58024800

08002b68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b70:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d00a      	beq.n	8002b92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b7c:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e01f      	b.n	8002bce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e01d      	b.n	8002bce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f023 0207 	bic.w	r2, r3, #7
 8002b9a:	490f      	ldr	r1, [pc, #60]	@ (8002bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ba2:	f7fe fe7d 	bl	80018a0 <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ba8:	e009      	b.n	8002bbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002baa:	f7fe fe79 	bl	80018a0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bb8:	d901      	bls.n	8002bbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e007      	b.n	8002bce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bca:	d1ee      	bne.n	8002baa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	58024800 	.word	0x58024800

08002bdc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a04      	ldr	r2, [pc, #16]	@ (8002bf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	58024800 	.word	0x58024800

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	@ 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f000 bc48 	b.w	80034a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8088 	beq.w	8002d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1e:	4b99      	ldr	r3, [pc, #612]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c28:	4b96      	ldr	r3, [pc, #600]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d007      	beq.n	8002c44 <HAL_RCC_OscConfig+0x48>
 8002c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c36:	2b18      	cmp	r3, #24
 8002c38:	d111      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62>
 8002c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d10c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	4b8f      	ldr	r3, [pc, #572]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d06d      	beq.n	8002d2c <HAL_RCC_OscConfig+0x130>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d169      	bne.n	8002d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f000 bc21 	b.w	80034a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x7a>
 8002c68:	4b86      	ldr	r3, [pc, #536]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a85      	ldr	r2, [pc, #532]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e02e      	b.n	8002cd4 <HAL_RCC_OscConfig+0xd8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x9c>
 8002c7e:	4b81      	ldr	r3, [pc, #516]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a80      	ldr	r2, [pc, #512]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b7e      	ldr	r3, [pc, #504]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002c90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xd8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0xc0>
 8002ca2:	4b78      	ldr	r3, [pc, #480]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a77      	ldr	r2, [pc, #476]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b75      	ldr	r3, [pc, #468]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a74      	ldr	r2, [pc, #464]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xd8>
 8002cbc:	4b71      	ldr	r3, [pc, #452]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a70      	ldr	r2, [pc, #448]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b6e      	ldr	r3, [pc, #440]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6d      	ldr	r2, [pc, #436]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fde0 	bl	80018a0 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fddc 	bl	80018a0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e3d4      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xe8>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fdcc 	bl	80018a0 <HAL_GetTick>
 8002d08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fdc8 	bl	80018a0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e3c0      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d1e:	4b59      	ldr	r3, [pc, #356]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x110>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80ca 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3c:	4b51      	ldr	r3, [pc, #324]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d46:	4b4f      	ldr	r3, [pc, #316]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <HAL_RCC_OscConfig+0x166>
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2b18      	cmp	r3, #24
 8002d56:	d156      	bne.n	8002e06 <HAL_RCC_OscConfig+0x20a>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d151      	bne.n	8002e06 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d62:	4b48      	ldr	r3, [pc, #288]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_RCC_OscConfig+0x17e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e392      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d7a:	4b42      	ldr	r3, [pc, #264]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0219 	bic.w	r2, r3, #25
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	493f      	ldr	r1, [pc, #252]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fd88 	bl	80018a0 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe fd84 	bl	80018a0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e37c      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da6:	4b37      	ldr	r3, [pc, #220]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	f7fe fda5 	bl	8001900 <HAL_GetREVID>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d817      	bhi.n	8002df0 <HAL_RCC_OscConfig+0x1f4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d108      	bne.n	8002dda <HAL_RCC_OscConfig+0x1de>
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	e07a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	031b      	lsls	r3, r3, #12
 8002de8:	4926      	ldr	r1, [pc, #152]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dee:	e06f      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	4921      	ldr	r1, [pc, #132]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e04:	e064      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d047      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 0219 	bic.w	r2, r3, #25
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	491a      	ldr	r1, [pc, #104]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fd3e 	bl	80018a0 <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fe fd3a 	bl	80018a0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e332      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	f7fe fd5b 	bl	8001900 <HAL_GetREVID>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d819      	bhi.n	8002e88 <HAL_RCC_OscConfig+0x28c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b40      	cmp	r3, #64	@ 0x40
 8002e5a:	d108      	bne.n	8002e6e <HAL_RCC_OscConfig+0x272>
 8002e5c:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e64:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e6a:	6053      	str	r3, [r2, #4]
 8002e6c:	e030      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	031b      	lsls	r3, r3, #12
 8002e7c:	4901      	ldr	r1, [pc, #4]	@ (8002e84 <HAL_RCC_OscConfig+0x288>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	604b      	str	r3, [r1, #4]
 8002e82:	e025      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
 8002e84:	58024400 	.word	0x58024400
 8002e88:	4b9a      	ldr	r3, [pc, #616]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	4997      	ldr	r1, [pc, #604]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e018      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b95      	ldr	r3, [pc, #596]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a94      	ldr	r2, [pc, #592]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fcf9 	bl	80018a0 <HAL_GetTick>
 8002eae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fcf5 	bl	80018a0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e2ed      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ec4:	4b8b      	ldr	r3, [pc, #556]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a9 	beq.w	8003030 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ede:	4b85      	ldr	r3, [pc, #532]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ee6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ee8:	4b82      	ldr	r3, [pc, #520]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d007      	beq.n	8002f04 <HAL_RCC_OscConfig+0x308>
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b18      	cmp	r3, #24
 8002ef8:	d13a      	bne.n	8002f70 <HAL_RCC_OscConfig+0x374>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d135      	bne.n	8002f70 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f04:	4b7b      	ldr	r3, [pc, #492]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x320>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b80      	cmp	r3, #128	@ 0x80
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e2c1      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f1c:	f7fe fcf0 	bl	8001900 <HAL_GetREVID>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d817      	bhi.n	8002f5a <HAL_RCC_OscConfig+0x35e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d108      	bne.n	8002f44 <HAL_RCC_OscConfig+0x348>
 8002f32:	4b70      	ldr	r3, [pc, #448]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f40:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f42:	e075      	b.n	8003030 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f44:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	069b      	lsls	r3, r3, #26
 8002f52:	4968      	ldr	r1, [pc, #416]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f58:	e06a      	b.n	8003030 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f5a:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	4962      	ldr	r1, [pc, #392]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f6e:	e05f      	b.n	8003030 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d042      	beq.n	8002ffe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f78:	4b5e      	ldr	r3, [pc, #376]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fc8c 	bl	80018a0 <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fc88 	bl	80018a0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e280      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f9e:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002faa:	f7fe fca9 	bl	8001900 <HAL_GetREVID>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d817      	bhi.n	8002fe8 <HAL_RCC_OscConfig+0x3ec>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d108      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3d6>
 8002fc0:	4b4c      	ldr	r3, [pc, #304]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fce:	6053      	str	r3, [r2, #4]
 8002fd0:	e02e      	b.n	8003030 <HAL_RCC_OscConfig+0x434>
 8002fd2:	4b48      	ldr	r3, [pc, #288]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	069b      	lsls	r3, r3, #26
 8002fe0:	4944      	ldr	r1, [pc, #272]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]
 8002fe6:	e023      	b.n	8003030 <HAL_RCC_OscConfig+0x434>
 8002fe8:	4b42      	ldr	r3, [pc, #264]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	493f      	ldr	r1, [pc, #252]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]
 8002ffc:	e018      	b.n	8003030 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a3c      	ldr	r2, [pc, #240]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8003004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fc49 	bl	80018a0 <HAL_GetTick>
 800300e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003012:	f7fe fc45 	bl	80018a0 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e23d      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003024:	4b33      	ldr	r3, [pc, #204]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d036      	beq.n	80030aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d019      	beq.n	8003078 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003044:	4b2b      	ldr	r3, [pc, #172]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003048:	4a2a      	ldr	r2, [pc, #168]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe fc26 	bl	80018a0 <HAL_GetTick>
 8003054:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fc22 	bl	80018a0 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e21a      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800306a:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 800306c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x45c>
 8003076:	e018      	b.n	80030aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003078:	4b1e      	ldr	r3, [pc, #120]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 800307a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307c:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fe fc0c 	bl	80018a0 <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7fe fc08 	bl	80018a0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e200      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 80030a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d039      	beq.n	800312a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a0c      	ldr	r2, [pc, #48]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 80030c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fbe9 	bl	80018a0 <HAL_GetTick>
 80030ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030d2:	f7fe fbe5 	bl	80018a0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1dd      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030e4:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x4d6>
 80030f0:	e01b      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
 80030f2:	bf00      	nop
 80030f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030f8:	4b9b      	ldr	r3, [pc, #620]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a9a      	ldr	r2, [pc, #616]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80030fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003102:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003104:	f7fe fbcc 	bl	80018a0 <HAL_GetTick>
 8003108:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800310c:	f7fe fbc8 	bl	80018a0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1c0      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800311e:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8081 	beq.w	800323a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003138:	4b8c      	ldr	r3, [pc, #560]	@ (800336c <HAL_RCC_OscConfig+0x770>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a8b      	ldr	r2, [pc, #556]	@ (800336c <HAL_RCC_OscConfig+0x770>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003144:	f7fe fbac 	bl	80018a0 <HAL_GetTick>
 8003148:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fe fba8 	bl	80018a0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	@ 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e1a0      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800315e:	4b83      	ldr	r3, [pc, #524]	@ (800336c <HAL_RCC_OscConfig+0x770>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d106      	bne.n	8003180 <HAL_RCC_OscConfig+0x584>
 8003172:	4b7d      	ldr	r3, [pc, #500]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a7c      	ldr	r2, [pc, #496]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
 800317e:	e02d      	b.n	80031dc <HAL_RCC_OscConfig+0x5e0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x5a6>
 8003188:	4b77      	ldr	r3, [pc, #476]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a76      	ldr	r2, [pc, #472]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b74      	ldr	r3, [pc, #464]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a73      	ldr	r2, [pc, #460]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x5e0>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x5c8>
 80031aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0x5e0>
 80031c4:	4b68      	ldr	r3, [pc, #416]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a67      	ldr	r2, [pc, #412]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d0:	4b65      	ldr	r3, [pc, #404]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	4a64      	ldr	r2, [pc, #400]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fb5c 	bl	80018a0 <HAL_GetTick>
 80031e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7fe fb58 	bl	80018a0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e14e      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003202:	4b59      	ldr	r3, [pc, #356]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ee      	beq.n	80031ec <HAL_RCC_OscConfig+0x5f0>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe fb46 	bl	80018a0 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe fb42 	bl	80018a0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e138      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800322e:	4b4e      	ldr	r3, [pc, #312]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ee      	bne.n	8003218 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 812d 	beq.w	800349e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003244:	4b48      	ldr	r3, [pc, #288]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800324c:	2b18      	cmp	r3, #24
 800324e:	f000 80bd 	beq.w	80033cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	2b02      	cmp	r3, #2
 8003258:	f040 809e 	bne.w	8003398 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b42      	ldr	r3, [pc, #264]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a41      	ldr	r2, [pc, #260]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fb1a 	bl	80018a0 <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fb16 	bl	80018a0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e10e      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003282:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328e:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003292:	4b37      	ldr	r3, [pc, #220]	@ (8003370 <HAL_RCC_OscConfig+0x774>)
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	430a      	orrs	r2, r1
 80032a2:	4931      	ldr	r1, [pc, #196]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	3b01      	subs	r3, #1
 80032ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b6:	3b01      	subs	r3, #1
 80032b8:	025b      	lsls	r3, r3, #9
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c2:	3b01      	subs	r3, #1
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	3b01      	subs	r3, #1
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80032d8:	4923      	ldr	r1, [pc, #140]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032de:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	4a21      	ldr	r2, [pc, #132]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80032ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ee:	4b21      	ldr	r3, [pc, #132]	@ (8003374 <HAL_RCC_OscConfig+0x778>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032f6:	00d2      	lsls	r2, r2, #3
 80032f8:	491b      	ldr	r1, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	f023 020c 	bic.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	4917      	ldr	r1, [pc, #92]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003310:	4b15      	ldr	r3, [pc, #84]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	f023 0202 	bic.w	r2, r3, #2
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	4912      	ldr	r1, [pc, #72]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800331e:	4313      	orrs	r3, r2
 8003320:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003322:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	4a10      	ldr	r2, [pc, #64]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800332e:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800333a:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003344:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003346:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	4a07      	ldr	r2, [pc, #28]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 800334c:	f043 0301 	orr.w	r3, r3, #1
 8003350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003352:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a04      	ldr	r2, [pc, #16]	@ (8003368 <HAL_RCC_OscConfig+0x76c>)
 8003358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800335c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe fa9f 	bl	80018a0 <HAL_GetTick>
 8003362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003364:	e011      	b.n	800338a <HAL_RCC_OscConfig+0x78e>
 8003366:	bf00      	nop
 8003368:	58024400 	.word	0x58024400
 800336c:	58024800 	.word	0x58024800
 8003370:	fffffc0c 	.word	0xfffffc0c
 8003374:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7fe fa92 	bl	80018a0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e08a      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800338a:	4b47      	ldr	r3, [pc, #284]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x77c>
 8003396:	e082      	b.n	800349e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b43      	ldr	r3, [pc, #268]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a42      	ldr	r2, [pc, #264]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 800339e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fa7c 	bl	80018a0 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fa78 	bl	80018a0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e070      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033be:	4b3a      	ldr	r3, [pc, #232]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x7b0>
 80033ca:	e068      	b.n	800349e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033cc:	4b36      	ldr	r3, [pc, #216]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 80033ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033d2:	4b35      	ldr	r3, [pc, #212]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d031      	beq.n	8003444 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0203 	and.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d12a      	bne.n	8003444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d122      	bne.n	8003444 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d11a      	bne.n	8003444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	0a5b      	lsrs	r3, r3, #9
 8003412:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d111      	bne.n	8003444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d108      	bne.n	8003444 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	0e1b      	lsrs	r3, r3, #24
 8003436:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e02b      	b.n	80034a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003448:	4b17      	ldr	r3, [pc, #92]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 800344a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344c:	08db      	lsrs	r3, r3, #3
 800344e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003452:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	429a      	cmp	r2, r3
 800345c:	d01f      	beq.n	800349e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	4a11      	ldr	r2, [pc, #68]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800346a:	f7fe fa19 	bl	80018a0 <HAL_GetTick>
 800346e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003470:	bf00      	nop
 8003472:	f7fe fa15 	bl	80018a0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	4293      	cmp	r3, r2
 800347c:	d0f9      	beq.n	8003472 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 8003480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003482:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <HAL_RCC_OscConfig+0x8b0>)
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800348a:	00d2      	lsls	r2, r2, #3
 800348c:	4906      	ldr	r1, [pc, #24]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 800348e:	4313      	orrs	r3, r2
 8003490:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003492:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	4a04      	ldr	r2, [pc, #16]	@ (80034a8 <HAL_RCC_OscConfig+0x8ac>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3730      	adds	r7, #48	@ 0x30
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	ffff0007 	.word	0xffff0007

080034b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e19c      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b8a      	ldr	r3, [pc, #552]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d910      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b87      	ldr	r3, [pc, #540]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 020f 	bic.w	r2, r3, #15
 80034da:	4985      	ldr	r1, [pc, #532]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b83      	ldr	r3, [pc, #524]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e184      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	4b7b      	ldr	r3, [pc, #492]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800350c:	429a      	cmp	r2, r3
 800350e:	d908      	bls.n	8003522 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003510:	4b78      	ldr	r3, [pc, #480]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	4975      	ldr	r1, [pc, #468]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 800351e:	4313      	orrs	r3, r2
 8003520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	4b70      	ldr	r3, [pc, #448]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800353a:	429a      	cmp	r2, r3
 800353c:	d908      	bls.n	8003550 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800353e:	4b6d      	ldr	r3, [pc, #436]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	496a      	ldr	r1, [pc, #424]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 800354c:	4313      	orrs	r3, r2
 800354e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699a      	ldr	r2, [r3, #24]
 8003560:	4b64      	ldr	r3, [pc, #400]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003568:	429a      	cmp	r2, r3
 800356a:	d908      	bls.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800356c:	4b61      	ldr	r3, [pc, #388]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	495e      	ldr	r1, [pc, #376]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 800357a:	4313      	orrs	r3, r2
 800357c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	4b59      	ldr	r3, [pc, #356]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003596:	429a      	cmp	r2, r3
 8003598:	d908      	bls.n	80035ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800359a:	4b56      	ldr	r3, [pc, #344]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	4953      	ldr	r1, [pc, #332]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d010      	beq.n	80035da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	4b4d      	ldr	r3, [pc, #308]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d908      	bls.n	80035da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b4a      	ldr	r3, [pc, #296]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f023 020f 	bic.w	r2, r3, #15
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4947      	ldr	r1, [pc, #284]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d055      	beq.n	8003692 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035e6:	4b43      	ldr	r3, [pc, #268]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4940      	ldr	r1, [pc, #256]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003600:	4b3c      	ldr	r3, [pc, #240]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d121      	bne.n	8003650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0f6      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d107      	bne.n	8003628 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003618:	4b36      	ldr	r3, [pc, #216]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d115      	bne.n	8003650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0ea      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003630:	4b30      	ldr	r3, [pc, #192]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0de      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003640:	4b2c      	ldr	r3, [pc, #176]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0d6      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003650:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f023 0207 	bic.w	r2, r3, #7
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4925      	ldr	r1, [pc, #148]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 800365e:	4313      	orrs	r3, r2
 8003660:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003662:	f7fe f91d 	bl	80018a0 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003668:	e00a      	b.n	8003680 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366a:	f7fe f919 	bl	80018a0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e0be      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003680:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	429a      	cmp	r2, r3
 8003690:	d1eb      	bne.n	800366a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d010      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d208      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ae:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f023 020f 	bic.w	r2, r3, #15
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	490e      	ldr	r1, [pc, #56]	@ (80036f4 <HAL_RCC_ClockConfig+0x244>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d214      	bcs.n	80036f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b08      	ldr	r3, [pc, #32]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 020f 	bic.w	r2, r3, #15
 80036d6:	4906      	ldr	r1, [pc, #24]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <HAL_RCC_ClockConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e086      	b.n	80037fe <HAL_RCC_ClockConfig+0x34e>
 80036f0:	52002000 	.word	0x52002000
 80036f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	4b3f      	ldr	r3, [pc, #252]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003710:	429a      	cmp	r2, r3
 8003712:	d208      	bcs.n	8003726 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003714:	4b3c      	ldr	r3, [pc, #240]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	4939      	ldr	r1, [pc, #228]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003722:	4313      	orrs	r3, r2
 8003724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d010      	beq.n	8003754 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	4b34      	ldr	r3, [pc, #208]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800373e:	429a      	cmp	r2, r3
 8003740:	d208      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003742:	4b31      	ldr	r3, [pc, #196]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	492e      	ldr	r1, [pc, #184]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003750:	4313      	orrs	r3, r2
 8003752:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	4b28      	ldr	r3, [pc, #160]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800376c:	429a      	cmp	r2, r3
 800376e:	d208      	bcs.n	8003782 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003770:	4b25      	ldr	r3, [pc, #148]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	4922      	ldr	r1, [pc, #136]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 800377e:	4313      	orrs	r3, r2
 8003780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d010      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800379a:	429a      	cmp	r2, r3
 800379c:	d208      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800379e:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4917      	ldr	r1, [pc, #92]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037b0:	f000 f834 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037b4:	4602      	mov	r2, r0
 80037b6:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	0a1b      	lsrs	r3, r3, #8
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	4912      	ldr	r1, [pc, #72]	@ (800380c <HAL_RCC_ClockConfig+0x35c>)
 80037c2:	5ccb      	ldrb	r3, [r1, r3]
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
 80037cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003808 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	4a0d      	ldr	r2, [pc, #52]	@ (800380c <HAL_RCC_ClockConfig+0x35c>)
 80037d8:	5cd3      	ldrb	r3, [r2, r3]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
 80037e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <HAL_RCC_ClockConfig+0x360>)
 80037e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003814 <HAL_RCC_ClockConfig+0x364>)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <HAL_RCC_ClockConfig+0x368>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe f80a 	bl	800180c <HAL_InitTick>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	58024400 	.word	0x58024400
 800380c:	0800926c 	.word	0x0800926c
 8003810:	24000004 	.word	0x24000004
 8003814:	24000000 	.word	0x24000000
 8003818:	24000008 	.word	0x24000008

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	@ 0x24
 8003820:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003822:	4bb3      	ldr	r3, [pc, #716]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800382a:	2b18      	cmp	r3, #24
 800382c:	f200 8155 	bhi.w	8003ada <HAL_RCC_GetSysClockFreq+0x2be>
 8003830:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800389d 	.word	0x0800389d
 800383c:	08003adb 	.word	0x08003adb
 8003840:	08003adb 	.word	0x08003adb
 8003844:	08003adb 	.word	0x08003adb
 8003848:	08003adb 	.word	0x08003adb
 800384c:	08003adb 	.word	0x08003adb
 8003850:	08003adb 	.word	0x08003adb
 8003854:	08003adb 	.word	0x08003adb
 8003858:	080038c3 	.word	0x080038c3
 800385c:	08003adb 	.word	0x08003adb
 8003860:	08003adb 	.word	0x08003adb
 8003864:	08003adb 	.word	0x08003adb
 8003868:	08003adb 	.word	0x08003adb
 800386c:	08003adb 	.word	0x08003adb
 8003870:	08003adb 	.word	0x08003adb
 8003874:	08003adb 	.word	0x08003adb
 8003878:	080038c9 	.word	0x080038c9
 800387c:	08003adb 	.word	0x08003adb
 8003880:	08003adb 	.word	0x08003adb
 8003884:	08003adb 	.word	0x08003adb
 8003888:	08003adb 	.word	0x08003adb
 800388c:	08003adb 	.word	0x08003adb
 8003890:	08003adb 	.word	0x08003adb
 8003894:	08003adb 	.word	0x08003adb
 8003898:	080038cf 	.word	0x080038cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800389c:	4b94      	ldr	r3, [pc, #592]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038a8:	4b91      	ldr	r3, [pc, #580]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	4a90      	ldr	r2, [pc, #576]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
 80038b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038ba:	e111      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038bc:	4b8d      	ldr	r3, [pc, #564]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038be:	61bb      	str	r3, [r7, #24]
      break;
 80038c0:	e10e      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038c2:	4b8d      	ldr	r3, [pc, #564]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038c4:	61bb      	str	r3, [r7, #24]
      break;
 80038c6:	e10b      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80038c8:	4b8c      	ldr	r3, [pc, #560]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038ca:	61bb      	str	r3, [r7, #24]
      break;
 80038cc:	e108      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038ce:	4b88      	ldr	r3, [pc, #544]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80038d8:	4b85      	ldr	r3, [pc, #532]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038e4:	4b82      	ldr	r3, [pc, #520]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038ee:	4b80      	ldr	r3, [pc, #512]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f2:	08db      	lsrs	r3, r3, #3
 80038f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80e1 	beq.w	8003ad4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b02      	cmp	r3, #2
 8003916:	f000 8083 	beq.w	8003a20 <HAL_RCC_GetSysClockFreq+0x204>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b02      	cmp	r3, #2
 800391e:	f200 80a1 	bhi.w	8003a64 <HAL_RCC_GetSysClockFreq+0x248>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x114>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d056      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800392e:	e099      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003930:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d02d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800393c:	4b6c      	ldr	r3, [pc, #432]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	4a6b      	ldr	r2, [pc, #428]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	ee07 3a90 	vmov	s15, r3
 800395e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003966:	4b62      	ldr	r3, [pc, #392]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003976:	ed97 6a02 	vldr	s12, [r7, #8]
 800397a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800397e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800398a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003992:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003996:	e087      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b04 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039aa:	4b51      	ldr	r3, [pc, #324]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80039be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039da:	e065      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ee:	4b40      	ldr	r3, [pc, #256]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1e:	e043      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b2f      	ldr	r3, [pc, #188]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a62:	e021      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	0a5b      	lsrs	r3, r3, #9
 8003aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003acc:	ee17 3a90 	vmov	r3, s15
 8003ad0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ad2:	e005      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
      break;
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ada:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003adc:	61bb      	str	r3, [r7, #24]
      break;
 8003ade:	bf00      	nop
  }

  return sysclockfreq;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	@ 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	58024400 	.word	0x58024400
 8003af4:	03d09000 	.word	0x03d09000
 8003af8:	003d0900 	.word	0x003d0900
 8003afc:	007a1200 	.word	0x007a1200
 8003b00:	46000000 	.word	0x46000000
 8003b04:	4c742400 	.word	0x4c742400
 8003b08:	4a742400 	.word	0x4a742400
 8003b0c:	4af42400 	.word	0x4af42400

08003b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b16:	f7ff fe81 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	490f      	ldr	r1, [pc, #60]	@ (8003b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4a:	4a07      	ldr	r2, [pc, #28]	@ (8003b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b4e:	4a07      	ldr	r2, [pc, #28]	@ (8003b6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b54:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	58024400 	.word	0x58024400
 8003b64:	0800926c 	.word	0x0800926c
 8003b68:	24000004 	.word	0x24000004
 8003b6c:	24000000 	.word	0x24000000

08003b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b74:	f7ff ffcc 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4904      	ldr	r1, [pc, #16]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	58024400 	.word	0x58024400
 8003b98:	0800926c 	.word	0x0800926c

08003b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ba0:	f7ff ffb6 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b06      	ldr	r3, [pc, #24]	@ (8003bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4904      	ldr	r1, [pc, #16]	@ (8003bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	58024400 	.word	0x58024400
 8003bc4:	0800926c 	.word	0x0800926c

08003bc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bcc:	b0ca      	sub	sp, #296	@ 0x128
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003bec:	2500      	movs	r5, #0
 8003bee:	ea54 0305 	orrs.w	r3, r4, r5
 8003bf2:	d049      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bfe:	d02f      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c04:	d828      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c0a:	d01a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c10:	d822      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c1a:	d007      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c1c:	e01c      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1e:	4bb8      	ldr	r3, [pc, #736]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	4ab7      	ldr	r2, [pc, #732]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c2a:	e01a      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	3308      	adds	r3, #8
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 fc8f 	bl	8005558 <RCCEx_PLL2_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c40:	e00f      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3328      	adds	r3, #40	@ 0x28
 8003c48:	2102      	movs	r1, #2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 fd36 	bl	80056bc <RCCEx_PLL3_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c6a:	4ba5      	ldr	r3, [pc, #660]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c78:	4aa1      	ldr	r2, [pc, #644]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c7e:	e003      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c94:	f04f 0900 	mov.w	r9, #0
 8003c98:	ea58 0309 	orrs.w	r3, r8, r9
 8003c9c:	d047      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d82a      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc5 	.word	0x08003cc5
 8003cb4:	08003cd3 	.word	0x08003cd3
 8003cb8:	08003ce9 	.word	0x08003ce9
 8003cbc:	08003d07 	.word	0x08003d07
 8003cc0:	08003d07 	.word	0x08003d07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	4a8d      	ldr	r2, [pc, #564]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cd0:	e01a      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 fc3c 	bl	8005558 <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce6:	e00f      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	3328      	adds	r3, #40	@ 0x28
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fce3 	bl	80056bc <RCCEx_PLL3_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cfc:	e004      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d10:	4b7b      	ldr	r3, [pc, #492]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d14:	f023 0107 	bic.w	r1, r3, #7
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1e:	4a78      	ldr	r2, [pc, #480]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003d3a:	f04f 0b00 	mov.w	fp, #0
 8003d3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d42:	d04c      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d4e:	d030      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d54:	d829      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d58:	d02d      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d5c:	d825      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d5e:	2b80      	cmp	r3, #128	@ 0x80
 8003d60:	d018      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d62:	2b80      	cmp	r3, #128	@ 0x80
 8003d64:	d821      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d007      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d6e:	e01c      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d70:	4b63      	ldr	r3, [pc, #396]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	4a62      	ldr	r2, [pc, #392]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d7c:	e01c      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d82:	3308      	adds	r3, #8
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 fbe6 	bl	8005558 <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d92:	e011      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	3328      	adds	r3, #40	@ 0x28
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fc8d 	bl	80056bc <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003da8:	e006      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003db0:	e002      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	4a4c      	ldr	r2, [pc, #304]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003dea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003df4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d053      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e0a:	d035      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e10:	d82e      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e16:	d031      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003e18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e1c:	d828      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e22:	d01a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e28:	d822      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e32:	d007      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e34:	e01c      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e36:	4b32      	ldr	r3, [pc, #200]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	4a31      	ldr	r2, [pc, #196]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e42:	e01c      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	3308      	adds	r3, #8
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 fb83 	bl	8005558 <RCCEx_PLL2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e58:	e011      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	3328      	adds	r3, #40	@ 0x28
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fc2a 	bl	80056bc <RCCEx_PLL3_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e6e:	e006      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e76:	e002      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e86:	4b1e      	ldr	r3, [pc, #120]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e96:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003eb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ebc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d056      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ece:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ed2:	d038      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ed8:	d831      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ede:	d034      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ee0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ee4:	d82b      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eea:	d01d      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003eec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ef0:	d825      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003efc:	e01f      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f04:	4ba2      	ldr	r3, [pc, #648]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	4aa1      	ldr	r2, [pc, #644]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f10:	e01c      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	3308      	adds	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fb1c 	bl	8005558 <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f26:	e011      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	3328      	adds	r3, #40	@ 0x28
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fbc3 	bl	80056bc <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f44:	e002      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f54:	4b8e      	ldr	r3, [pc, #568]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f64:	4a8a      	ldr	r2, [pc, #552]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f6a:	e003      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d03a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9a:	2b30      	cmp	r3, #48	@ 0x30
 8003f9c:	d01f      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f9e:	2b30      	cmp	r3, #48	@ 0x30
 8003fa0:	d819      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d00c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d815      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d019      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d111      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb2:	4b77      	ldr	r3, [pc, #476]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	4a76      	ldr	r2, [pc, #472]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fbe:	e011      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fac5 	bl	8005558 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fd4:	e006      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fdc:	e002      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fec:	4b68      	ldr	r3, [pc, #416]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffa:	4a65      	ldr	r2, [pc, #404]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004016:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004020:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004024:	460b      	mov	r3, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	d051      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004034:	d035      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800403a:	d82e      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800403c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004040:	d031      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004042:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004046:	d828      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404c:	d01a      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004052:	d822      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405c:	d007      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800405e:	e01c      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004060:	4b4b      	ldr	r3, [pc, #300]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	4a4a      	ldr	r2, [pc, #296]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800406a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800406c:	e01c      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	3308      	adds	r3, #8
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f001 fa6e 	bl	8005558 <RCCEx_PLL2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004082:	e011      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	3328      	adds	r3, #40	@ 0x28
 800408a:	2100      	movs	r1, #0
 800408c:	4618      	mov	r0, r3
 800408e:	f001 fb15 	bl	80056bc <RCCEx_PLL3_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004098:	e006      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040a0:	e002      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040b0:	4b37      	ldr	r3, [pc, #220]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040be:	4a34      	ldr	r2, [pc, #208]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80040c4:	e003      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040de:	2300      	movs	r3, #0
 80040e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80040e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80040e8:	460b      	mov	r3, r1
 80040ea:	4313      	orrs	r3, r2
 80040ec:	d056      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f8:	d033      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040fe:	d82c      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004100:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004104:	d02f      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004106:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800410a:	d826      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800410c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004110:	d02b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004112:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004116:	d820      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800411c:	d012      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800411e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004122:	d81a      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d022      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800412c:	d115      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004132:	3308      	adds	r3, #8
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fa0e 	bl	8005558 <RCCEx_PLL2_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004142:	e015      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	3328      	adds	r3, #40	@ 0x28
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fab5 	bl	80056bc <RCCEx_PLL3_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004158:	e00a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004162:	bf00      	nop
 8004164:	e004      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800416e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004178:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004186:	4a02      	ldr	r2, [pc, #8]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004188:	430b      	orrs	r3, r1
 800418a:	6513      	str	r3, [r2, #80]	@ 0x50
 800418c:	e006      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800418e:	bf00      	nop
 8004190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d055      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041c8:	d033      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80041ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ce:	d82c      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d4:	d02f      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041da:	d826      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041e0:	d02b      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041e6:	d820      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ec:	d012      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80041ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f2:	d81a      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d022      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041fc:	d115      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004202:	3308      	adds	r3, #8
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f9a6 	bl	8005558 <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004212:	e015      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004218:	3328      	adds	r3, #40	@ 0x28
 800421a:	2101      	movs	r1, #1
 800421c:	4618      	mov	r0, r3
 800421e:	f001 fa4d 	bl	80056bc <RCCEx_PLL3_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004228:	e00a      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004230:	e006      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004232:	bf00      	nop
 8004234:	e004      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800423e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004248:	4ba3      	ldr	r3, [pc, #652]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004258:	4a9f      	ldr	r2, [pc, #636]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800425a:	430b      	orrs	r3, r1
 800425c:	6593      	str	r3, [r2, #88]	@ 0x58
 800425e:	e003      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004278:	2300      	movs	r3, #0
 800427a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800427e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004282:	460b      	mov	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	d037      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004292:	d00e      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004298:	d816      	bhi.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d018      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800429e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042a2:	d111      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a4:	4b8c      	ldr	r3, [pc, #560]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	4a8b      	ldr	r2, [pc, #556]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042b0:	e00f      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b6:	3308      	adds	r3, #8
 80042b8:	2101      	movs	r1, #1
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f94c 	bl	8005558 <RCCEx_PLL2_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042c6:	e004      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80042d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042da:	4b7f      	ldr	r3, [pc, #508]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e8:	4a7b      	ldr	r2, [pc, #492]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042ea:	430b      	orrs	r3, r1
 80042ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800430e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d039      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431e:	2b03      	cmp	r3, #3
 8004320:	d81c      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004322:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	08004365 	.word	0x08004365
 800432c:	08004339 	.word	0x08004339
 8004330:	08004347 	.word	0x08004347
 8004334:	08004365 	.word	0x08004365
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004338:	4b67      	ldr	r3, [pc, #412]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	4a66      	ldr	r2, [pc, #408]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004344:	e00f      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	3308      	adds	r3, #8
 800434c:	2102      	movs	r1, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f902 	bl	8005558 <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800435a:	e004      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800436e:	4b5a      	ldr	r3, [pc, #360]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004372:	f023 0103 	bic.w	r1, r3, #3
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437c:	4a56      	ldr	r2, [pc, #344]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800437e:	430b      	orrs	r3, r1
 8004380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004382:	e003      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004398:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f000 809f 	beq.w	80044ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ae:	4b4b      	ldr	r3, [pc, #300]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4a      	ldr	r2, [pc, #296]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ba:	f7fd fa71 	bl	80018a0 <HAL_GetTick>
 80043be:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c2:	e00b      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c4:	f7fd fa6c 	bl	80018a0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b64      	cmp	r3, #100	@ 0x64
 80043d2:	d903      	bls.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043da:	e005      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043dc:	4b3f      	ldr	r3, [pc, #252]	@ (80044dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0ed      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80043e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d179      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043f0:	4b39      	ldr	r3, [pc, #228]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043fc:	4053      	eors	r3, r2
 80043fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d015      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004412:	4b31      	ldr	r3, [pc, #196]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	4a30      	ldr	r2, [pc, #192]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800441e:	4b2e      	ldr	r3, [pc, #184]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	4a2d      	ldr	r2, [pc, #180]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004428:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800442a:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004430:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800443a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443e:	d118      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd fa2e 	bl	80018a0 <HAL_GetTick>
 8004444:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004448:	e00d      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fd fa29 	bl	80018a0 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004454:	1ad2      	subs	r2, r2, r3
 8004456:	f241 3388 	movw	r3, #5000	@ 0x1388
 800445a:	429a      	cmp	r2, r3
 800445c:	d903      	bls.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004464:	e005      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004466:	4b1c      	ldr	r3, [pc, #112]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0eb      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004476:	2b00      	cmp	r3, #0
 8004478:	d129      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800448a:	d10e      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800448c:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800449c:	091a      	lsrs	r2, r3, #4
 800449e:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	4a0d      	ldr	r2, [pc, #52]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6113      	str	r3, [r2, #16]
 80044a8:	e005      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80044aa:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044b4:	6113      	str	r3, [r2, #16]
 80044b6:	4b08      	ldr	r3, [pc, #32]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c6:	4a04      	ldr	r2, [pc, #16]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80044cc:	e00e      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80044d6:	e009      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80044d8:	58024400 	.word	0x58024400
 80044dc:	58024800 	.word	0x58024800
 80044e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 0301 	and.w	r3, r2, #1
 80044f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004502:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004506:	460b      	mov	r3, r1
 8004508:	4313      	orrs	r3, r2
 800450a:	f000 8089 	beq.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004514:	2b28      	cmp	r3, #40	@ 0x28
 8004516:	d86b      	bhi.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004518:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	080045f9 	.word	0x080045f9
 8004524:	080045f1 	.word	0x080045f1
 8004528:	080045f1 	.word	0x080045f1
 800452c:	080045f1 	.word	0x080045f1
 8004530:	080045f1 	.word	0x080045f1
 8004534:	080045f1 	.word	0x080045f1
 8004538:	080045f1 	.word	0x080045f1
 800453c:	080045f1 	.word	0x080045f1
 8004540:	080045c5 	.word	0x080045c5
 8004544:	080045f1 	.word	0x080045f1
 8004548:	080045f1 	.word	0x080045f1
 800454c:	080045f1 	.word	0x080045f1
 8004550:	080045f1 	.word	0x080045f1
 8004554:	080045f1 	.word	0x080045f1
 8004558:	080045f1 	.word	0x080045f1
 800455c:	080045f1 	.word	0x080045f1
 8004560:	080045db 	.word	0x080045db
 8004564:	080045f1 	.word	0x080045f1
 8004568:	080045f1 	.word	0x080045f1
 800456c:	080045f1 	.word	0x080045f1
 8004570:	080045f1 	.word	0x080045f1
 8004574:	080045f1 	.word	0x080045f1
 8004578:	080045f1 	.word	0x080045f1
 800457c:	080045f1 	.word	0x080045f1
 8004580:	080045f9 	.word	0x080045f9
 8004584:	080045f1 	.word	0x080045f1
 8004588:	080045f1 	.word	0x080045f1
 800458c:	080045f1 	.word	0x080045f1
 8004590:	080045f1 	.word	0x080045f1
 8004594:	080045f1 	.word	0x080045f1
 8004598:	080045f1 	.word	0x080045f1
 800459c:	080045f1 	.word	0x080045f1
 80045a0:	080045f9 	.word	0x080045f9
 80045a4:	080045f1 	.word	0x080045f1
 80045a8:	080045f1 	.word	0x080045f1
 80045ac:	080045f1 	.word	0x080045f1
 80045b0:	080045f1 	.word	0x080045f1
 80045b4:	080045f1 	.word	0x080045f1
 80045b8:	080045f1 	.word	0x080045f1
 80045bc:	080045f1 	.word	0x080045f1
 80045c0:	080045f9 	.word	0x080045f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	3308      	adds	r3, #8
 80045ca:	2101      	movs	r1, #1
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 ffc3 	bl	8005558 <RCCEx_PLL2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045d8:	e00f      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	3328      	adds	r3, #40	@ 0x28
 80045e0:	2101      	movs	r1, #1
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 f86a 	bl	80056bc <RCCEx_PLL3_Config>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045ee:	e004      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f6:	e000      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004602:	4bbf      	ldr	r3, [pc, #764]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004610:	4abb      	ldr	r2, [pc, #748]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004612:	430b      	orrs	r3, r1
 8004614:	6553      	str	r3, [r2, #84]	@ 0x54
 8004616:	e003      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f002 0302 	and.w	r3, r2, #2
 800462c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004630:	2300      	movs	r3, #0
 8004632:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004636:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800463a:	460b      	mov	r3, r1
 800463c:	4313      	orrs	r3, r2
 800463e:	d041      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004646:	2b05      	cmp	r3, #5
 8004648:	d824      	bhi.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800464a:	a201      	add	r2, pc, #4	@ (adr r2, 8004650 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	0800469d 	.word	0x0800469d
 8004654:	08004669 	.word	0x08004669
 8004658:	0800467f 	.word	0x0800467f
 800465c:	0800469d 	.word	0x0800469d
 8004660:	0800469d 	.word	0x0800469d
 8004664:	0800469d 	.word	0x0800469d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466c:	3308      	adds	r3, #8
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f000 ff71 	bl	8005558 <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800467c:	e00f      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	3328      	adds	r3, #40	@ 0x28
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f001 f818 	bl	80056bc <RCCEx_PLL3_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004692:	e004      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800469c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046a6:	4b96      	ldr	r3, [pc, #600]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	f023 0107 	bic.w	r1, r3, #7
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046b4:	4a92      	ldr	r2, [pc, #584]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ba:	e003      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f002 0304 	and.w	r3, r2, #4
 80046d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d044      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d825      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046f0:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004745 	.word	0x08004745
 80046fc:	08004711 	.word	0x08004711
 8004700:	08004727 	.word	0x08004727
 8004704:	08004745 	.word	0x08004745
 8004708:	08004745 	.word	0x08004745
 800470c:	08004745 	.word	0x08004745
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004714:	3308      	adds	r3, #8
 8004716:	2101      	movs	r1, #1
 8004718:	4618      	mov	r0, r3
 800471a:	f000 ff1d 	bl	8005558 <RCCEx_PLL2_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004724:	e00f      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	3328      	adds	r3, #40	@ 0x28
 800472c:	2101      	movs	r1, #1
 800472e:	4618      	mov	r0, r3
 8004730:	f000 ffc4 	bl	80056bc <RCCEx_PLL3_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800473a:	e004      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004742:	e000      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10b      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800474e:	4b6c      	ldr	r3, [pc, #432]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004752:	f023 0107 	bic.w	r1, r3, #7
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475e:	4a68      	ldr	r2, [pc, #416]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004760:	430b      	orrs	r3, r1
 8004762:	6593      	str	r3, [r2, #88]	@ 0x58
 8004764:	e003      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f002 0320 	and.w	r3, r2, #32
 800477a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800477e:	2300      	movs	r3, #0
 8004780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004788:	460b      	mov	r3, r1
 800478a:	4313      	orrs	r3, r2
 800478c:	d055      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800479a:	d033      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800479c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047a0:	d82c      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a6:	d02f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ac:	d826      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047b2:	d02b      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80047b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047b8:	d820      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047be:	d012      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80047c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c4:	d81a      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d022      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80047ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047ce:	d115      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d4:	3308      	adds	r3, #8
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 febd 	bl	8005558 <RCCEx_PLL2_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047e4:	e015      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ea:	3328      	adds	r3, #40	@ 0x28
 80047ec:	2102      	movs	r1, #2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 ff64 	bl	80056bc <RCCEx_PLL3_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047fa:	e00a      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004802:	e006      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004804:	bf00      	nop
 8004806:	e004      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004808:	bf00      	nop
 800480a:	e002      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800480c:	bf00      	nop
 800480e:	e000      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800481a:	4b39      	ldr	r3, [pc, #228]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800481c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800481e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482a:	4a35      	ldr	r2, [pc, #212]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800482c:	430b      	orrs	r3, r1
 800482e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004830:	e003      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004846:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004850:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d058      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004862:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004866:	d033      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004868:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800486c:	d82c      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004872:	d02f      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004878:	d826      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800487a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800487e:	d02b      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004884:	d820      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488a:	d012      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004890:	d81a      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d022      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489a:	d115      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a0:	3308      	adds	r3, #8
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fe57 	bl	8005558 <RCCEx_PLL2_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048b0:	e015      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	3328      	adds	r3, #40	@ 0x28
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fefe 	bl	80056bc <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048c6:	e00a      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ce:	e006      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048d0:	bf00      	nop
 80048d2:	e004      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048d4:	bf00      	nop
 80048d6:	e002      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048d8:	bf00      	nop
 80048da:	e000      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10e      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048f6:	4a02      	ldr	r2, [pc, #8]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80048fc:	e006      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800491c:	2300      	movs	r3, #0
 800491e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004922:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d055      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004934:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004938:	d033      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800493a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800493e:	d82c      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004944:	d02f      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800494a:	d826      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800494c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004950:	d02b      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004952:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004956:	d820      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004958:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800495c:	d012      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800495e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004962:	d81a      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d022      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800496c:	d115      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	3308      	adds	r3, #8
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fdee 	bl	8005558 <RCCEx_PLL2_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004982:	e015      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004988:	3328      	adds	r3, #40	@ 0x28
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fe95 	bl	80056bc <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004998:	e00a      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049a2:	bf00      	nop
 80049a4:	e004      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049a6:	bf00      	nop
 80049a8:	e002      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049aa:	bf00      	nop
 80049ac:	e000      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049b8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049c8:	4a9d      	ldr	r2, [pc, #628]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ca:	430b      	orrs	r3, r1
 80049cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ce:	e003      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f002 0308 	and.w	r3, r2, #8
 80049e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d01e      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	3328      	adds	r3, #40	@ 0x28
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fe54 	bl	80056bc <RCCEx_PLL3_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a20:	4b87      	ldr	r3, [pc, #540]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a30:	4a83      	ldr	r2, [pc, #524]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a32:	430b      	orrs	r3, r1
 8004a34:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f002 0310 	and.w	r3, r2, #16
 8004a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d01e      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a62:	d10c      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	3328      	adds	r3, #40	@ 0x28
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fe25 	bl	80056bc <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a7e:	4b70      	ldr	r3, [pc, #448]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a8e:	4a6c      	ldr	r2, [pc, #432]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004aa0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004aaa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d03e      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ac0:	d022      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ac6:	d81b      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad0:	d00b      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004ad2:	e015      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad8:	3308      	adds	r3, #8
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fd3b 	bl	8005558 <RCCEx_PLL2_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ae8:	e00f      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aee:	3328      	adds	r3, #40	@ 0x28
 8004af0:	2102      	movs	r1, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fde2 	bl	80056bc <RCCEx_PLL3_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004afe:	e004      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b06:	e000      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10b      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b12:	4b4b      	ldr	r3, [pc, #300]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b22:	4a47      	ldr	r2, [pc, #284]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b28:	e003      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b40:	2300      	movs	r3, #0
 8004b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	d03b      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b5a:	d01f      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b60:	d818      	bhi.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b66:	d003      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b6c:	d007      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b6e:	e011      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b70:	4b33      	ldr	r3, [pc, #204]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	4a32      	ldr	r2, [pc, #200]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b7c:	e00f      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	3328      	adds	r3, #40	@ 0x28
 8004b84:	2101      	movs	r1, #1
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fd98 	bl	80056bc <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b92:	e004      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b9a:	e000      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba6:	4b26      	ldr	r3, [pc, #152]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004baa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	4a22      	ldr	r2, [pc, #136]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bbc:	e003      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004bd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4313      	orrs	r3, r2
 8004be0:	d034      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf0:	d007      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004bf2:	e011      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf4:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	4a11      	ldr	r2, [pc, #68]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c00:	e00e      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	3308      	adds	r3, #8
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fca4 	bl	8005558 <RCCEx_PLL2_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c28:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	4a02      	ldr	r2, [pc, #8]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c3c:	e006      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c62:	460b      	mov	r3, r1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	d00c      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	3328      	adds	r3, #40	@ 0x28
 8004c6e:	2102      	movs	r1, #2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fd23 	bl	80056bc <RCCEx_PLL3_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c90:	2300      	movs	r3, #0
 8004c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	d038      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004caa:	d018      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb0:	d811      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb6:	d014      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cbc:	d80b      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d011      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc8:	4bc3      	ldr	r3, [pc, #780]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	4ac2      	ldr	r2, [pc, #776]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cdc:	e004      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e002      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf0:	4bb9      	ldr	r3, [pc, #740]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d00:	4ab5      	ldr	r2, [pc, #724]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d02:	430b      	orrs	r3, r1
 8004d04:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d06:	e003      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d1e:	2300      	movs	r3, #0
 8004d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d009      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d2c:	4baa      	ldr	r3, [pc, #680]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d3a:	4aa7      	ldr	r2, [pc, #668]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d4e:	2300      	movs	r3, #0
 8004d50:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d56:	460b      	mov	r3, r1
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d6c:	4a9a      	ldr	r2, [pc, #616]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d80:	2300      	movs	r3, #0
 8004d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8e:	4b92      	ldr	r3, [pc, #584]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d92:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d9c:	4a8e      	ldr	r2, [pc, #568]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8004db0:	2300      	movs	r3, #0
 8004db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004db4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dbe:	4b86      	ldr	r3, [pc, #536]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4a85      	ldr	r2, [pc, #532]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dc8:	6113      	str	r3, [r2, #16]
 8004dca:	4b83      	ldr	r3, [pc, #524]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dcc:	6919      	ldr	r1, [r3, #16]
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004dd6:	4a80      	ldr	r2, [pc, #512]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dea:	2300      	movs	r3, #0
 8004dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004df8:	4b77      	ldr	r3, [pc, #476]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	4a74      	ldr	r2, [pc, #464]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e28:	4b6b      	ldr	r3, [pc, #428]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e38:	4a67      	ldr	r2, [pc, #412]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	2100      	movs	r1, #0
 8004e48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e54:	460b      	mov	r3, r1
 8004e56:	4313      	orrs	r3, r2
 8004e58:	d011      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	3308      	adds	r3, #8
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fb78 	bl	8005558 <RCCEx_PLL2_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	2100      	movs	r1, #0
 8004e88:	6239      	str	r1, [r7, #32]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e94:	460b      	mov	r3, r1
 8004e96:	4313      	orrs	r3, r2
 8004e98:	d011      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fb58 	bl	8005558 <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	61b9      	str	r1, [r7, #24]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	d011      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	3308      	adds	r3, #8
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fb38 	bl	8005558 <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f06:	2100      	movs	r1, #0
 8004f08:	6139      	str	r1, [r7, #16]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f14:	460b      	mov	r3, r1
 8004f16:	4313      	orrs	r3, r2
 8004f18:	d011      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1e:	3328      	adds	r3, #40	@ 0x28
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fbca 	bl	80056bc <RCCEx_PLL3_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	2100      	movs	r1, #0
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f54:	460b      	mov	r3, r1
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d011      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	3328      	adds	r3, #40	@ 0x28
 8004f60:	2101      	movs	r1, #1
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fbaa 	bl	80056bc <RCCEx_PLL3_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	2100      	movs	r1, #0
 8004f88:	6039      	str	r1, [r7, #0]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	607b      	str	r3, [r7, #4]
 8004f90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f94:	460b      	mov	r3, r1
 8004f96:	4313      	orrs	r3, r2
 8004f98:	d011      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	3328      	adds	r3, #40	@ 0x28
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fb8a 	bl	80056bc <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004fbe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd8:	58024400 	.word	0x58024400

08004fdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fe0:	f7fe fd96 	bl	8003b10 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4904      	ldr	r1, [pc, #16]	@ (8005004 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	58024400 	.word	0x58024400
 8005004:	0800926c 	.word	0x0800926c

08005008 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	@ 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005010:	4ba1      	ldr	r3, [pc, #644]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800501a:	4b9f      	ldr	r3, [pc, #636]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501e:	0b1b      	lsrs	r3, r3, #12
 8005020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005024:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005026:	4b9c      	ldr	r3, [pc, #624]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005032:	4b99      	ldr	r3, [pc, #612]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	08db      	lsrs	r3, r3, #3
 8005038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8111 	beq.w	8005278 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b02      	cmp	r3, #2
 800505a:	f000 8083 	beq.w	8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b02      	cmp	r3, #2
 8005062:	f200 80a1 	bhi.w	80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d056      	beq.n	8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005072:	e099      	b.n	80051a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005074:	4b88      	ldr	r3, [pc, #544]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02d      	beq.n	80050dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005080:	4b85      	ldr	r3, [pc, #532]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	4a84      	ldr	r2, [pc, #528]	@ (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
 8005090:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80050be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050da:	e087      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005102:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800511e:	e065      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	4b59      	ldr	r3, [pc, #356]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005142:	ed97 6a03 	vldr	s12, [r7, #12]
 8005146:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800514a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800514e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800515e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005162:	e043      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005176:	4b48      	ldr	r3, [pc, #288]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005186:	ed97 6a03 	vldr	s12, [r7, #12]
 800518a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800518e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800519a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a6:	e021      	b.n	80051ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b37      	ldr	r3, [pc, #220]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	0a5b      	lsrs	r3, r3, #9
 80051f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005206:	edd7 6a07 	vldr	s13, [r7, #28]
 800520a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005212:	ee17 2a90 	vmov	r2, s15
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800521a:	4b1f      	ldr	r3, [pc, #124]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521e:	0c1b      	lsrs	r3, r3, #16
 8005220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005224:	ee07 3a90 	vmov	s15, r3
 8005228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005234:	edd7 6a07 	vldr	s13, [r7, #28]
 8005238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005240:	ee17 2a90 	vmov	r2, s15
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005248:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	0e1b      	lsrs	r3, r3, #24
 800524e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800525e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005262:	edd7 6a07 	vldr	s13, [r7, #28]
 8005266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526e:	ee17 2a90 	vmov	r2, s15
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005276:	e008      	b.n	800528a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
}
 800528a:	bf00      	nop
 800528c:	3724      	adds	r7, #36	@ 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	58024400 	.word	0x58024400
 800529c:	03d09000 	.word	0x03d09000
 80052a0:	46000000 	.word	0x46000000
 80052a4:	4c742400 	.word	0x4c742400
 80052a8:	4a742400 	.word	0x4a742400
 80052ac:	4af42400 	.word	0x4af42400

080052b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052c2:	4b9f      	ldr	r3, [pc, #636]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c6:	0d1b      	lsrs	r3, r3, #20
 80052c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052da:	4b99      	ldr	r3, [pc, #612]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052de:	08db      	lsrs	r3, r3, #3
 80052e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8111 	beq.w	8005520 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b02      	cmp	r3, #2
 8005302:	f000 8083 	beq.w	800540c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b02      	cmp	r3, #2
 800530a:	f200 80a1 	bhi.w	8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d056      	beq.n	80053c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800531a:	e099      	b.n	8005450 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800531c:	4b88      	ldr	r3, [pc, #544]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02d      	beq.n	8005384 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005328:	4b85      	ldr	r3, [pc, #532]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	4a84      	ldr	r2, [pc, #528]	@ (8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
 8005338:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	ee07 3a90 	vmov	s15, r3
 8005340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005352:	4b7b      	ldr	r3, [pc, #492]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005362:	ed97 6a03 	vldr	s12, [r7, #12]
 8005366:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800536a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800536e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005382:	e087      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800554c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005396:	4b6a      	ldr	r3, [pc, #424]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053c6:	e065      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053da:	4b59      	ldr	r3, [pc, #356]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800540a:	e043      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800541a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541e:	4b48      	ldr	r3, [pc, #288]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005432:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800544e:	e021      	b.n	8005494 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b37      	ldr	r3, [pc, #220]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a03 	vldr	s12, [r7, #12]
 8005476:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005548 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005492:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005494:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ba:	ee17 2a90 	vmov	r2, s15
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e8:	ee17 2a90 	vmov	r2, s15
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	0e1b      	lsrs	r3, r3, #24
 80054f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550a:	edd7 6a07 	vldr	s13, [r7, #28]
 800550e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005516:	ee17 2a90 	vmov	r2, s15
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800551e:	e008      	b.n	8005532 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
}
 8005532:	bf00      	nop
 8005534:	3724      	adds	r7, #36	@ 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	58024400 	.word	0x58024400
 8005544:	03d09000 	.word	0x03d09000
 8005548:	46000000 	.word	0x46000000
 800554c:	4c742400 	.word	0x4c742400
 8005550:	4a742400 	.word	0x4a742400
 8005554:	4af42400 	.word	0x4af42400

08005558 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005566:	4b53      	ldr	r3, [pc, #332]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b03      	cmp	r3, #3
 8005570:	d101      	bne.n	8005576 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e099      	b.n	80056aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005576:	4b4f      	ldr	r3, [pc, #316]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a4e      	ldr	r2, [pc, #312]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800557c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005582:	f7fc f98d 	bl	80018a0 <HAL_GetTick>
 8005586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005588:	e008      	b.n	800559c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800558a:	f7fc f989 	bl	80018a0 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e086      	b.n	80056aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800559c:	4b45      	ldr	r3, [pc, #276]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055a8:	4b42      	ldr	r3, [pc, #264]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	031b      	lsls	r3, r3, #12
 80055b6:	493f      	ldr	r1, [pc, #252]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	025b      	lsls	r3, r3, #9
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	061b      	lsls	r3, r3, #24
 80055e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055ec:	4931      	ldr	r1, [pc, #196]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055f2:	4b30      	ldr	r3, [pc, #192]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	492d      	ldr	r1, [pc, #180]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005604:	4b2b      	ldr	r3, [pc, #172]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	f023 0220 	bic.w	r2, r3, #32
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	4928      	ldr	r1, [pc, #160]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005616:	4b27      	ldr	r3, [pc, #156]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	4a26      	ldr	r2, [pc, #152]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800561c:	f023 0310 	bic.w	r3, r3, #16
 8005620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005622:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005624:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005626:	4b24      	ldr	r3, [pc, #144]	@ (80056b8 <RCCEx_PLL2_Config+0x160>)
 8005628:	4013      	ands	r3, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	69d2      	ldr	r2, [r2, #28]
 800562e:	00d2      	lsls	r2, r2, #3
 8005630:	4920      	ldr	r1, [pc, #128]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005636:	4b1f      	ldr	r3, [pc, #124]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563a:	4a1e      	ldr	r2, [pc, #120]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800563c:	f043 0310 	orr.w	r3, r3, #16
 8005640:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005648:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a19      	ldr	r2, [pc, #100]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800564e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005654:	e00f      	b.n	8005676 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800565c:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005668:	e005      	b.n	8005676 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800566a:	4b12      	ldr	r3, [pc, #72]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	4a11      	ldr	r2, [pc, #68]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005674:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005676:	4b0f      	ldr	r3, [pc, #60]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a0e      	ldr	r2, [pc, #56]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800567c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005682:	f7fc f90d 	bl	80018a0 <HAL_GetTick>
 8005686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005688:	e008      	b.n	800569c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800568a:	f7fc f909 	bl	80018a0 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800569c:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <RCCEx_PLL2_Config+0x15c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	ffff0007 	.word	0xffff0007

080056bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056ca:	4b53      	ldr	r3, [pc, #332]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80056cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d101      	bne.n	80056da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e099      	b.n	800580e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056da:	4b4f      	ldr	r3, [pc, #316]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a4e      	ldr	r2, [pc, #312]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80056e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e6:	f7fc f8db 	bl	80018a0 <HAL_GetTick>
 80056ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056ec:	e008      	b.n	8005700 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056ee:	f7fc f8d7 	bl	80018a0 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e086      	b.n	800580e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005700:	4b45      	ldr	r3, [pc, #276]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1f0      	bne.n	80056ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800570c:	4b42      	ldr	r3, [pc, #264]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	051b      	lsls	r3, r3, #20
 800571a:	493f      	ldr	r1, [pc, #252]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 800571c:	4313      	orrs	r3, r2
 800571e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	3b01      	subs	r3, #1
 8005730:	025b      	lsls	r3, r3, #9
 8005732:	b29b      	uxth	r3, r3
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	3b01      	subs	r3, #1
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	3b01      	subs	r3, #1
 800574a:	061b      	lsls	r3, r3, #24
 800574c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005750:	4931      	ldr	r1, [pc, #196]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005756:	4b30      	ldr	r3, [pc, #192]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	492d      	ldr	r1, [pc, #180]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005764:	4313      	orrs	r3, r2
 8005766:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005768:	4b2b      	ldr	r3, [pc, #172]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 800576a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4928      	ldr	r1, [pc, #160]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800577a:	4b27      	ldr	r3, [pc, #156]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	4a26      	ldr	r2, [pc, #152]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005786:	4b24      	ldr	r3, [pc, #144]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800578a:	4b24      	ldr	r3, [pc, #144]	@ (800581c <RCCEx_PLL3_Config+0x160>)
 800578c:	4013      	ands	r3, r2
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	69d2      	ldr	r2, [r2, #28]
 8005792:	00d2      	lsls	r2, r2, #3
 8005794:	4920      	ldr	r1, [pc, #128]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800579a:	4b1f      	ldr	r3, [pc, #124]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 800579c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579e:	4a1e      	ldr	r2, [pc, #120]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	4a19      	ldr	r2, [pc, #100]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057b8:	e00f      	b.n	80057da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d106      	bne.n	80057ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057c0:	4b15      	ldr	r3, [pc, #84]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	4a14      	ldr	r2, [pc, #80]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057cc:	e005      	b.n	80057da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057ce:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	4a11      	ldr	r2, [pc, #68]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057da:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a0e      	ldr	r2, [pc, #56]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 80057e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e6:	f7fc f85b 	bl	80018a0 <HAL_GetTick>
 80057ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057ec:	e008      	b.n	8005800 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057ee:	f7fc f857 	bl	80018a0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e006      	b.n	800580e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <RCCEx_PLL3_Config+0x15c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	58024400 	.word	0x58024400
 800581c:	ffff0007 	.word	0xffff0007

08005820 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d071      	beq.n	8005916 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fb fb12 	bl	8000e70 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b10      	cmp	r3, #16
 8005860:	d050      	beq.n	8005904 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	22ca      	movs	r2, #202	@ 0xca
 8005868:	625a      	str	r2, [r3, #36]	@ 0x24
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2253      	movs	r2, #83	@ 0x53
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa4a 	bl	8005d0c <RTC_EnterInitMode>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d124      	bne.n	80058cc <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6899      	ldr	r1, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	4b24      	ldr	r3, [pc, #144]	@ (8005920 <HAL_RTC_Init+0x100>)
 800588e:	400b      	ands	r3, r1
 8005890:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6899      	ldr	r1, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	0419      	lsls	r1, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa56 	bl	8005d74 <RTC_ExitInitMode>
 80058c8:	4603      	mov	r3, r0
 80058ca:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d113      	bne.n	80058fa <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0203 	bic.w	r2, r2, #3
 80058e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	22ff      	movs	r2, #255	@ 0xff
 8005900:	625a      	str	r2, [r3, #36]	@ 0x24
 8005902:	e001      	b.n	8005908 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	ff8fffbf 	.word	0xff8fffbf

08005924 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_RTC_SetTime+0x1a>
 800593a:	2302      	movs	r3, #2
 800593c:	e089      	b.n	8005a52 <HAL_RTC_SetTime+0x12e>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	22ca      	movs	r2, #202	@ 0xca
 8005954:	625a      	str	r2, [r3, #36]	@ 0x24
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2253      	movs	r2, #83	@ 0x53
 800595c:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f9d4 	bl	8005d0c <RTC_EnterInitMode>
 8005964:	4603      	mov	r3, r0
 8005966:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d161      	bne.n	8005a32 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d126      	bne.n	80059c2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fa2f 	bl	8005df0 <RTC_ByteToBcd2>
 8005992:	4603      	mov	r3, r0
 8005994:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fa28 	bl	8005df0 <RTC_ByteToBcd2>
 80059a0:	4603      	mov	r3, r0
 80059a2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059a4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	789b      	ldrb	r3, [r3, #2]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fa20 	bl	8005df0 <RTC_ByteToBcd2>
 80059b0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059b2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	78db      	ldrb	r3, [r3, #3]
 80059ba:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e018      	b.n	80059f4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059e2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059e8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	78db      	ldrb	r3, [r3, #3]
 80059ee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	6979      	ldr	r1, [r7, #20]
 80059fa:	4b18      	ldr	r3, [pc, #96]	@ (8005a5c <HAL_RTC_SetTime+0x138>)
 80059fc:	400b      	ands	r3, r1
 80059fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6899      	ldr	r1, [r3, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f9a3 	bl	8005d74 <RTC_ExitInitMode>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	22ff      	movs	r2, #255	@ 0xff
 8005a38:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd90      	pop	{r4, r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	007f7f7f 	.word	0x007f7f7f

08005a60 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b22      	ldr	r3, [pc, #136]	@ (8005b14 <HAL_RTC_GetTime+0xb4>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	0c1b      	lsrs	r3, r3, #16
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	0d9b      	lsrs	r3, r3, #22
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d11a      	bne.n	8005b0a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f9a9 	bl	8005e30 <RTC_Bcd2ToByte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f9a0 	bl	8005e30 <RTC_Bcd2ToByte>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	789b      	ldrb	r3, [r3, #2]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f997 	bl	8005e30 <RTC_Bcd2ToByte>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	007f7f7f 	.word	0x007f7f7f

08005b18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_RTC_SetDate+0x1a>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e073      	b.n	8005c1a <HAL_RTC_SetDate+0x102>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10e      	bne.n	8005b66 <HAL_RTC_SetDate+0x4e>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	f023 0310 	bic.w	r3, r3, #16
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	330a      	adds	r3, #10
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11c      	bne.n	8005ba6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	78db      	ldrb	r3, [r3, #3]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f93d 	bl	8005df0 <RTC_ByteToBcd2>
 8005b76:	4603      	mov	r3, r0
 8005b78:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f936 	bl	8005df0 <RTC_ByteToBcd2>
 8005b84:	4603      	mov	r3, r0
 8005b86:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b88:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	789b      	ldrb	r3, [r3, #2]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f92e 	bl	8005df0 <RTC_ByteToBcd2>
 8005b94:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b96:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	e00e      	b.n	8005bc4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bb2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005bb8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	22ca      	movs	r2, #202	@ 0xca
 8005bca:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2253      	movs	r2, #83	@ 0x53
 8005bd2:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f899 	bl	8005d0c <RTC_EnterInitMode>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005bde:	7cfb      	ldrb	r3, [r7, #19]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	6979      	ldr	r1, [r7, #20]
 8005bea:	4b0e      	ldr	r3, [pc, #56]	@ (8005c24 <HAL_RTC_SetDate+0x10c>)
 8005bec:	400b      	ands	r3, r1
 8005bee:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f8bf 	bl	8005d74 <RTC_ExitInitMode>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	22ff      	movs	r2, #255	@ 0xff
 8005c00:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005c18:	7cfb      	ldrb	r3, [r7, #19]


}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd90      	pop	{r4, r7, pc}
 8005c22:	bf00      	nop
 8005c24:	00ffff3f 	.word	0x00ffff3f

08005c28 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	4b21      	ldr	r3, [pc, #132]	@ (8005cc0 <HAL_RTC_GetDate+0x98>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	0b5b      	lsrs	r3, r3, #13
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11a      	bne.n	8005cb4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	78db      	ldrb	r3, [r3, #3]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f8d4 	bl	8005e30 <RTC_Bcd2ToByte>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 f8cb 	bl	8005e30 <RTC_Bcd2ToByte>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	789b      	ldrb	r3, [r3, #2]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f8c2 	bl	8005e30 <RTC_Bcd2ToByte>
 8005cac:	4603      	mov	r3, r0
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	00ffff3f 	.word	0x00ffff3f

08005cc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d08 <HAL_RTC_WaitForSynchro+0x44>)
 8005cd2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8005cd4:	f7fb fde4 	bl	80018a0 <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cda:	e009      	b.n	8005cf0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cdc:	f7fb fde0 	bl	80018a0 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cea:	d901      	bls.n	8005cf0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e007      	b.n	8005d00 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0ee      	beq.n	8005cdc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	0003ff5f 	.word	0x0003ff5f

08005d0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d120      	bne.n	8005d68 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d30:	f7fb fdb6 	bl	80018a0 <HAL_GetTick>
 8005d34:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d36:	e00d      	b.n	8005d54 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d38:	f7fb fdb2 	bl	80018a0 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d46:	d905      	bls.n	8005d54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2203      	movs	r2, #3
 8005d50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <RTC_EnterInitMode+0x5c>
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d1e7      	bne.n	8005d38 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005d80:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <RTC_ExitInitMode+0x78>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a19      	ldr	r2, [pc, #100]	@ (8005dec <RTC_ExitInitMode+0x78>)
 8005d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d8a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d8c:	4b17      	ldr	r3, [pc, #92]	@ (8005dec <RTC_ExitInitMode+0x78>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10c      	bne.n	8005db2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ff93 	bl	8005cc4 <HAL_RTC_WaitForSynchro>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01e      	beq.n	8005de2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2203      	movs	r2, #3
 8005da8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e017      	b.n	8005de2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005db2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <RTC_ExitInitMode+0x78>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	4a0d      	ldr	r2, [pc, #52]	@ (8005dec <RTC_ExitInitMode+0x78>)
 8005db8:	f023 0320 	bic.w	r3, r3, #32
 8005dbc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff ff80 	bl	8005cc4 <HAL_RTC_WaitForSynchro>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005dd6:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <RTC_ExitInitMode+0x78>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	4a04      	ldr	r2, [pc, #16]	@ (8005dec <RTC_ExitInitMode+0x78>)
 8005ddc:	f043 0320 	orr.w	r3, r3, #32
 8005de0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	58004000 	.word	0x58004000

08005df0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8005e02:	e005      	b.n	8005e10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
 8005e0c:	3b0a      	subs	r3, #10
 8005e0e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8005e10:	7afb      	ldrb	r3, [r7, #11]
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	d8f6      	bhi.n	8005e04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	b2db      	uxtb	r3, r3
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	0092      	lsls	r2, r2, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	4413      	add	r3, r2
 8005e56:	b2db      	uxtb	r3, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e10f      	b.n	8006096 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a87      	ldr	r2, [pc, #540]	@ (80060a0 <HAL_SPI_Init+0x23c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <HAL_SPI_Init+0x42>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a86      	ldr	r2, [pc, #536]	@ (80060a4 <HAL_SPI_Init+0x240>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_SPI_Init+0x42>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a84      	ldr	r2, [pc, #528]	@ (80060a8 <HAL_SPI_Init+0x244>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d005      	beq.n	8005ea6 <HAL_SPI_Init+0x42>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	d901      	bls.n	8005ea6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e0f7      	b.n	8006096 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fbbc 	bl	8006624 <SPI_GetPacketSize>
 8005eac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a7b      	ldr	r2, [pc, #492]	@ (80060a0 <HAL_SPI_Init+0x23c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_SPI_Init+0x6e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a79      	ldr	r2, [pc, #484]	@ (80060a4 <HAL_SPI_Init+0x240>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d007      	beq.n	8005ed2 <HAL_SPI_Init+0x6e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a78      	ldr	r2, [pc, #480]	@ (80060a8 <HAL_SPI_Init+0x244>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d002      	beq.n	8005ed2 <HAL_SPI_Init+0x6e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d811      	bhi.n	8005ef6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005ed6:	4a72      	ldr	r2, [pc, #456]	@ (80060a0 <HAL_SPI_Init+0x23c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a70      	ldr	r2, [pc, #448]	@ (80060a4 <HAL_SPI_Init+0x240>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_SPI_Init+0x8c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a6f      	ldr	r2, [pc, #444]	@ (80060a8 <HAL_SPI_Init+0x244>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d104      	bne.n	8005efa <HAL_SPI_Init+0x96>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d901      	bls.n	8005efa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e0cd      	b.n	8006096 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fb f88e 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005f36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f40:	d119      	bne.n	8005f76 <HAL_SPI_Init+0x112>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f4a:	d103      	bne.n	8005f54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10c      	bne.n	8005f76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f64:	d107      	bne.n	8005f76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00f      	beq.n	8005fa2 <HAL_SPI_Init+0x13e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	2b06      	cmp	r3, #6
 8005f88:	d90b      	bls.n	8005fa2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e007      	b.n	8005fb2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	ea42 0103 	orr.w	r1, r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	431a      	orrs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006012:	ea42 0103 	orr.w	r1, r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d113      	bne.n	8006052 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800603c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006050:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0201 	bic.w	r2, r2, #1
 8006060:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40013000 	.word	0x40013000
 80060a4:	40003800 	.word	0x40003800
 80060a8:	40003c00 	.word	0x40003c00

080060ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3320      	adds	r3, #32
 80060c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060c4:	f7fb fbec 	bl	80018a0 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d001      	beq.n	80060da <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e1d1      	b.n	800647e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_SPI_Transmit+0x3a>
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e1c9      	b.n	800647e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_SPI_Transmit+0x4c>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e1c2      	b.n	800647e <HAL_SPI_Transmit+0x3d2>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2203      	movs	r2, #3
 8006104:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006150:	d108      	bne.n	8006164 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e009      	b.n	8006178 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006176:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	4b96      	ldr	r3, [pc, #600]	@ (80063d8 <HAL_SPI_Transmit+0x32c>)
 8006180:	4013      	ands	r3, r2
 8006182:	88f9      	ldrh	r1, [r7, #6]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	6812      	ldr	r2, [r2, #0]
 8006188:	430b      	orrs	r3, r1
 800618a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061a4:	d107      	bne.n	80061b6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	d947      	bls.n	800624e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80061be:	e03f      	b.n	8006240 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d114      	bne.n	80061f8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061f6:	e023      	b.n	8006240 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061f8:	f7fb fb52 	bl	80018a0 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d803      	bhi.n	8006210 <HAL_SPI_Transmit+0x164>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d102      	bne.n	8006216 <HAL_SPI_Transmit+0x16a>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d114      	bne.n	8006240 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f936 	bl	8006488 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006222:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e11e      	b.n	800647e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1b9      	bne.n	80061c0 <HAL_SPI_Transmit+0x114>
 800624c:	e0f1      	b.n	8006432 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2b07      	cmp	r3, #7
 8006254:	f240 80e6 	bls.w	8006424 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006258:	e05d      	b.n	8006316 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b02      	cmp	r3, #2
 8006266:	d132      	bne.n	80062ce <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800626e:	b29b      	uxth	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d918      	bls.n	80062a6 <HAL_SPI_Transmit+0x1fa>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d014      	beq.n	80062a6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b02      	subs	r3, #2
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80062a4:	e037      	b.n	8006316 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80062cc:	e023      	b.n	8006316 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ce:	f7fb fae7 	bl	80018a0 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d803      	bhi.n	80062e6 <HAL_SPI_Transmit+0x23a>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d102      	bne.n	80062ec <HAL_SPI_Transmit+0x240>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d114      	bne.n	8006316 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f8cb 	bl	8006488 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e0b3      	b.n	800647e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d19b      	bne.n	800625a <HAL_SPI_Transmit+0x1ae>
 8006322:	e086      	b.n	8006432 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d154      	bne.n	80063dc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d918      	bls.n	8006370 <HAL_SPI_Transmit+0x2c4>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d914      	bls.n	8006370 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b04      	subs	r3, #4
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800636e:	e059      	b.n	8006424 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d917      	bls.n	80063ac <HAL_SPI_Transmit+0x300>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d013      	beq.n	80063ac <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006392:	1c9a      	adds	r2, r3, #2
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b02      	subs	r3, #2
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80063aa:	e03b      	b.n	8006424 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3320      	adds	r3, #32
 80063b6:	7812      	ldrb	r2, [r2, #0]
 80063b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80063d6:	e025      	b.n	8006424 <HAL_SPI_Transmit+0x378>
 80063d8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063dc:	f7fb fa60 	bl	80018a0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d803      	bhi.n	80063f4 <HAL_SPI_Transmit+0x348>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_Transmit+0x34e>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d114      	bne.n	8006424 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f844 	bl	8006488 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006406:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e02c      	b.n	800647e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	f47f af79 	bne.w	8006324 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2200      	movs	r2, #0
 800643a:	2108      	movs	r1, #8
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f8c3 	bl	80065c8 <SPI_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f815 	bl	8006488 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800647c:	2300      	movs	r3, #0
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop

08006488 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0208 	orr.w	r2, r2, #8
 80064a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0210 	orr.w	r2, r2, #16
 80064b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6919      	ldr	r1, [r3, #16]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	4b3c      	ldr	r3, [pc, #240]	@ (80065c4 <SPI_CloseTransfer+0x13c>)
 80064d4:	400b      	ands	r3, r1
 80064d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80064e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d014      	beq.n	800651e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00f      	beq.n	800651e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006504:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0220 	orr.w	r2, r2, #32
 800651c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b03      	cmp	r3, #3
 8006528:	d014      	beq.n	8006554 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00f      	beq.n	8006554 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800653a:	f043 0204 	orr.w	r2, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006552:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00f      	beq.n	800657e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006564:	f043 0201 	orr.w	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699a      	ldr	r2, [r3, #24]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00f      	beq.n	80065a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800658e:	f043 0208 	orr.w	r2, r3, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	fffffc90 	.word	0xfffffc90

080065c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80065d8:	e010      	b.n	80065fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065da:	f7fb f961 	bl	80018a0 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d803      	bhi.n	80065f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f0:	d102      	bne.n	80065f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e00f      	b.n	800661c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	429a      	cmp	r2, r3
 8006618:	d0df      	beq.n	80065da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3307      	adds	r3, #7
 8006642:	08db      	lsrs	r3, r3, #3
 8006644:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	fb02 f303 	mul.w	r3, r2, r3
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e049      	b.n	8006700 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fa fea1 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f000 fbb1 	bl	8006e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e049      	b.n	80067ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f841 	bl	80067b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3304      	adds	r3, #4
 8006744:	4619      	mov	r1, r3
 8006746:	4610      	mov	r0, r2
 8006748:	f000 fb5a 	bl	8006e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <HAL_TIM_PWM_Start+0x24>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	bf14      	ite	ne
 80067e8:	2301      	movne	r3, #1
 80067ea:	2300      	moveq	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	e03c      	b.n	800686a <HAL_TIM_PWM_Start+0x9e>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d109      	bne.n	800680a <HAL_TIM_PWM_Start+0x3e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b01      	cmp	r3, #1
 8006800:	bf14      	ite	ne
 8006802:	2301      	movne	r3, #1
 8006804:	2300      	moveq	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	e02f      	b.n	800686a <HAL_TIM_PWM_Start+0x9e>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b08      	cmp	r3, #8
 800680e:	d109      	bne.n	8006824 <HAL_TIM_PWM_Start+0x58>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	bf14      	ite	ne
 800681c:	2301      	movne	r3, #1
 800681e:	2300      	moveq	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	e022      	b.n	800686a <HAL_TIM_PWM_Start+0x9e>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b0c      	cmp	r3, #12
 8006828:	d109      	bne.n	800683e <HAL_TIM_PWM_Start+0x72>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b01      	cmp	r3, #1
 8006834:	bf14      	ite	ne
 8006836:	2301      	movne	r3, #1
 8006838:	2300      	moveq	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	e015      	b.n	800686a <HAL_TIM_PWM_Start+0x9e>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b10      	cmp	r3, #16
 8006842:	d109      	bne.n	8006858 <HAL_TIM_PWM_Start+0x8c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b01      	cmp	r3, #1
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e008      	b.n	800686a <HAL_TIM_PWM_Start+0x9e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e0a1      	b.n	80069b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start+0xb6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006880:	e023      	b.n	80068ca <HAL_TIM_PWM_Start+0xfe>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b04      	cmp	r3, #4
 8006886:	d104      	bne.n	8006892 <HAL_TIM_PWM_Start+0xc6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006890:	e01b      	b.n	80068ca <HAL_TIM_PWM_Start+0xfe>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b08      	cmp	r3, #8
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_PWM_Start+0xd6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068a0:	e013      	b.n	80068ca <HAL_TIM_PWM_Start+0xfe>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_PWM_Start+0xe6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_PWM_Start+0xfe>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b10      	cmp	r3, #16
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_PWM_Start+0xf6>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068c0:	e003      	b.n	80068ca <HAL_TIM_PWM_Start+0xfe>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2201      	movs	r2, #1
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 feae 	bl	8007634 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a38      	ldr	r2, [pc, #224]	@ (80069c0 <HAL_TIM_PWM_Start+0x1f4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <HAL_TIM_PWM_Start+0x13e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a37      	ldr	r2, [pc, #220]	@ (80069c4 <HAL_TIM_PWM_Start+0x1f8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00e      	beq.n	800690a <HAL_TIM_PWM_Start+0x13e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a35      	ldr	r2, [pc, #212]	@ (80069c8 <HAL_TIM_PWM_Start+0x1fc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <HAL_TIM_PWM_Start+0x13e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a34      	ldr	r2, [pc, #208]	@ (80069cc <HAL_TIM_PWM_Start+0x200>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <HAL_TIM_PWM_Start+0x13e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a32      	ldr	r2, [pc, #200]	@ (80069d0 <HAL_TIM_PWM_Start+0x204>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d101      	bne.n	800690e <HAL_TIM_PWM_Start+0x142>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <HAL_TIM_PWM_Start+0x144>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d007      	beq.n	8006924 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006922:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a25      	ldr	r2, [pc, #148]	@ (80069c0 <HAL_TIM_PWM_Start+0x1f4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d022      	beq.n	8006974 <HAL_TIM_PWM_Start+0x1a8>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006936:	d01d      	beq.n	8006974 <HAL_TIM_PWM_Start+0x1a8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a25      	ldr	r2, [pc, #148]	@ (80069d4 <HAL_TIM_PWM_Start+0x208>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d018      	beq.n	8006974 <HAL_TIM_PWM_Start+0x1a8>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a24      	ldr	r2, [pc, #144]	@ (80069d8 <HAL_TIM_PWM_Start+0x20c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d013      	beq.n	8006974 <HAL_TIM_PWM_Start+0x1a8>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a22      	ldr	r2, [pc, #136]	@ (80069dc <HAL_TIM_PWM_Start+0x210>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <HAL_TIM_PWM_Start+0x1a8>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1a      	ldr	r2, [pc, #104]	@ (80069c4 <HAL_TIM_PWM_Start+0x1f8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d009      	beq.n	8006974 <HAL_TIM_PWM_Start+0x1a8>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1e      	ldr	r2, [pc, #120]	@ (80069e0 <HAL_TIM_PWM_Start+0x214>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <HAL_TIM_PWM_Start+0x1a8>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a16      	ldr	r2, [pc, #88]	@ (80069c8 <HAL_TIM_PWM_Start+0x1fc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d115      	bne.n	80069a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	4b1a      	ldr	r3, [pc, #104]	@ (80069e4 <HAL_TIM_PWM_Start+0x218>)
 800697c:	4013      	ands	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b06      	cmp	r3, #6
 8006984:	d015      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x1e6>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698c:	d011      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699e:	e008      	b.n	80069b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e000      	b.n	80069b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40010400 	.word	0x40010400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40014400 	.word	0x40014400
 80069d0:	40014800 	.word	0x40014800
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40000800 	.word	0x40000800
 80069dc:	40000c00 	.word	0x40000c00
 80069e0:	40001800 	.word	0x40001800
 80069e4:	00010007 	.word	0x00010007

080069e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0ff      	b.n	8006c06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b14      	cmp	r3, #20
 8006a12:	f200 80f0 	bhi.w	8006bf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a16:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a71 	.word	0x08006a71
 8006a20:	08006bf7 	.word	0x08006bf7
 8006a24:	08006bf7 	.word	0x08006bf7
 8006a28:	08006bf7 	.word	0x08006bf7
 8006a2c:	08006ab1 	.word	0x08006ab1
 8006a30:	08006bf7 	.word	0x08006bf7
 8006a34:	08006bf7 	.word	0x08006bf7
 8006a38:	08006bf7 	.word	0x08006bf7
 8006a3c:	08006af3 	.word	0x08006af3
 8006a40:	08006bf7 	.word	0x08006bf7
 8006a44:	08006bf7 	.word	0x08006bf7
 8006a48:	08006bf7 	.word	0x08006bf7
 8006a4c:	08006b33 	.word	0x08006b33
 8006a50:	08006bf7 	.word	0x08006bf7
 8006a54:	08006bf7 	.word	0x08006bf7
 8006a58:	08006bf7 	.word	0x08006bf7
 8006a5c:	08006b75 	.word	0x08006b75
 8006a60:	08006bf7 	.word	0x08006bf7
 8006a64:	08006bf7 	.word	0x08006bf7
 8006a68:	08006bf7 	.word	0x08006bf7
 8006a6c:	08006bb5 	.word	0x08006bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fa68 	bl	8006f4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0208 	orr.w	r2, r2, #8
 8006a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0204 	bic.w	r2, r2, #4
 8006a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6999      	ldr	r1, [r3, #24]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	619a      	str	r2, [r3, #24]
      break;
 8006aae:	e0a5      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fad8 	bl	800706c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6999      	ldr	r1, [r3, #24]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	021a      	lsls	r2, r3, #8
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	619a      	str	r2, [r3, #24]
      break;
 8006af0:	e084      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fb41 	bl	8007180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0208 	orr.w	r2, r2, #8
 8006b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0204 	bic.w	r2, r2, #4
 8006b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69d9      	ldr	r1, [r3, #28]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	61da      	str	r2, [r3, #28]
      break;
 8006b30:	e064      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fba9 	bl	8007290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69da      	ldr	r2, [r3, #28]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69d9      	ldr	r1, [r3, #28]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	021a      	lsls	r2, r3, #8
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	61da      	str	r2, [r3, #28]
      break;
 8006b72:	e043      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fbf2 	bl	8007364 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0208 	orr.w	r2, r2, #8
 8006b8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0204 	bic.w	r2, r2, #4
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006bb2:	e023      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fc36 	bl	800742c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	021a      	lsls	r2, r3, #8
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006bf4:	e002      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop

08006c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e0dc      	b.n	8006de6 <HAL_TIM_ConfigClockSource+0x1d6>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	4b6a      	ldr	r3, [pc, #424]	@ (8006df0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a64      	ldr	r2, [pc, #400]	@ (8006df4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f000 80a9 	beq.w	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006c68:	4a62      	ldr	r2, [pc, #392]	@ (8006df4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f200 80ae 	bhi.w	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006c70:	4a61      	ldr	r2, [pc, #388]	@ (8006df8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	f000 80a1 	beq.w	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006c78:	4a5f      	ldr	r2, [pc, #380]	@ (8006df8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	f200 80a6 	bhi.w	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006c80:	4a5e      	ldr	r2, [pc, #376]	@ (8006dfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	f000 8099 	beq.w	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006c88:	4a5c      	ldr	r2, [pc, #368]	@ (8006dfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	f200 809e 	bhi.w	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006c90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c94:	f000 8091 	beq.w	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006c98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c9c:	f200 8096 	bhi.w	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca4:	f000 8089 	beq.w	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006ca8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cac:	f200 808e 	bhi.w	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb4:	d03e      	beq.n	8006d34 <HAL_TIM_ConfigClockSource+0x124>
 8006cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cba:	f200 8087 	bhi.w	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	f000 8086 	beq.w	8006dd2 <HAL_TIM_ConfigClockSource+0x1c2>
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cca:	d87f      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006ccc:	2b70      	cmp	r3, #112	@ 0x70
 8006cce:	d01a      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0xf6>
 8006cd0:	2b70      	cmp	r3, #112	@ 0x70
 8006cd2:	d87b      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006cd4:	2b60      	cmp	r3, #96	@ 0x60
 8006cd6:	d050      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x16a>
 8006cd8:	2b60      	cmp	r3, #96	@ 0x60
 8006cda:	d877      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006cdc:	2b50      	cmp	r3, #80	@ 0x50
 8006cde:	d03c      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x14a>
 8006ce0:	2b50      	cmp	r3, #80	@ 0x50
 8006ce2:	d873      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006ce4:	2b40      	cmp	r3, #64	@ 0x40
 8006ce6:	d058      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x18a>
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d86f      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006cec:	2b30      	cmp	r3, #48	@ 0x30
 8006cee:	d064      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006cf0:	2b30      	cmp	r3, #48	@ 0x30
 8006cf2:	d86b      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d060      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d867      	bhi.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05c      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d05a      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x1aa>
 8006d04:	e062      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d16:	f000 fc6d 	bl	80075f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	609a      	str	r2, [r3, #8]
      break;
 8006d32:	e04f      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d44:	f000 fc56 	bl	80075f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d56:	609a      	str	r2, [r3, #8]
      break;
 8006d58:	e03c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d66:	461a      	mov	r2, r3
 8006d68:	f000 fbc6 	bl	80074f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2150      	movs	r1, #80	@ 0x50
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fc20 	bl	80075b8 <TIM_ITRx_SetConfig>
      break;
 8006d78:	e02c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d86:	461a      	mov	r2, r3
 8006d88:	f000 fbe5 	bl	8007556 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2160      	movs	r1, #96	@ 0x60
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fc10 	bl	80075b8 <TIM_ITRx_SetConfig>
      break;
 8006d98:	e01c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da6:	461a      	mov	r2, r3
 8006da8:	f000 fba6 	bl	80074f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2140      	movs	r1, #64	@ 0x40
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fc00 	bl	80075b8 <TIM_ITRx_SetConfig>
      break;
 8006db8:	e00c      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f000 fbf7 	bl	80075b8 <TIM_ITRx_SetConfig>
      break;
 8006dca:	e003      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd0:	e000      	b.n	8006dd4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	ffceff88 	.word	0xffceff88
 8006df4:	00100040 	.word	0x00100040
 8006df8:	00100030 	.word	0x00100030
 8006dfc:	00100020 	.word	0x00100020

08006e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a46      	ldr	r2, [pc, #280]	@ (8006f2c <TIM_Base_SetConfig+0x12c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1e:	d00f      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a43      	ldr	r2, [pc, #268]	@ (8006f30 <TIM_Base_SetConfig+0x130>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a42      	ldr	r2, [pc, #264]	@ (8006f34 <TIM_Base_SetConfig+0x134>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a41      	ldr	r2, [pc, #260]	@ (8006f38 <TIM_Base_SetConfig+0x138>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a40      	ldr	r2, [pc, #256]	@ (8006f3c <TIM_Base_SetConfig+0x13c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d108      	bne.n	8006e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a35      	ldr	r2, [pc, #212]	@ (8006f2c <TIM_Base_SetConfig+0x12c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01f      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e60:	d01b      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a32      	ldr	r2, [pc, #200]	@ (8006f30 <TIM_Base_SetConfig+0x130>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d017      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a31      	ldr	r2, [pc, #196]	@ (8006f34 <TIM_Base_SetConfig+0x134>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a30      	ldr	r2, [pc, #192]	@ (8006f38 <TIM_Base_SetConfig+0x138>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00f      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006f3c <TIM_Base_SetConfig+0x13c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00b      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2e      	ldr	r2, [pc, #184]	@ (8006f40 <TIM_Base_SetConfig+0x140>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d007      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006f44 <TIM_Base_SetConfig+0x144>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d003      	beq.n	8006e9a <TIM_Base_SetConfig+0x9a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2c      	ldr	r2, [pc, #176]	@ (8006f48 <TIM_Base_SetConfig+0x148>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d108      	bne.n	8006eac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a16      	ldr	r2, [pc, #88]	@ (8006f2c <TIM_Base_SetConfig+0x12c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00f      	beq.n	8006ef8 <TIM_Base_SetConfig+0xf8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a18      	ldr	r2, [pc, #96]	@ (8006f3c <TIM_Base_SetConfig+0x13c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <TIM_Base_SetConfig+0xf8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a17      	ldr	r2, [pc, #92]	@ (8006f40 <TIM_Base_SetConfig+0x140>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d007      	beq.n	8006ef8 <TIM_Base_SetConfig+0xf8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a16      	ldr	r2, [pc, #88]	@ (8006f44 <TIM_Base_SetConfig+0x144>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d003      	beq.n	8006ef8 <TIM_Base_SetConfig+0xf8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	@ (8006f48 <TIM_Base_SetConfig+0x148>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d103      	bne.n	8006f00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d105      	bne.n	8006f1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	611a      	str	r2, [r3, #16]
  }
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40000c00 	.word	0x40000c00
 8006f3c:	40010400 	.word	0x40010400
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800

08006f4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f023 0201 	bic.w	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4b37      	ldr	r3, [pc, #220]	@ (8007054 <TIM_OC1_SetConfig+0x108>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f023 0302 	bic.w	r3, r3, #2
 8006f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8007058 <TIM_OC1_SetConfig+0x10c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00f      	beq.n	8006fc8 <TIM_OC1_SetConfig+0x7c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a2c      	ldr	r2, [pc, #176]	@ (800705c <TIM_OC1_SetConfig+0x110>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00b      	beq.n	8006fc8 <TIM_OC1_SetConfig+0x7c>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8007060 <TIM_OC1_SetConfig+0x114>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d007      	beq.n	8006fc8 <TIM_OC1_SetConfig+0x7c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a2a      	ldr	r2, [pc, #168]	@ (8007064 <TIM_OC1_SetConfig+0x118>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <TIM_OC1_SetConfig+0x7c>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a29      	ldr	r2, [pc, #164]	@ (8007068 <TIM_OC1_SetConfig+0x11c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d10c      	bne.n	8006fe2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f023 0308 	bic.w	r3, r3, #8
 8006fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f023 0304 	bic.w	r3, r3, #4
 8006fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8007058 <TIM_OC1_SetConfig+0x10c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00f      	beq.n	800700a <TIM_OC1_SetConfig+0xbe>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1b      	ldr	r2, [pc, #108]	@ (800705c <TIM_OC1_SetConfig+0x110>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00b      	beq.n	800700a <TIM_OC1_SetConfig+0xbe>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1a      	ldr	r2, [pc, #104]	@ (8007060 <TIM_OC1_SetConfig+0x114>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_OC1_SetConfig+0xbe>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a19      	ldr	r2, [pc, #100]	@ (8007064 <TIM_OC1_SetConfig+0x118>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_OC1_SetConfig+0xbe>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a18      	ldr	r2, [pc, #96]	@ (8007068 <TIM_OC1_SetConfig+0x11c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d111      	bne.n	800702e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4313      	orrs	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	621a      	str	r2, [r3, #32]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	fffeff8f 	.word	0xfffeff8f
 8007058:	40010000 	.word	0x40010000
 800705c:	40010400 	.word	0x40010400
 8007060:	40014000 	.word	0x40014000
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800

0800706c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	f023 0210 	bic.w	r2, r3, #16
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4b34      	ldr	r3, [pc, #208]	@ (8007168 <TIM_OC2_SetConfig+0xfc>)
 8007098:	4013      	ands	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f023 0320 	bic.w	r3, r3, #32
 80070b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a29      	ldr	r2, [pc, #164]	@ (800716c <TIM_OC2_SetConfig+0x100>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_OC2_SetConfig+0x68>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a28      	ldr	r2, [pc, #160]	@ (8007170 <TIM_OC2_SetConfig+0x104>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d10d      	bne.n	80070f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a1e      	ldr	r2, [pc, #120]	@ (800716c <TIM_OC2_SetConfig+0x100>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00f      	beq.n	8007118 <TIM_OC2_SetConfig+0xac>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007170 <TIM_OC2_SetConfig+0x104>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00b      	beq.n	8007118 <TIM_OC2_SetConfig+0xac>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a1c      	ldr	r2, [pc, #112]	@ (8007174 <TIM_OC2_SetConfig+0x108>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d007      	beq.n	8007118 <TIM_OC2_SetConfig+0xac>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a1b      	ldr	r2, [pc, #108]	@ (8007178 <TIM_OC2_SetConfig+0x10c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_OC2_SetConfig+0xac>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a1a      	ldr	r2, [pc, #104]	@ (800717c <TIM_OC2_SetConfig+0x110>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d113      	bne.n	8007140 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800711e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	feff8fff 	.word	0xfeff8fff
 800716c:	40010000 	.word	0x40010000
 8007170:	40010400 	.word	0x40010400
 8007174:	40014000 	.word	0x40014000
 8007178:	40014400 	.word	0x40014400
 800717c:	40014800 	.word	0x40014800

08007180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4b33      	ldr	r3, [pc, #204]	@ (8007278 <TIM_OC3_SetConfig+0xf8>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a28      	ldr	r2, [pc, #160]	@ (800727c <TIM_OC3_SetConfig+0xfc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d003      	beq.n	80071e6 <TIM_OC3_SetConfig+0x66>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a27      	ldr	r2, [pc, #156]	@ (8007280 <TIM_OC3_SetConfig+0x100>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d10d      	bne.n	8007202 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a1d      	ldr	r2, [pc, #116]	@ (800727c <TIM_OC3_SetConfig+0xfc>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00f      	beq.n	800722a <TIM_OC3_SetConfig+0xaa>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a1c      	ldr	r2, [pc, #112]	@ (8007280 <TIM_OC3_SetConfig+0x100>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00b      	beq.n	800722a <TIM_OC3_SetConfig+0xaa>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a1b      	ldr	r2, [pc, #108]	@ (8007284 <TIM_OC3_SetConfig+0x104>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d007      	beq.n	800722a <TIM_OC3_SetConfig+0xaa>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a1a      	ldr	r2, [pc, #104]	@ (8007288 <TIM_OC3_SetConfig+0x108>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d003      	beq.n	800722a <TIM_OC3_SetConfig+0xaa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a19      	ldr	r2, [pc, #100]	@ (800728c <TIM_OC3_SetConfig+0x10c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d113      	bne.n	8007252 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	621a      	str	r2, [r3, #32]
}
 800726c:	bf00      	nop
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	fffeff8f 	.word	0xfffeff8f
 800727c:	40010000 	.word	0x40010000
 8007280:	40010400 	.word	0x40010400
 8007284:	40014000 	.word	0x40014000
 8007288:	40014400 	.word	0x40014400
 800728c:	40014800 	.word	0x40014800

08007290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	4b24      	ldr	r3, [pc, #144]	@ (800734c <TIM_OC4_SetConfig+0xbc>)
 80072bc:	4013      	ands	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	031b      	lsls	r3, r3, #12
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a19      	ldr	r2, [pc, #100]	@ (8007350 <TIM_OC4_SetConfig+0xc0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00f      	beq.n	8007310 <TIM_OC4_SetConfig+0x80>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a18      	ldr	r2, [pc, #96]	@ (8007354 <TIM_OC4_SetConfig+0xc4>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00b      	beq.n	8007310 <TIM_OC4_SetConfig+0x80>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a17      	ldr	r2, [pc, #92]	@ (8007358 <TIM_OC4_SetConfig+0xc8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d007      	beq.n	8007310 <TIM_OC4_SetConfig+0x80>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a16      	ldr	r2, [pc, #88]	@ (800735c <TIM_OC4_SetConfig+0xcc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d003      	beq.n	8007310 <TIM_OC4_SetConfig+0x80>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a15      	ldr	r2, [pc, #84]	@ (8007360 <TIM_OC4_SetConfig+0xd0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d109      	bne.n	8007324 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	019b      	lsls	r3, r3, #6
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	feff8fff 	.word	0xfeff8fff
 8007350:	40010000 	.word	0x40010000
 8007354:	40010400 	.word	0x40010400
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400
 8007360:	40014800 	.word	0x40014800

08007364 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4b21      	ldr	r3, [pc, #132]	@ (8007414 <TIM_OC5_SetConfig+0xb0>)
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80073a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a18      	ldr	r2, [pc, #96]	@ (8007418 <TIM_OC5_SetConfig+0xb4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00f      	beq.n	80073da <TIM_OC5_SetConfig+0x76>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a17      	ldr	r2, [pc, #92]	@ (800741c <TIM_OC5_SetConfig+0xb8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00b      	beq.n	80073da <TIM_OC5_SetConfig+0x76>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a16      	ldr	r2, [pc, #88]	@ (8007420 <TIM_OC5_SetConfig+0xbc>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d007      	beq.n	80073da <TIM_OC5_SetConfig+0x76>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a15      	ldr	r2, [pc, #84]	@ (8007424 <TIM_OC5_SetConfig+0xc0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d003      	beq.n	80073da <TIM_OC5_SetConfig+0x76>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a14      	ldr	r2, [pc, #80]	@ (8007428 <TIM_OC5_SetConfig+0xc4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d109      	bne.n	80073ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	621a      	str	r2, [r3, #32]
}
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	fffeff8f 	.word	0xfffeff8f
 8007418:	40010000 	.word	0x40010000
 800741c:	40010400 	.word	0x40010400
 8007420:	40014000 	.word	0x40014000
 8007424:	40014400 	.word	0x40014400
 8007428:	40014800 	.word	0x40014800

0800742c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4b22      	ldr	r3, [pc, #136]	@ (80074e0 <TIM_OC6_SetConfig+0xb4>)
 8007458:	4013      	ands	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800746e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	051b      	lsls	r3, r3, #20
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a19      	ldr	r2, [pc, #100]	@ (80074e4 <TIM_OC6_SetConfig+0xb8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00f      	beq.n	80074a4 <TIM_OC6_SetConfig+0x78>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a18      	ldr	r2, [pc, #96]	@ (80074e8 <TIM_OC6_SetConfig+0xbc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00b      	beq.n	80074a4 <TIM_OC6_SetConfig+0x78>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a17      	ldr	r2, [pc, #92]	@ (80074ec <TIM_OC6_SetConfig+0xc0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d007      	beq.n	80074a4 <TIM_OC6_SetConfig+0x78>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a16      	ldr	r2, [pc, #88]	@ (80074f0 <TIM_OC6_SetConfig+0xc4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <TIM_OC6_SetConfig+0x78>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a15      	ldr	r2, [pc, #84]	@ (80074f4 <TIM_OC6_SetConfig+0xc8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d109      	bne.n	80074b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	029b      	lsls	r3, r3, #10
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	621a      	str	r2, [r3, #32]
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	feff8fff 	.word	0xfeff8fff
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40010400 	.word	0x40010400
 80074ec:	40014000 	.word	0x40014000
 80074f0:	40014400 	.word	0x40014400
 80074f4:	40014800 	.word	0x40014800

080074f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f023 0201 	bic.w	r2, r3, #1
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4313      	orrs	r3, r2
 800752c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f023 030a 	bic.w	r3, r3, #10
 8007534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007556:	b480      	push	{r7}
 8007558:	b087      	sub	sp, #28
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	f023 0210 	bic.w	r2, r3, #16
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	031b      	lsls	r3, r3, #12
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	621a      	str	r2, [r3, #32]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
	...

080075b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <TIM_ITRx_SetConfig+0x38>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f043 0307 	orr.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	609a      	str	r2, [r3, #8]
}
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	ffcfff8f 	.word	0xffcfff8f

080075f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800760e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	021a      	lsls	r2, r3, #8
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	431a      	orrs	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4313      	orrs	r3, r2
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	609a      	str	r2, [r3, #8]
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	2201      	movs	r2, #1
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a1a      	ldr	r2, [r3, #32]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	43db      	mvns	r3, r3
 8007656:	401a      	ands	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1a      	ldr	r2, [r3, #32]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	fa01 f303 	lsl.w	r3, r1, r3
 800766c:	431a      	orrs	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007694:	2302      	movs	r3, #2
 8007696:	e06d      	b.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a30      	ldr	r2, [pc, #192]	@ (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d108      	bne.n	80076de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80076d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a20      	ldr	r2, [pc, #128]	@ (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d022      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770a:	d01d      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1d      	ldr	r2, [pc, #116]	@ (8007788 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d018      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1c      	ldr	r2, [pc, #112]	@ (800778c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d013      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1a      	ldr	r2, [pc, #104]	@ (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00e      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d009      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a16      	ldr	r2, [pc, #88]	@ (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d004      	beq.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a15      	ldr	r2, [pc, #84]	@ (8007798 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d10c      	bne.n	8007762 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800774e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	4313      	orrs	r3, r2
 8007758:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	40010000 	.word	0x40010000
 8007784:	40010400 	.word	0x40010400
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40001800 	.word	0x40001800
 8007798:	40014000 	.word	0x40014000

0800779c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e042      	b.n	8007834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d106      	bne.n	80077c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7f9 fea5 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2224      	movs	r2, #36	@ 0x24
 80077ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fd90 	bl	800830c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f825 	bl	800783c <UART_SetConfig>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e01b      	b.n	8007834 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800780a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800781a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fe0f 	bl	8008450 <UART_CheckIdleState>
 8007832:	4603      	mov	r3, r0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800783c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007840:	b092      	sub	sp, #72	@ 0x48
 8007842:	af00      	add	r7, sp, #0
 8007844:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	431a      	orrs	r2, r3
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	431a      	orrs	r2, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	4313      	orrs	r3, r2
 8007862:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	4bbe      	ldr	r3, [pc, #760]	@ (8007b64 <UART_SetConfig+0x328>)
 800786c:	4013      	ands	r3, r2
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007874:	430b      	orrs	r3, r1
 8007876:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4ab3      	ldr	r2, [pc, #716]	@ (8007b68 <UART_SetConfig+0x32c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d004      	beq.n	80078a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078a4:	4313      	orrs	r3, r2
 80078a6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	4baf      	ldr	r3, [pc, #700]	@ (8007b6c <UART_SetConfig+0x330>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078b8:	430b      	orrs	r3, r1
 80078ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	f023 010f 	bic.w	r1, r3, #15
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4aa6      	ldr	r2, [pc, #664]	@ (8007b70 <UART_SetConfig+0x334>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d177      	bne.n	80079cc <UART_SetConfig+0x190>
 80078dc:	4ba5      	ldr	r3, [pc, #660]	@ (8007b74 <UART_SetConfig+0x338>)
 80078de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078e4:	2b28      	cmp	r3, #40	@ 0x28
 80078e6:	d86d      	bhi.n	80079c4 <UART_SetConfig+0x188>
 80078e8:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <UART_SetConfig+0xb4>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007995 	.word	0x08007995
 80078f4:	080079c5 	.word	0x080079c5
 80078f8:	080079c5 	.word	0x080079c5
 80078fc:	080079c5 	.word	0x080079c5
 8007900:	080079c5 	.word	0x080079c5
 8007904:	080079c5 	.word	0x080079c5
 8007908:	080079c5 	.word	0x080079c5
 800790c:	080079c5 	.word	0x080079c5
 8007910:	0800799d 	.word	0x0800799d
 8007914:	080079c5 	.word	0x080079c5
 8007918:	080079c5 	.word	0x080079c5
 800791c:	080079c5 	.word	0x080079c5
 8007920:	080079c5 	.word	0x080079c5
 8007924:	080079c5 	.word	0x080079c5
 8007928:	080079c5 	.word	0x080079c5
 800792c:	080079c5 	.word	0x080079c5
 8007930:	080079a5 	.word	0x080079a5
 8007934:	080079c5 	.word	0x080079c5
 8007938:	080079c5 	.word	0x080079c5
 800793c:	080079c5 	.word	0x080079c5
 8007940:	080079c5 	.word	0x080079c5
 8007944:	080079c5 	.word	0x080079c5
 8007948:	080079c5 	.word	0x080079c5
 800794c:	080079c5 	.word	0x080079c5
 8007950:	080079ad 	.word	0x080079ad
 8007954:	080079c5 	.word	0x080079c5
 8007958:	080079c5 	.word	0x080079c5
 800795c:	080079c5 	.word	0x080079c5
 8007960:	080079c5 	.word	0x080079c5
 8007964:	080079c5 	.word	0x080079c5
 8007968:	080079c5 	.word	0x080079c5
 800796c:	080079c5 	.word	0x080079c5
 8007970:	080079b5 	.word	0x080079b5
 8007974:	080079c5 	.word	0x080079c5
 8007978:	080079c5 	.word	0x080079c5
 800797c:	080079c5 	.word	0x080079c5
 8007980:	080079c5 	.word	0x080079c5
 8007984:	080079c5 	.word	0x080079c5
 8007988:	080079c5 	.word	0x080079c5
 800798c:	080079c5 	.word	0x080079c5
 8007990:	080079bd 	.word	0x080079bd
 8007994:	2301      	movs	r3, #1
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e222      	b.n	8007de2 <UART_SetConfig+0x5a6>
 800799c:	2304      	movs	r3, #4
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e21e      	b.n	8007de2 <UART_SetConfig+0x5a6>
 80079a4:	2308      	movs	r3, #8
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e21a      	b.n	8007de2 <UART_SetConfig+0x5a6>
 80079ac:	2310      	movs	r3, #16
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e216      	b.n	8007de2 <UART_SetConfig+0x5a6>
 80079b4:	2320      	movs	r3, #32
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e212      	b.n	8007de2 <UART_SetConfig+0x5a6>
 80079bc:	2340      	movs	r3, #64	@ 0x40
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e20e      	b.n	8007de2 <UART_SetConfig+0x5a6>
 80079c4:	2380      	movs	r3, #128	@ 0x80
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e20a      	b.n	8007de2 <UART_SetConfig+0x5a6>
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a69      	ldr	r2, [pc, #420]	@ (8007b78 <UART_SetConfig+0x33c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d130      	bne.n	8007a38 <UART_SetConfig+0x1fc>
 80079d6:	4b67      	ldr	r3, [pc, #412]	@ (8007b74 <UART_SetConfig+0x338>)
 80079d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	2b05      	cmp	r3, #5
 80079e0:	d826      	bhi.n	8007a30 <UART_SetConfig+0x1f4>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <UART_SetConfig+0x1ac>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a01 	.word	0x08007a01
 80079ec:	08007a09 	.word	0x08007a09
 80079f0:	08007a11 	.word	0x08007a11
 80079f4:	08007a19 	.word	0x08007a19
 80079f8:	08007a21 	.word	0x08007a21
 80079fc:	08007a29 	.word	0x08007a29
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e1ec      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e1e8      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e1e4      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e1e0      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a20:	2320      	movs	r3, #32
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a26:	e1dc      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a28:	2340      	movs	r3, #64	@ 0x40
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e1d8      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a30:	2380      	movs	r3, #128	@ 0x80
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e1d4      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a4f      	ldr	r2, [pc, #316]	@ (8007b7c <UART_SetConfig+0x340>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d130      	bne.n	8007aa4 <UART_SetConfig+0x268>
 8007a42:	4b4c      	ldr	r3, [pc, #304]	@ (8007b74 <UART_SetConfig+0x338>)
 8007a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	d826      	bhi.n	8007a9c <UART_SetConfig+0x260>
 8007a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <UART_SetConfig+0x218>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007a6d 	.word	0x08007a6d
 8007a58:	08007a75 	.word	0x08007a75
 8007a5c:	08007a7d 	.word	0x08007a7d
 8007a60:	08007a85 	.word	0x08007a85
 8007a64:	08007a8d 	.word	0x08007a8d
 8007a68:	08007a95 	.word	0x08007a95
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e1b6      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a74:	2304      	movs	r3, #4
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e1b2      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a7c:	2308      	movs	r3, #8
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e1ae      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a84:	2310      	movs	r3, #16
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e1aa      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a8c:	2320      	movs	r3, #32
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e1a6      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a94:	2340      	movs	r3, #64	@ 0x40
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e1a2      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007a9c:	2380      	movs	r3, #128	@ 0x80
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e19e      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a35      	ldr	r2, [pc, #212]	@ (8007b80 <UART_SetConfig+0x344>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d130      	bne.n	8007b10 <UART_SetConfig+0x2d4>
 8007aae:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <UART_SetConfig+0x338>)
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	2b05      	cmp	r3, #5
 8007ab8:	d826      	bhi.n	8007b08 <UART_SetConfig+0x2cc>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <UART_SetConfig+0x284>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad9 	.word	0x08007ad9
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007af1 	.word	0x08007af1
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007b01 	.word	0x08007b01
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e180      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e17c      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e178      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e174      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007af8:	2320      	movs	r3, #32
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e170      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b00:	2340      	movs	r3, #64	@ 0x40
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e16c      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b08:	2380      	movs	r3, #128	@ 0x80
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e168      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1b      	ldr	r2, [pc, #108]	@ (8007b84 <UART_SetConfig+0x348>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d142      	bne.n	8007ba0 <UART_SetConfig+0x364>
 8007b1a:	4b16      	ldr	r3, [pc, #88]	@ (8007b74 <UART_SetConfig+0x338>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	d838      	bhi.n	8007b98 <UART_SetConfig+0x35c>
 8007b26:	a201      	add	r2, pc, #4	@ (adr r2, 8007b2c <UART_SetConfig+0x2f0>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b45 	.word	0x08007b45
 8007b30:	08007b4d 	.word	0x08007b4d
 8007b34:	08007b55 	.word	0x08007b55
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b89 	.word	0x08007b89
 8007b40:	08007b91 	.word	0x08007b91
 8007b44:	2300      	movs	r3, #0
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e14a      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e146      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b54:	2308      	movs	r3, #8
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e142      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b5c:	2310      	movs	r3, #16
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e13e      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b64:	cfff69f3 	.word	0xcfff69f3
 8007b68:	58000c00 	.word	0x58000c00
 8007b6c:	11fff4ff 	.word	0x11fff4ff
 8007b70:	40011000 	.word	0x40011000
 8007b74:	58024400 	.word	0x58024400
 8007b78:	40004400 	.word	0x40004400
 8007b7c:	40004800 	.word	0x40004800
 8007b80:	40004c00 	.word	0x40004c00
 8007b84:	40005000 	.word	0x40005000
 8007b88:	2320      	movs	r3, #32
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e128      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b90:	2340      	movs	r3, #64	@ 0x40
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e124      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007b98:	2380      	movs	r3, #128	@ 0x80
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e120      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4acb      	ldr	r2, [pc, #812]	@ (8007ed4 <UART_SetConfig+0x698>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d176      	bne.n	8007c98 <UART_SetConfig+0x45c>
 8007baa:	4bcb      	ldr	r3, [pc, #812]	@ (8007ed8 <UART_SetConfig+0x69c>)
 8007bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bb2:	2b28      	cmp	r3, #40	@ 0x28
 8007bb4:	d86c      	bhi.n	8007c90 <UART_SetConfig+0x454>
 8007bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bbc <UART_SetConfig+0x380>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007c61 	.word	0x08007c61
 8007bc0:	08007c91 	.word	0x08007c91
 8007bc4:	08007c91 	.word	0x08007c91
 8007bc8:	08007c91 	.word	0x08007c91
 8007bcc:	08007c91 	.word	0x08007c91
 8007bd0:	08007c91 	.word	0x08007c91
 8007bd4:	08007c91 	.word	0x08007c91
 8007bd8:	08007c91 	.word	0x08007c91
 8007bdc:	08007c69 	.word	0x08007c69
 8007be0:	08007c91 	.word	0x08007c91
 8007be4:	08007c91 	.word	0x08007c91
 8007be8:	08007c91 	.word	0x08007c91
 8007bec:	08007c91 	.word	0x08007c91
 8007bf0:	08007c91 	.word	0x08007c91
 8007bf4:	08007c91 	.word	0x08007c91
 8007bf8:	08007c91 	.word	0x08007c91
 8007bfc:	08007c71 	.word	0x08007c71
 8007c00:	08007c91 	.word	0x08007c91
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007c91 	.word	0x08007c91
 8007c0c:	08007c91 	.word	0x08007c91
 8007c10:	08007c91 	.word	0x08007c91
 8007c14:	08007c91 	.word	0x08007c91
 8007c18:	08007c91 	.word	0x08007c91
 8007c1c:	08007c79 	.word	0x08007c79
 8007c20:	08007c91 	.word	0x08007c91
 8007c24:	08007c91 	.word	0x08007c91
 8007c28:	08007c91 	.word	0x08007c91
 8007c2c:	08007c91 	.word	0x08007c91
 8007c30:	08007c91 	.word	0x08007c91
 8007c34:	08007c91 	.word	0x08007c91
 8007c38:	08007c91 	.word	0x08007c91
 8007c3c:	08007c81 	.word	0x08007c81
 8007c40:	08007c91 	.word	0x08007c91
 8007c44:	08007c91 	.word	0x08007c91
 8007c48:	08007c91 	.word	0x08007c91
 8007c4c:	08007c91 	.word	0x08007c91
 8007c50:	08007c91 	.word	0x08007c91
 8007c54:	08007c91 	.word	0x08007c91
 8007c58:	08007c91 	.word	0x08007c91
 8007c5c:	08007c89 	.word	0x08007c89
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e0bc      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007c68:	2304      	movs	r3, #4
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e0b8      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007c70:	2308      	movs	r3, #8
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e0b4      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007c78:	2310      	movs	r3, #16
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e0b0      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007c80:	2320      	movs	r3, #32
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e0ac      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007c88:	2340      	movs	r3, #64	@ 0x40
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e0a8      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007c90:	2380      	movs	r3, #128	@ 0x80
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e0a4      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a8f      	ldr	r2, [pc, #572]	@ (8007edc <UART_SetConfig+0x6a0>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d130      	bne.n	8007d04 <UART_SetConfig+0x4c8>
 8007ca2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ed8 <UART_SetConfig+0x69c>)
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	2b05      	cmp	r3, #5
 8007cac:	d826      	bhi.n	8007cfc <UART_SetConfig+0x4c0>
 8007cae:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <UART_SetConfig+0x478>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007ccd 	.word	0x08007ccd
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	08007cdd 	.word	0x08007cdd
 8007cc0:	08007ce5 	.word	0x08007ce5
 8007cc4:	08007ced 	.word	0x08007ced
 8007cc8:	08007cf5 	.word	0x08007cf5
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e086      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e082      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007cdc:	2308      	movs	r3, #8
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e07e      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e07a      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007cec:	2320      	movs	r3, #32
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e076      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007cf4:	2340      	movs	r3, #64	@ 0x40
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e072      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007cfc:	2380      	movs	r3, #128	@ 0x80
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e06e      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a75      	ldr	r2, [pc, #468]	@ (8007ee0 <UART_SetConfig+0x6a4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d130      	bne.n	8007d70 <UART_SetConfig+0x534>
 8007d0e:	4b72      	ldr	r3, [pc, #456]	@ (8007ed8 <UART_SetConfig+0x69c>)
 8007d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	d826      	bhi.n	8007d68 <UART_SetConfig+0x52c>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <UART_SetConfig+0x4e4>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d39 	.word	0x08007d39
 8007d24:	08007d41 	.word	0x08007d41
 8007d28:	08007d49 	.word	0x08007d49
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e050      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d40:	2304      	movs	r3, #4
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e04c      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d48:	2308      	movs	r3, #8
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e048      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d50:	2310      	movs	r3, #16
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e044      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d58:	2320      	movs	r3, #32
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e040      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d60:	2340      	movs	r3, #64	@ 0x40
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e03c      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d68:	2380      	movs	r3, #128	@ 0x80
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e038      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a5b      	ldr	r2, [pc, #364]	@ (8007ee4 <UART_SetConfig+0x6a8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d130      	bne.n	8007ddc <UART_SetConfig+0x5a0>
 8007d7a:	4b57      	ldr	r3, [pc, #348]	@ (8007ed8 <UART_SetConfig+0x69c>)
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	2b05      	cmp	r3, #5
 8007d84:	d826      	bhi.n	8007dd4 <UART_SetConfig+0x598>
 8007d86:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <UART_SetConfig+0x550>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007da5 	.word	0x08007da5
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	08007db5 	.word	0x08007db5
 8007d98:	08007dbd 	.word	0x08007dbd
 8007d9c:	08007dc5 	.word	0x08007dc5
 8007da0:	08007dcd 	.word	0x08007dcd
 8007da4:	2302      	movs	r3, #2
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e01a      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007dac:	2304      	movs	r3, #4
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e016      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007db4:	2308      	movs	r3, #8
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e012      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007dbc:	2310      	movs	r3, #16
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e00e      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007dc4:	2320      	movs	r3, #32
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dca:	e00a      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007dcc:	2340      	movs	r3, #64	@ 0x40
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e006      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007dd4:	2380      	movs	r3, #128	@ 0x80
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e002      	b.n	8007de2 <UART_SetConfig+0x5a6>
 8007ddc:	2380      	movs	r3, #128	@ 0x80
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ee4 <UART_SetConfig+0x6a8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	f040 80f8 	bne.w	8007fde <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	dc46      	bgt.n	8007e84 <UART_SetConfig+0x648>
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	f2c0 8082 	blt.w	8007f00 <UART_SetConfig+0x6c4>
 8007dfc:	3b02      	subs	r3, #2
 8007dfe:	2b1e      	cmp	r3, #30
 8007e00:	d87e      	bhi.n	8007f00 <UART_SetConfig+0x6c4>
 8007e02:	a201      	add	r2, pc, #4	@ (adr r2, 8007e08 <UART_SetConfig+0x5cc>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e8b 	.word	0x08007e8b
 8007e0c:	08007f01 	.word	0x08007f01
 8007e10:	08007e93 	.word	0x08007e93
 8007e14:	08007f01 	.word	0x08007f01
 8007e18:	08007f01 	.word	0x08007f01
 8007e1c:	08007f01 	.word	0x08007f01
 8007e20:	08007ea3 	.word	0x08007ea3
 8007e24:	08007f01 	.word	0x08007f01
 8007e28:	08007f01 	.word	0x08007f01
 8007e2c:	08007f01 	.word	0x08007f01
 8007e30:	08007f01 	.word	0x08007f01
 8007e34:	08007f01 	.word	0x08007f01
 8007e38:	08007f01 	.word	0x08007f01
 8007e3c:	08007f01 	.word	0x08007f01
 8007e40:	08007eb3 	.word	0x08007eb3
 8007e44:	08007f01 	.word	0x08007f01
 8007e48:	08007f01 	.word	0x08007f01
 8007e4c:	08007f01 	.word	0x08007f01
 8007e50:	08007f01 	.word	0x08007f01
 8007e54:	08007f01 	.word	0x08007f01
 8007e58:	08007f01 	.word	0x08007f01
 8007e5c:	08007f01 	.word	0x08007f01
 8007e60:	08007f01 	.word	0x08007f01
 8007e64:	08007f01 	.word	0x08007f01
 8007e68:	08007f01 	.word	0x08007f01
 8007e6c:	08007f01 	.word	0x08007f01
 8007e70:	08007f01 	.word	0x08007f01
 8007e74:	08007f01 	.word	0x08007f01
 8007e78:	08007f01 	.word	0x08007f01
 8007e7c:	08007f01 	.word	0x08007f01
 8007e80:	08007ef3 	.word	0x08007ef3
 8007e84:	2b40      	cmp	r3, #64	@ 0x40
 8007e86:	d037      	beq.n	8007ef8 <UART_SetConfig+0x6bc>
 8007e88:	e03a      	b.n	8007f00 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e8a:	f7fd f8a7 	bl	8004fdc <HAL_RCCEx_GetD3PCLK1Freq>
 8007e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e90:	e03c      	b.n	8007f0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fd f8b6 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea0:	e034      	b.n	8007f0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ea2:	f107 0318 	add.w	r3, r7, #24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fd fa02 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb0:	e02c      	b.n	8007f0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb2:	4b09      	ldr	r3, [pc, #36]	@ (8007ed8 <UART_SetConfig+0x69c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ebe:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <UART_SetConfig+0x69c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	08db      	lsrs	r3, r3, #3
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	4a07      	ldr	r2, [pc, #28]	@ (8007ee8 <UART_SetConfig+0x6ac>)
 8007eca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ed0:	e01c      	b.n	8007f0c <UART_SetConfig+0x6d0>
 8007ed2:	bf00      	nop
 8007ed4:	40011400 	.word	0x40011400
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	40007800 	.word	0x40007800
 8007ee0:	40007c00 	.word	0x40007c00
 8007ee4:	58000c00 	.word	0x58000c00
 8007ee8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007eec:	4b9d      	ldr	r3, [pc, #628]	@ (8008164 <UART_SetConfig+0x928>)
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef0:	e00c      	b.n	8007f0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ef2:	4b9d      	ldr	r3, [pc, #628]	@ (8008168 <UART_SetConfig+0x92c>)
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef6:	e009      	b.n	8007f0c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efe:	e005      	b.n	8007f0c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 81de 	beq.w	80082d0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f18:	4a94      	ldr	r2, [pc, #592]	@ (800816c <UART_SetConfig+0x930>)
 8007f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f26:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	4413      	add	r3, r2
 8007f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d305      	bcc.n	8007f44 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d903      	bls.n	8007f4c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f4a:	e1c1      	b.n	80082d0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4e:	2200      	movs	r2, #0
 8007f50:	60bb      	str	r3, [r7, #8]
 8007f52:	60fa      	str	r2, [r7, #12]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	4a84      	ldr	r2, [pc, #528]	@ (800816c <UART_SetConfig+0x930>)
 8007f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	2200      	movs	r2, #0
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f6e:	f7f8 f9b3 	bl	80002d8 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	020b      	lsls	r3, r1, #8
 8007f84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f88:	0202      	lsls	r2, r0, #8
 8007f8a:	6979      	ldr	r1, [r7, #20]
 8007f8c:	6849      	ldr	r1, [r1, #4]
 8007f8e:	0849      	lsrs	r1, r1, #1
 8007f90:	2000      	movs	r0, #0
 8007f92:	460c      	mov	r4, r1
 8007f94:	4605      	mov	r5, r0
 8007f96:	eb12 0804 	adds.w	r8, r2, r4
 8007f9a:	eb43 0905 	adc.w	r9, r3, r5
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	469a      	mov	sl, r3
 8007fa6:	4693      	mov	fp, r2
 8007fa8:	4652      	mov	r2, sl
 8007faa:	465b      	mov	r3, fp
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 f992 	bl	80002d8 <__aeabi_uldivmod>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4613      	mov	r3, r2
 8007fba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fc2:	d308      	bcc.n	8007fd6 <UART_SetConfig+0x79a>
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fca:	d204      	bcs.n	8007fd6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fd2:	60da      	str	r2, [r3, #12]
 8007fd4:	e17c      	b.n	80082d0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fdc:	e178      	b.n	80082d0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fe6:	f040 80c5 	bne.w	8008174 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007fea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	dc48      	bgt.n	8008084 <UART_SetConfig+0x848>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	db7b      	blt.n	80080ee <UART_SetConfig+0x8b2>
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d879      	bhi.n	80080ee <UART_SetConfig+0x8b2>
 8007ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8008000 <UART_SetConfig+0x7c4>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	0800808b 	.word	0x0800808b
 8008004:	08008093 	.word	0x08008093
 8008008:	080080ef 	.word	0x080080ef
 800800c:	080080ef 	.word	0x080080ef
 8008010:	0800809b 	.word	0x0800809b
 8008014:	080080ef 	.word	0x080080ef
 8008018:	080080ef 	.word	0x080080ef
 800801c:	080080ef 	.word	0x080080ef
 8008020:	080080ab 	.word	0x080080ab
 8008024:	080080ef 	.word	0x080080ef
 8008028:	080080ef 	.word	0x080080ef
 800802c:	080080ef 	.word	0x080080ef
 8008030:	080080ef 	.word	0x080080ef
 8008034:	080080ef 	.word	0x080080ef
 8008038:	080080ef 	.word	0x080080ef
 800803c:	080080ef 	.word	0x080080ef
 8008040:	080080bb 	.word	0x080080bb
 8008044:	080080ef 	.word	0x080080ef
 8008048:	080080ef 	.word	0x080080ef
 800804c:	080080ef 	.word	0x080080ef
 8008050:	080080ef 	.word	0x080080ef
 8008054:	080080ef 	.word	0x080080ef
 8008058:	080080ef 	.word	0x080080ef
 800805c:	080080ef 	.word	0x080080ef
 8008060:	080080ef 	.word	0x080080ef
 8008064:	080080ef 	.word	0x080080ef
 8008068:	080080ef 	.word	0x080080ef
 800806c:	080080ef 	.word	0x080080ef
 8008070:	080080ef 	.word	0x080080ef
 8008074:	080080ef 	.word	0x080080ef
 8008078:	080080ef 	.word	0x080080ef
 800807c:	080080ef 	.word	0x080080ef
 8008080:	080080e1 	.word	0x080080e1
 8008084:	2b40      	cmp	r3, #64	@ 0x40
 8008086:	d02e      	beq.n	80080e6 <UART_SetConfig+0x8aa>
 8008088:	e031      	b.n	80080ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800808a:	f7fb fd71 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 800808e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008090:	e033      	b.n	80080fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008092:	f7fb fd83 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 8008096:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008098:	e02f      	b.n	80080fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800809a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fc ffb2 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a8:	e027      	b.n	80080fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080aa:	f107 0318 	add.w	r3, r7, #24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd f8fe 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080b8:	e01f      	b.n	80080fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080ba:	4b2d      	ldr	r3, [pc, #180]	@ (8008170 <UART_SetConfig+0x934>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008170 <UART_SetConfig+0x934>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	08db      	lsrs	r3, r3, #3
 80080cc:	f003 0303 	and.w	r3, r3, #3
 80080d0:	4a24      	ldr	r2, [pc, #144]	@ (8008164 <UART_SetConfig+0x928>)
 80080d2:	fa22 f303 	lsr.w	r3, r2, r3
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080d8:	e00f      	b.n	80080fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80080da:	4b22      	ldr	r3, [pc, #136]	@ (8008164 <UART_SetConfig+0x928>)
 80080dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080de:	e00c      	b.n	80080fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080e0:	4b21      	ldr	r3, [pc, #132]	@ (8008168 <UART_SetConfig+0x92c>)
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e4:	e009      	b.n	80080fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ec:	e005      	b.n	80080fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80080f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80e7 	beq.w	80082d0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008106:	4a19      	ldr	r2, [pc, #100]	@ (800816c <UART_SetConfig+0x930>)
 8008108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800810c:	461a      	mov	r2, r3
 800810e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008110:	fbb3 f3f2 	udiv	r3, r3, r2
 8008114:	005a      	lsls	r2, r3, #1
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	441a      	add	r2, r3
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	fbb2 f3f3 	udiv	r3, r2, r3
 8008126:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812a:	2b0f      	cmp	r3, #15
 800812c:	d916      	bls.n	800815c <UART_SetConfig+0x920>
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008134:	d212      	bcs.n	800815c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008138:	b29b      	uxth	r3, r3
 800813a:	f023 030f 	bic.w	r3, r3, #15
 800813e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	b29b      	uxth	r3, r3
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	b29a      	uxth	r2, r3
 800814c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800814e:	4313      	orrs	r3, r2
 8008150:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	e0b9      	b.n	80082d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008162:	e0b5      	b.n	80082d0 <UART_SetConfig+0xa94>
 8008164:	03d09000 	.word	0x03d09000
 8008168:	003d0900 	.word	0x003d0900
 800816c:	0800927c 	.word	0x0800927c
 8008170:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008174:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008178:	2b20      	cmp	r3, #32
 800817a:	dc49      	bgt.n	8008210 <UART_SetConfig+0x9d4>
 800817c:	2b00      	cmp	r3, #0
 800817e:	db7c      	blt.n	800827a <UART_SetConfig+0xa3e>
 8008180:	2b20      	cmp	r3, #32
 8008182:	d87a      	bhi.n	800827a <UART_SetConfig+0xa3e>
 8008184:	a201      	add	r2, pc, #4	@ (adr r2, 800818c <UART_SetConfig+0x950>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	08008217 	.word	0x08008217
 8008190:	0800821f 	.word	0x0800821f
 8008194:	0800827b 	.word	0x0800827b
 8008198:	0800827b 	.word	0x0800827b
 800819c:	08008227 	.word	0x08008227
 80081a0:	0800827b 	.word	0x0800827b
 80081a4:	0800827b 	.word	0x0800827b
 80081a8:	0800827b 	.word	0x0800827b
 80081ac:	08008237 	.word	0x08008237
 80081b0:	0800827b 	.word	0x0800827b
 80081b4:	0800827b 	.word	0x0800827b
 80081b8:	0800827b 	.word	0x0800827b
 80081bc:	0800827b 	.word	0x0800827b
 80081c0:	0800827b 	.word	0x0800827b
 80081c4:	0800827b 	.word	0x0800827b
 80081c8:	0800827b 	.word	0x0800827b
 80081cc:	08008247 	.word	0x08008247
 80081d0:	0800827b 	.word	0x0800827b
 80081d4:	0800827b 	.word	0x0800827b
 80081d8:	0800827b 	.word	0x0800827b
 80081dc:	0800827b 	.word	0x0800827b
 80081e0:	0800827b 	.word	0x0800827b
 80081e4:	0800827b 	.word	0x0800827b
 80081e8:	0800827b 	.word	0x0800827b
 80081ec:	0800827b 	.word	0x0800827b
 80081f0:	0800827b 	.word	0x0800827b
 80081f4:	0800827b 	.word	0x0800827b
 80081f8:	0800827b 	.word	0x0800827b
 80081fc:	0800827b 	.word	0x0800827b
 8008200:	0800827b 	.word	0x0800827b
 8008204:	0800827b 	.word	0x0800827b
 8008208:	0800827b 	.word	0x0800827b
 800820c:	0800826d 	.word	0x0800826d
 8008210:	2b40      	cmp	r3, #64	@ 0x40
 8008212:	d02e      	beq.n	8008272 <UART_SetConfig+0xa36>
 8008214:	e031      	b.n	800827a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008216:	f7fb fcab 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 800821a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800821c:	e033      	b.n	8008286 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800821e:	f7fb fcbd 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 8008222:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008224:	e02f      	b.n	8008286 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800822a:	4618      	mov	r0, r3
 800822c:	f7fc feec 	bl	8005008 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008234:	e027      	b.n	8008286 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008236:	f107 0318 	add.w	r3, r7, #24
 800823a:	4618      	mov	r0, r3
 800823c:	f7fd f838 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008244:	e01f      	b.n	8008286 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008246:	4b2d      	ldr	r3, [pc, #180]	@ (80082fc <UART_SetConfig+0xac0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008252:	4b2a      	ldr	r3, [pc, #168]	@ (80082fc <UART_SetConfig+0xac0>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	4a28      	ldr	r2, [pc, #160]	@ (8008300 <UART_SetConfig+0xac4>)
 800825e:	fa22 f303 	lsr.w	r3, r2, r3
 8008262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008264:	e00f      	b.n	8008286 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008266:	4b26      	ldr	r3, [pc, #152]	@ (8008300 <UART_SetConfig+0xac4>)
 8008268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826a:	e00c      	b.n	8008286 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800826c:	4b25      	ldr	r3, [pc, #148]	@ (8008304 <UART_SetConfig+0xac8>)
 800826e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008270:	e009      	b.n	8008286 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008278:	e005      	b.n	8008286 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008284:	bf00      	nop
    }

    if (pclk != 0U)
 8008286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d021      	beq.n	80082d0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008290:	4a1d      	ldr	r2, [pc, #116]	@ (8008308 <UART_SetConfig+0xacc>)
 8008292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008296:	461a      	mov	r2, r3
 8008298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829a:	fbb3 f2f2 	udiv	r2, r3, r2
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	085b      	lsrs	r3, r3, #1
 80082a4:	441a      	add	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	d909      	bls.n	80082ca <UART_SetConfig+0xa8e>
 80082b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082bc:	d205      	bcs.n	80082ca <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60da      	str	r2, [r3, #12]
 80082c8:	e002      	b.n	80082d0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2201      	movs	r2, #1
 80082dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	2200      	movs	r2, #0
 80082e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2200      	movs	r2, #0
 80082ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082ec:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3748      	adds	r7, #72	@ 0x48
 80082f4:	46bd      	mov	sp, r7
 80082f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400
 8008300:	03d09000 	.word	0x03d09000
 8008304:	003d0900 	.word	0x003d0900
 8008308:	0800927c 	.word	0x0800927c

0800830c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00a      	beq.n	8008336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00a      	beq.n	800837a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01a      	beq.n	8008422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800840a:	d10a      	bne.n	8008422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
  }
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b098      	sub	sp, #96	@ 0x60
 8008454:	af02      	add	r7, sp, #8
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008460:	f7f9 fa1e 	bl	80018a0 <HAL_GetTick>
 8008464:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0308 	and.w	r3, r3, #8
 8008470:	2b08      	cmp	r3, #8
 8008472:	d12f      	bne.n	80084d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800847c:	2200      	movs	r2, #0
 800847e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f88e 	bl	80085a4 <UART_WaitOnFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d022      	beq.n	80084d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800849c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e6      	bne.n	800848e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e063      	b.n	800859c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d149      	bne.n	8008576 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084ea:	2200      	movs	r2, #0
 80084ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f857 	bl	80085a4 <UART_WaitOnFlagUntilTimeout>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d03c      	beq.n	8008576 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	623b      	str	r3, [r7, #32]
   return(result);
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800851a:	633b      	str	r3, [r7, #48]	@ 0x30
 800851c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e6      	bne.n	80084fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	e853 3f00 	ldrex	r3, [r3]
 800853c:	60fb      	str	r3, [r7, #12]
   return(result);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800854e:	61fa      	str	r2, [r7, #28]
 8008550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	69b9      	ldr	r1, [r7, #24]
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	617b      	str	r3, [r7, #20]
   return(result);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e5      	bne.n	800852e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e012      	b.n	800859c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3758      	adds	r7, #88	@ 0x58
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	4613      	mov	r3, r2
 80085b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b4:	e04f      	b.n	8008656 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085bc:	d04b      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085be:	f7f9 f96f 	bl	80018a0 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d302      	bcc.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e04e      	b.n	8008676 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d037      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b80      	cmp	r3, #128	@ 0x80
 80085ea:	d034      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b40      	cmp	r3, #64	@ 0x40
 80085f0:	d031      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d110      	bne.n	8008622 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2208      	movs	r2, #8
 8008606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f839 	bl	8008680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2208      	movs	r2, #8
 8008612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e029      	b.n	8008676 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800862c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008630:	d111      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800863a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f81f 	bl	8008680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e00f      	b.n	8008676 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4013      	ands	r3, r2
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	bf0c      	ite	eq
 8008666:	2301      	moveq	r3, #1
 8008668:	2300      	movne	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	429a      	cmp	r2, r3
 8008672:	d0a0      	beq.n	80085b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b095      	sub	sp, #84	@ 0x54
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800869c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80086a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e6      	bne.n	8008688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008748 <UART_EndRxTransfer+0xc8>)
 80086ce:	4013      	ands	r3, r2
 80086d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e5      	bne.n	80086ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d118      	bne.n	8008728 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	60bb      	str	r3, [r7, #8]
   return(result);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f023 0310 	bic.w	r3, r3, #16
 800870a:	647b      	str	r3, [r7, #68]	@ 0x44
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	461a      	mov	r2, r3
 8008712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008714:	61bb      	str	r3, [r7, #24]
 8008716:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	6979      	ldr	r1, [r7, #20]
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	613b      	str	r3, [r7, #16]
   return(result);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e6      	bne.n	80086f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800873c:	bf00      	nop
 800873e:	3754      	adds	r7, #84	@ 0x54
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	effffffe 	.word	0xeffffffe

0800874c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_UARTEx_DisableFifoMode+0x16>
 800875e:	2302      	movs	r3, #2
 8008760:	e027      	b.n	80087b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2224      	movs	r2, #36	@ 0x24
 800876e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0201 	bic.w	r2, r2, #1
 8008788:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008790:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e02d      	b.n	8008832 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2224      	movs	r2, #36	@ 0x24
 80087e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0201 	bic.w	r2, r2, #1
 80087fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f850 	bl	80088b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2220      	movs	r2, #32
 8008824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800884e:	2302      	movs	r3, #2
 8008850:	e02d      	b.n	80088ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2224      	movs	r2, #36	@ 0x24
 800885e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0201 	bic.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f812 	bl	80088b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d108      	bne.n	80088da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088d8:	e031      	b.n	800893e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088da:	2310      	movs	r3, #16
 80088dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088de:	2310      	movs	r3, #16
 80088e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	0e5b      	lsrs	r3, r3, #25
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	0f5b      	lsrs	r3, r3, #29
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	7b3a      	ldrb	r2, [r7, #12]
 8008906:	4911      	ldr	r1, [pc, #68]	@ (800894c <UARTEx_SetNbDataToProcess+0x94>)
 8008908:	5c8a      	ldrb	r2, [r1, r2]
 800890a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800890e:	7b3a      	ldrb	r2, [r7, #12]
 8008910:	490f      	ldr	r1, [pc, #60]	@ (8008950 <UARTEx_SetNbDataToProcess+0x98>)
 8008912:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008914:	fb93 f3f2 	sdiv	r3, r3, r2
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	7b7a      	ldrb	r2, [r7, #13]
 8008924:	4909      	ldr	r1, [pc, #36]	@ (800894c <UARTEx_SetNbDataToProcess+0x94>)
 8008926:	5c8a      	ldrb	r2, [r1, r2]
 8008928:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800892c:	7b7a      	ldrb	r2, [r7, #13]
 800892e:	4908      	ldr	r1, [pc, #32]	@ (8008950 <UARTEx_SetNbDataToProcess+0x98>)
 8008930:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008932:	fb93 f3f2 	sdiv	r3, r3, r2
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800893e:	bf00      	nop
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	08009294 	.word	0x08009294
 8008950:	0800929c 	.word	0x0800929c

08008954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008954:	b084      	sub	sp, #16
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	f107 001c 	add.w	r0, r7, #28
 8008962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008966:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800896a:	2b01      	cmp	r3, #1
 800896c:	d121      	bne.n	80089b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008972:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a30 <USB_CoreInit+0xdc>)
 8008980:	4013      	ands	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008992:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008996:	2b01      	cmp	r3, #1
 8008998:	d105      	bne.n	80089a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 faaa 	bl	8008f00 <USB_CoreReset>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]
 80089b0:	e01b      	b.n	80089ea <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa9e 	bl	8008f00 <USB_CoreReset>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d106      	bne.n	80089de <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	639a      	str	r2, [r3, #56]	@ 0x38
 80089dc:	e005      	b.n	80089ea <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089ea:	7fbb      	ldrb	r3, [r7, #30]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d116      	bne.n	8008a1e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <USB_CoreInit+0xe0>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f043 0206 	orr.w	r2, r3, #6
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a2a:	b004      	add	sp, #16
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	ffbdffbf 	.word	0xffbdffbf
 8008a34:	03ee0000 	.word	0x03ee0000

08008a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f023 0201 	bic.w	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d115      	bne.n	8008aa8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a88:	200a      	movs	r0, #10
 8008a8a:	f7f8 ff15 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	330a      	adds	r3, #10
 8008a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fa25 	bl	8008ee4 <USB_GetMode>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d01e      	beq.n	8008ade <USB_SetCurrentMode+0x84>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2bc7      	cmp	r3, #199	@ 0xc7
 8008aa4:	d9f0      	bls.n	8008a88 <USB_SetCurrentMode+0x2e>
 8008aa6:	e01a      	b.n	8008ade <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d115      	bne.n	8008ada <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008aba:	200a      	movs	r0, #10
 8008abc:	f7f8 fefc 	bl	80018b8 <HAL_Delay>
      ms += 10U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	330a      	adds	r3, #10
 8008ac4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa0c 	bl	8008ee4 <USB_GetMode>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <USB_SetCurrentMode+0x84>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ad6:	d9f0      	bls.n	8008aba <USB_SetCurrentMode+0x60>
 8008ad8:	e001      	b.n	8008ade <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e005      	b.n	8008aea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2bc8      	cmp	r3, #200	@ 0xc8
 8008ae2:	d101      	bne.n	8008ae8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e000      	b.n	8008aea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008af4:	b084      	sub	sp, #16
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b086      	sub	sp, #24
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	e009      	b.n	8008b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	3340      	adds	r3, #64	@ 0x40
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3301      	adds	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	2b0e      	cmp	r3, #14
 8008b2c:	d9f2      	bls.n	8008b14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d11c      	bne.n	8008b70 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b44:	f043 0302 	orr.w	r3, r3, #2
 8008b48:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	e005      	b.n	8008b7c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b82:	461a      	mov	r2, r3
 8008b84:	2300      	movs	r3, #0
 8008b86:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b88:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d10d      	bne.n	8008bac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b98:	2100      	movs	r1, #0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f968 	bl	8008e70 <USB_SetDevSpeed>
 8008ba0:	e008      	b.n	8008bb4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f963 	bl	8008e70 <USB_SetDevSpeed>
 8008baa:	e003      	b.n	8008bb4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bac:	2103      	movs	r1, #3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f95e 	bl	8008e70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bb4:	2110      	movs	r1, #16
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f8fa 	bl	8008db0 <USB_FlushTxFifo>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f924 	bl	8008e14 <USB_FlushRxFifo>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bdc:	461a      	mov	r2, r3
 8008bde:	2300      	movs	r3, #0
 8008be0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be8:	461a      	mov	r2, r3
 8008bea:	2300      	movs	r3, #0
 8008bec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	e043      	b.n	8008c88 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c16:	d118      	bne.n	8008c4a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e013      	b.n	8008c5c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c40:	461a      	mov	r2, r3
 8008c42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	e008      	b.n	8008c5c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c56:	461a      	mov	r2, r3
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c68:	461a      	mov	r2, r3
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3301      	adds	r3, #1
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d3b5      	bcc.n	8008c00 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c94:	2300      	movs	r3, #0
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	e043      	b.n	8008d22 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cb0:	d118      	bne.n	8008ce4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	e013      	b.n	8008cf6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	e008      	b.n	8008cf6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d02:	461a      	mov	r2, r3
 8008d04:	2300      	movs	r3, #0
 8008d06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d14:	461a      	mov	r2, r3
 8008d16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d26:	461a      	mov	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d3b5      	bcc.n	8008c9a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d105      	bne.n	8008d64 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	f043 0210 	orr.w	r2, r3, #16
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	699a      	ldr	r2, [r3, #24]
 8008d68:	4b0f      	ldr	r3, [pc, #60]	@ (8008da8 <USB_DevInit+0x2b4>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	f043 0208 	orr.w	r2, r3, #8
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d105      	bne.n	8008d98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699a      	ldr	r2, [r3, #24]
 8008d90:	4b06      	ldr	r3, [pc, #24]	@ (8008dac <USB_DevInit+0x2b8>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008da4:	b004      	add	sp, #16
 8008da6:	4770      	bx	lr
 8008da8:	803c3800 	.word	0x803c3800
 8008dac:	40000004 	.word	0x40000004

08008db0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008dca:	d901      	bls.n	8008dd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e01b      	b.n	8008e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	daf2      	bge.n	8008dbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	019b      	lsls	r3, r3, #6
 8008de0:	f043 0220 	orr.w	r2, r3, #32
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008df4:	d901      	bls.n	8008dfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e006      	b.n	8008e08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b20      	cmp	r3, #32
 8008e04:	d0f0      	beq.n	8008de8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e2c:	d901      	bls.n	8008e32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e018      	b.n	8008e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	daf2      	bge.n	8008e20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2210      	movs	r2, #16
 8008e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e50:	d901      	bls.n	8008e56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e006      	b.n	8008e64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	f003 0310 	and.w	r3, r3, #16
 8008e5e:	2b10      	cmp	r3, #16
 8008e60:	d0f0      	beq.n	8008e44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	68f9      	ldr	r1, [r7, #12]
 8008e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e90:	4313      	orrs	r3, r2
 8008e92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ed0:	f043 0302 	orr.w	r3, r3, #2
 8008ed4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f18:	d901      	bls.n	8008f1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e01b      	b.n	8008f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	daf2      	bge.n	8008f0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f043 0201 	orr.w	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f42:	d901      	bls.n	8008f48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e006      	b.n	8008f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d0f0      	beq.n	8008f36 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
	...

08008f64 <User_SystemInit>:
#include "User_include.h"

void User_SystemInit();

void User_SystemInit()
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
    /* Init User System */
    TM1638_Init();
 8008f68:	f000 f8b4 	bl	80090d4 <TM1638_Init>
    //TM1638_GPIO_TEST();

    /* Init User LCD */
    htim2.Instance->CCR1 = 90;
 8008f6c:	4b04      	ldr	r3, [pc, #16]	@ (8008f80 <User_SystemInit+0x1c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	225a      	movs	r2, #90	@ 0x5a
 8008f72:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8008f74:	2100      	movs	r1, #0
 8008f76:	4802      	ldr	r0, [pc, #8]	@ (8008f80 <User_SystemInit+0x1c>)
 8008f78:	f7fd fc28 	bl	80067cc <HAL_TIM_PWM_Start>
    
 8008f7c:	bf00      	nop
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	24000334 	.word	0x24000334

08008f84 <GetRTC>:
{

}

void GetRTC()
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &g_Time, RTC_FORMAT_BCD);
 8008f88:	2201      	movs	r2, #1
 8008f8a:	4905      	ldr	r1, [pc, #20]	@ (8008fa0 <GetRTC+0x1c>)
 8008f8c:	4805      	ldr	r0, [pc, #20]	@ (8008fa4 <GetRTC+0x20>)
 8008f8e:	f7fc fd67 	bl	8005a60 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &g_Date, RTC_FORMAT_BCD);
 8008f92:	2201      	movs	r2, #1
 8008f94:	4904      	ldr	r1, [pc, #16]	@ (8008fa8 <GetRTC+0x24>)
 8008f96:	4803      	ldr	r0, [pc, #12]	@ (8008fa4 <GetRTC+0x20>)
 8008f98:	f7fc fe46 	bl	8005c28 <HAL_RTC_GetDate>
}
 8008f9c:	bf00      	nop
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	24000900 	.word	0x24000900
 8008fa4:	24000200 	.word	0x24000200
 8008fa8:	240008fc 	.word	0x240008fc

08008fac <DisplayRTC>:

void DisplayRTC()
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
    GetRTC();
 8008fb0:	f7ff ffe8 	bl	8008f84 <GetRTC>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008fba:	481f      	ldr	r0, [pc, #124]	@ (8009038 <DisplayRTC+0x8c>)
 8008fbc:	f7f9 fc7a 	bl	80028b4 <HAL_GPIO_WritePin>
    TM1638_DisplayNumber(0, (g_Time.Hours >> 4) & 0x0F);
 8008fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800903c <DisplayRTC+0x90>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	091b      	lsrs	r3, r3, #4
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	4619      	mov	r1, r3
 8008fca:	2000      	movs	r0, #0
 8008fcc:	f000 f862 	bl	8009094 <TM1638_DisplayNumber>
    TM1638_DisplayNumber(1, g_Time.Hours & 0x0F);
 8008fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800903c <DisplayRTC+0x90>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	4619      	mov	r1, r3
 8008fdc:	2001      	movs	r0, #1
 8008fde:	f000 f859 	bl	8009094 <TM1638_DisplayNumber>
    TM1638_DisplayNumber(2, (g_Time.Minutes >> 4) & 0x0F);
 8008fe2:	4b16      	ldr	r3, [pc, #88]	@ (800903c <DisplayRTC+0x90>)
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	4619      	mov	r1, r3
 8008fec:	2002      	movs	r0, #2
 8008fee:	f000 f851 	bl	8009094 <TM1638_DisplayNumber>
    TM1638_DisplayNumber(3, g_Time.Minutes & 0x0F);
 8008ff2:	4b12      	ldr	r3, [pc, #72]	@ (800903c <DisplayRTC+0x90>)
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	2003      	movs	r0, #3
 8009000:	f000 f848 	bl	8009094 <TM1638_DisplayNumber>
    TM1638_DisplayNumber(4, (g_Time.Seconds >> 4) & 0x0F);
 8009004:	4b0d      	ldr	r3, [pc, #52]	@ (800903c <DisplayRTC+0x90>)
 8009006:	789b      	ldrb	r3, [r3, #2]
 8009008:	091b      	lsrs	r3, r3, #4
 800900a:	b2db      	uxtb	r3, r3
 800900c:	4619      	mov	r1, r3
 800900e:	2004      	movs	r0, #4
 8009010:	f000 f840 	bl	8009094 <TM1638_DisplayNumber>
    TM1638_DisplayNumber(5, g_Time.Seconds & 0x0F);
 8009014:	4b09      	ldr	r3, [pc, #36]	@ (800903c <DisplayRTC+0x90>)
 8009016:	789b      	ldrb	r3, [r3, #2]
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	b2db      	uxtb	r3, r3
 800901e:	4619      	mov	r1, r3
 8009020:	2005      	movs	r0, #5
 8009022:	f000 f837 	bl	8009094 <TM1638_DisplayNumber>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009026:	2201      	movs	r2, #1
 8009028:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800902c:	4802      	ldr	r0, [pc, #8]	@ (8009038 <DisplayRTC+0x8c>)
 800902e:	f7f9 fc41 	bl	80028b4 <HAL_GPIO_WritePin>
}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	58021400 	.word	0x58021400
 800903c:	24000900 	.word	0x24000900

08009040 <User_RunSystem>:
#include "User_TM1638.h"

void User_RunSystem();

void User_RunSystem()
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
    while(1)
    {
        HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8009044:	2201      	movs	r2, #1
 8009046:	2101      	movs	r1, #1
 8009048:	4805      	ldr	r0, [pc, #20]	@ (8009060 <User_RunSystem+0x20>)
 800904a:	f7f9 fc33 	bl	80028b4 <HAL_GPIO_WritePin>
        
        DisplayRTC();
 800904e:	f7ff ffad 	bl	8008fac <DisplayRTC>
        HAL_Delay(1000);
 8009052:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009056:	f7f8 fc2f 	bl	80018b8 <HAL_Delay>
        continue;
 800905a:	bf00      	nop
    {
 800905c:	e7f2      	b.n	8009044 <User_RunSystem+0x4>
 800905e:	bf00      	nop
 8009060:	58020400 	.word	0x58020400

08009064 <TM1638_SendByte>:
{
    IsSended_SPI = 1;
}

void TM1638_SendByte(uint8_t data)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	71fb      	strb	r3, [r7, #7]
    IsSended_SPI = 0;
 800906e:	4b07      	ldr	r3, [pc, #28]	@ (800908c <TM1638_SendByte+0x28>)
 8009070:	2200      	movs	r2, #0
 8009072:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&TM1638_SPI, &data, sizeof(data), HAL_MAX_DELAY);
 8009074:	1df9      	adds	r1, r7, #7
 8009076:	f04f 33ff 	mov.w	r3, #4294967295
 800907a:	2201      	movs	r2, #1
 800907c:	4804      	ldr	r0, [pc, #16]	@ (8009090 <TM1638_SendByte+0x2c>)
 800907e:	f7fd f815 	bl	80060ac <HAL_SPI_Transmit>
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	24000914 	.word	0x24000914
 8009090:	240002ac 	.word	0x240002ac

08009094 <TM1638_DisplayNumber>:
    HAL_SPI_Receive(&TM1638_SPI, &receivedData, 1, HAL_MAX_DELAY);
    return receivedData;
}

void TM1638_DisplayNumber(uint8_t position, uint8_t number)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	460a      	mov	r2, r1
 800909e:	71fb      	strb	r3, [r7, #7]
 80090a0:	4613      	mov	r3, r2
 80090a2:	71bb      	strb	r3, [r7, #6]
    TM1638_SendByte(0xC0 | (position * 2));
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	005b      	lsls	r3, r3, #1
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	b25b      	sxtb	r3, r3
 80090ac:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80090b0:	b25b      	sxtb	r3, r3
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff ffd5 	bl	8009064 <TM1638_SendByte>
    TM1638_SendByte(TM1636_7Seg[number]);
 80090ba:	79bb      	ldrb	r3, [r7, #6]
 80090bc:	4a04      	ldr	r2, [pc, #16]	@ (80090d0 <TM1638_DisplayNumber+0x3c>)
 80090be:	5cd3      	ldrb	r3, [r2, r3]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff ffcf 	bl	8009064 <TM1638_SendByte>
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	080092a4 	.word	0x080092a4

080090d4 <TM1638_Init>:

void TM1638_Init()
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
    // 2. 디스플레이 및 밝기 설정 (0x8F = 밝기 최대)
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 80090da:	2200      	movs	r2, #0
 80090dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80090e0:	482d      	ldr	r0, [pc, #180]	@ (8009198 <TM1638_Init+0xc4>)
 80090e2:	f7f9 fbe7 	bl	80028b4 <HAL_GPIO_WritePin>
    TM1638_SendByte(0x8F);
 80090e6:	208f      	movs	r0, #143	@ 0x8f
 80090e8:	f7ff ffbc 	bl	8009064 <TM1638_SendByte>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 80090ec:	2201      	movs	r2, #1
 80090ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80090f2:	4829      	ldr	r0, [pc, #164]	@ (8009198 <TM1638_Init+0xc4>)
 80090f4:	f7f9 fbde 	bl	80028b4 <HAL_GPIO_WritePin>

    // 3. 데이터 설정 (0x40 = 자동 주소 증가 모드)
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 80090f8:	2200      	movs	r2, #0
 80090fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80090fe:	4826      	ldr	r0, [pc, #152]	@ (8009198 <TM1638_Init+0xc4>)
 8009100:	f7f9 fbd8 	bl	80028b4 <HAL_GPIO_WritePin>
    TM1638_SendByte(0x40);
 8009104:	2040      	movs	r0, #64	@ 0x40
 8009106:	f7ff ffad 	bl	8009064 <TM1638_SendByte>
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 800910a:	2201      	movs	r2, #1
 800910c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009110:	4821      	ldr	r0, [pc, #132]	@ (8009198 <TM1638_Init+0xc4>)
 8009112:	f7f9 fbcf 	bl	80028b4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8009116:	2200      	movs	r2, #0
 8009118:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800911c:	481e      	ldr	r0, [pc, #120]	@ (8009198 <TM1638_Init+0xc4>)
 800911e:	f7f9 fbc9 	bl	80028b4 <HAL_GPIO_WritePin>
    TM1638_SendByte(0xC0);  // 주소 0번부터 시작
 8009122:	20c0      	movs	r0, #192	@ 0xc0
 8009124:	f7ff ff9e 	bl	8009064 <TM1638_SendByte>
    for (int i = 0; i < 16; i++) {
 8009128:	2300      	movs	r3, #0
 800912a:	607b      	str	r3, [r7, #4]
 800912c:	e008      	b.n	8009140 <TM1638_Init+0x6c>
        TM1638_SendByte(0xFF);
 800912e:	20ff      	movs	r0, #255	@ 0xff
 8009130:	f7ff ff98 	bl	8009064 <TM1638_SendByte>
        HAL_Delay(10);
 8009134:	200a      	movs	r0, #10
 8009136:	f7f8 fbbf 	bl	80018b8 <HAL_Delay>
    for (int i = 0; i < 16; i++) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	3301      	adds	r3, #1
 800913e:	607b      	str	r3, [r7, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b0f      	cmp	r3, #15
 8009144:	ddf3      	ble.n	800912e <TM1638_Init+0x5a>
    }
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009146:	2201      	movs	r2, #1
 8009148:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800914c:	4812      	ldr	r0, [pc, #72]	@ (8009198 <TM1638_Init+0xc4>)
 800914e:	f7f9 fbb1 	bl	80028b4 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_RESET);
 8009152:	2200      	movs	r2, #0
 8009154:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009158:	480f      	ldr	r0, [pc, #60]	@ (8009198 <TM1638_Init+0xc4>)
 800915a:	f7f9 fbab 	bl	80028b4 <HAL_GPIO_WritePin>
    TM1638_SendByte_TEST(0xC0);
 800915e:	20c0      	movs	r0, #192	@ 0xc0
 8009160:	f000 f81c 	bl	800919c <TM1638_SendByte_TEST>
    for (int i = 0; i < 16; i++) {
 8009164:	2300      	movs	r3, #0
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	e008      	b.n	800917c <TM1638_Init+0xa8>
        TM1638_SendByte(0x00);
 800916a:	2000      	movs	r0, #0
 800916c:	f7ff ff7a 	bl	8009064 <TM1638_SendByte>
        HAL_Delay(10);
 8009170:	200a      	movs	r0, #10
 8009172:	f7f8 fba1 	bl	80018b8 <HAL_Delay>
    for (int i = 0; i < 16; i++) {
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	3301      	adds	r3, #1
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	2b0f      	cmp	r3, #15
 8009180:	ddf3      	ble.n	800916a <TM1638_Init+0x96>
    }
    HAL_GPIO_WritePin(SPI_STB_GPIO_Port, SPI_STB_Pin, GPIO_PIN_SET);
 8009182:	2201      	movs	r2, #1
 8009184:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009188:	4803      	ldr	r0, [pc, #12]	@ (8009198 <TM1638_Init+0xc4>)
 800918a:	f7f9 fb93 	bl	80028b4 <HAL_GPIO_WritePin>
}
 800918e:	bf00      	nop
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	58021400 	.word	0x58021400

0800919c <TM1638_SendByte_TEST>:
#define TM1638_CLK_PORT   GPIOA

#define TM1638_DIO_PIN    GPIO_PIN_5
#define TM1638_DIO_PORT   GPIOB

void TM1638_SendByte_TEST(uint8_t data) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e01b      	b.n	80091e4 <TM1638_SendByte_TEST+0x48>
        HAL_GPIO_WritePin(TM1638_CLK_PORT, TM1638_CLK_PIN, GPIO_PIN_RESET); // CLK LOW
 80091ac:	2200      	movs	r2, #0
 80091ae:	2120      	movs	r1, #32
 80091b0:	4810      	ldr	r0, [pc, #64]	@ (80091f4 <TM1638_SendByte_TEST+0x58>)
 80091b2:	f7f9 fb7f 	bl	80028b4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TM1638_DIO_PORT, TM1638_DIO_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	461a      	mov	r2, r3
 80091c0:	2120      	movs	r1, #32
 80091c2:	480d      	ldr	r0, [pc, #52]	@ (80091f8 <TM1638_SendByte_TEST+0x5c>)
 80091c4:	f7f9 fb76 	bl	80028b4 <HAL_GPIO_WritePin>
        HAL_Delay(10); // 약간의 지연
 80091c8:	200a      	movs	r0, #10
 80091ca:	f7f8 fb75 	bl	80018b8 <HAL_Delay>
        HAL_GPIO_WritePin(TM1638_CLK_PORT, TM1638_CLK_PIN, GPIO_PIN_SET);   // CLK HIGH
 80091ce:	2201      	movs	r2, #1
 80091d0:	2120      	movs	r1, #32
 80091d2:	4808      	ldr	r0, [pc, #32]	@ (80091f4 <TM1638_SendByte_TEST+0x58>)
 80091d4:	f7f9 fb6e 	bl	80028b4 <HAL_GPIO_WritePin>
        data >>= 1;
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	085b      	lsrs	r3, r3, #1
 80091dc:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3301      	adds	r3, #1
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b07      	cmp	r3, #7
 80091e8:	dde0      	ble.n	80091ac <TM1638_SendByte_TEST+0x10>
    }
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	58020000 	.word	0x58020000
 80091f8:	58020400 	.word	0x58020400

080091fc <memset>:
 80091fc:	4402      	add	r2, r0
 80091fe:	4603      	mov	r3, r0
 8009200:	4293      	cmp	r3, r2
 8009202:	d100      	bne.n	8009206 <memset+0xa>
 8009204:	4770      	bx	lr
 8009206:	f803 1b01 	strb.w	r1, [r3], #1
 800920a:	e7f9      	b.n	8009200 <memset+0x4>

0800920c <__libc_init_array>:
 800920c:	b570      	push	{r4, r5, r6, lr}
 800920e:	4d0d      	ldr	r5, [pc, #52]	@ (8009244 <__libc_init_array+0x38>)
 8009210:	4c0d      	ldr	r4, [pc, #52]	@ (8009248 <__libc_init_array+0x3c>)
 8009212:	1b64      	subs	r4, r4, r5
 8009214:	10a4      	asrs	r4, r4, #2
 8009216:	2600      	movs	r6, #0
 8009218:	42a6      	cmp	r6, r4
 800921a:	d109      	bne.n	8009230 <__libc_init_array+0x24>
 800921c:	4d0b      	ldr	r5, [pc, #44]	@ (800924c <__libc_init_array+0x40>)
 800921e:	4c0c      	ldr	r4, [pc, #48]	@ (8009250 <__libc_init_array+0x44>)
 8009220:	f000 f818 	bl	8009254 <_init>
 8009224:	1b64      	subs	r4, r4, r5
 8009226:	10a4      	asrs	r4, r4, #2
 8009228:	2600      	movs	r6, #0
 800922a:	42a6      	cmp	r6, r4
 800922c:	d105      	bne.n	800923a <__libc_init_array+0x2e>
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	f855 3b04 	ldr.w	r3, [r5], #4
 8009234:	4798      	blx	r3
 8009236:	3601      	adds	r6, #1
 8009238:	e7ee      	b.n	8009218 <__libc_init_array+0xc>
 800923a:	f855 3b04 	ldr.w	r3, [r5], #4
 800923e:	4798      	blx	r3
 8009240:	3601      	adds	r6, #1
 8009242:	e7f2      	b.n	800922a <__libc_init_array+0x1e>
 8009244:	080092b8 	.word	0x080092b8
 8009248:	080092b8 	.word	0x080092b8
 800924c:	080092b8 	.word	0x080092b8
 8009250:	080092bc 	.word	0x080092bc

08009254 <_init>:
 8009254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009256:	bf00      	nop
 8009258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925a:	bc08      	pop	{r3}
 800925c:	469e      	mov	lr, r3
 800925e:	4770      	bx	lr

08009260 <_fini>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	bf00      	nop
 8009264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009266:	bc08      	pop	{r3}
 8009268:	469e      	mov	lr, r3
 800926a:	4770      	bx	lr
